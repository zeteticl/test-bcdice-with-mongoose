diff --git a/src/bcdiceCore.rb b/src/bcdiceCore.rb
--- a/src/bcdiceCore.rb
+++ b/src/bcdiceCore.rb
@@ -553,7 +553,7 @@ class BCDice
     string, _secret, _count, swapMarker = getD66Infos(dice)
     unless  string.nil?
       value = getD66ValueByMarker(swapMarker)
-      diceText = (value / 10).to_s + "," + (value % 10).to_s
+      diceText = value.div(10).to_s + "," + (value % 10).to_s
       return value, diceText
     end
 
diff --git a/src/dice/add_dice/node.rb b/src/dice/add_dice/node.rb
--- a/src/dice/add_dice/node.rb
+++ b/src/dice/add_dice/node.rb
@@ -231,7 +231,7 @@ class AddDice
       # @param [Integer] divisor 除数（0以外）
       # @return [Integer]
       def divide_and_round(dividend, divisor)
-        dividend / divisor
+        dividend.div(divisor)
       end
     end
 
diff --git a/src/diceBot/ChaosFlare.rb b/src/diceBot/ChaosFlare.rb
--- a/src/diceBot/ChaosFlare.rb
+++ b/src/diceBot/ChaosFlare.rb
@@ -100,7 +100,7 @@ INFO_MESSAGE_TEXT
         return "因果表(#{num}) ＞ #{FATE_TABLE[num][0]}"
       end
 
-      dice1 = num / 10
+      dice1 = num.div(10)
       dice2 = num % 10
       if !(1..6).include?(dice1) || !(1..6).include?(dice2)
         return nil
@@ -111,7 +111,7 @@ INFO_MESSAGE_TEXT
     end
 
     index1 = dice1
-    index2 = (dice2 / 2) - 1
+    index2 = dice2.div(2) - 1
     return "因果表(#{dice1}#{dice2}) ＞ #{FATE_TABLE[index1][index2]}"
   end
 
diff --git a/src/diceBot/Chill3.rb b/src/diceBot/Chill3.rb
--- a/src/diceBot/Chill3.rb
+++ b/src/diceBot/Chill3.rb
@@ -23,7 +23,7 @@ INFO_MESSAGE_TEXT
     return '' unless cmp_op == :<=
 
     # ゾロ目ならC-ResultかBotch
-    tens = (dice_total / 10) % 10
+    tens = (dice_total.div(10)) % 10
     ones = dice_total % 10
 
     if tens == ones
diff --git a/src/diceBot/Cthulhu7th.rb b/src/diceBot/Cthulhu7th.rb
--- a/src/diceBot/Cthulhu7th.rb
+++ b/src/diceBot/Cthulhu7th.rb
@@ -166,8 +166,8 @@ INFO_MESSAGE_TEXT
   def getCheckResultText(total, diff, fumbleable = false)
     if total <= diff
       return "クリティカル" if total == 1
-      return "イクストリーム成功" if total <= (diff / 5)
-      return "ハード成功" if total <= (diff / 2)
+      return "イクストリーム成功" if total <= diff.div(5)
+      return "ハード成功" if total <= diff.div(2)
 
       return "レギュラー成功"
     end
@@ -225,7 +225,7 @@ INFO_MESSAGE_TEXT
     broken_number = Regexp.last_match(3).to_i
     bonus_dice_count = (Regexp.last_match(4) || 0).to_i
     stop_count = (Regexp.last_match(5) || "").to_s.downcase
-    bullet_set_count_cap = (Regexp.last_match(6) || diff / 10).to_i
+    bullet_set_count_cap = (Regexp.last_match(6) || diff.div(10)).to_i
 
     output = ""
 
@@ -237,8 +237,8 @@ INFO_MESSAGE_TEXT
     end
 
     # ボレーの上限の設定がおかしい場合の注意表示
-    if (bullet_set_count_cap > diff / 10) && (diff > 39) && !Regexp.last_match(6).nil?
-      bullet_set_count_cap = diff / 10
+    if (bullet_set_count_cap > diff.div(10)) && (diff > 39) && !Regexp.last_match(6).nil?
+      bullet_set_count_cap = diff.div(10)
       output += "ボレーの弾丸の数の上限は\[技能値÷10（切り捨て）\]発なので、それより高い数を指定できません。ボレーの弾丸の数を#{bullet_set_count_cap}発に変更します。\n"
     elsif (diff <= 39) && (bullet_set_count_cap > 3) && !Regexp.last_match(6).nil?
       bullet_set_count_cap = 3
@@ -442,7 +442,7 @@ INFO_MESSAGE_TEXT
   end
 
   def getSetOfBullet(diff, bullet_set_count_cap)
-    bullet_set_count = diff / 10
+    bullet_set_count = diff.div(10)
 
     if bullet_set_count_cap < bullet_set_count
       bullet_set_count = bullet_set_count_cap
@@ -456,7 +456,7 @@ INFO_MESSAGE_TEXT
   end
 
   def getHitBulletCountBase(diff, bullet_set_count)
-    hit_bullet_count_base = (bullet_set_count / 2)
+    hit_bullet_count_base = bullet_set_count.div(2)
 
     if (diff >= 1) && (diff < 30)
       hit_bullet_count_base = 1 # 技能値29以下での最低値保障
diff --git a/src/diceBot/Cthulhu7th_ChineseTraditional.rb b/src/diceBot/Cthulhu7th_ChineseTraditional.rb
--- a/src/diceBot/Cthulhu7th_ChineseTraditional.rb
+++ b/src/diceBot/Cthulhu7th_ChineseTraditional.rb
@@ -344,7 +344,7 @@ INFO_MESSAGE_TEXT
   end
 
   def getSetOfBullet(diff)
-    bullet_set_count = diff / 10
+    bullet_set_count = diff.div(10)
 
     if (diff >= 1) && (diff < 10)
       bullet_set_count = 1 # 技能值９以下的最低限度保障處理
@@ -354,7 +354,7 @@ INFO_MESSAGE_TEXT
   end
 
   def getHitBulletCountBase(diff, bullet_set_count)
-    hit_bullet_count_base = (bullet_set_count / 2)
+    hit_bullet_count_base = bullet_set_count.div(2)
 
     if (diff >= 1) && (diff < 10)
       hit_bullet_count_base = 1 # 技能值９以下的最低限度保障處理
diff --git a/src/diceBot/Cthulhu7th_Korean.rb b/src/diceBot/Cthulhu7th_Korean.rb
--- a/src/diceBot/Cthulhu7th_Korean.rb
+++ b/src/diceBot/Cthulhu7th_Korean.rb
@@ -341,7 +341,7 @@ INFO_MESSAGE_TEXT
   end
 
   def getSetOfBullet(diff)
-    bullet_set_count = diff / 10
+    bullet_set_count = diff.div(10)
 
     if (diff >= 1) && (diff < 10)
       bullet_set_count = 1 # 기능 수치가 9 이하일 때의 최저수치 보장 처리
@@ -351,7 +351,7 @@ INFO_MESSAGE_TEXT
   end
 
   def getHitBulletCountBase(diff, bullet_set_count)
-    hit_bullet_count_base = (bullet_set_count / 2)
+    hit_bullet_count_base = bullet_set_count.div(2)
 
     if (diff >= 1) && (diff < 10)
       hit_bullet_count_base = 1 # 기능 수치가 9 이하일 때의 최저수치 보장
diff --git a/src/diceBot/CthulhuTech.rb b/src/diceBot/CthulhuTech.rb
--- a/src/diceBot/CthulhuTech.rb
+++ b/src/diceBot/CthulhuTech.rb
@@ -57,7 +57,7 @@ INFO_MESSAGE_TEXT
       dice_values = Array.new(@num) { bot.roll(1, 10)[0] }
 
       # ファンブル：出目の半分（小数点以下切り上げ）以上が1の場合
-      fumble = dice_values.count(1) >= (dice_values.length + 1) / 2
+      fumble = dice_values.count(1) >= (dice_values.length + 1).div(2)
 
       sorted_dice_values = dice_values.sort
       roll_result = calculate_roll_result(sorted_dice_values)
diff --git a/src/diceBot/DiceBot.rb b/src/diceBot/DiceBot.rb
--- a/src/diceBot/DiceBot.rb
+++ b/src/diceBot/DiceBot.rb
@@ -517,13 +517,13 @@ class DiceBot
         item, value = get_table_by_d66(table)
         value = value.to_i
         output = item[1]
-        diceText = (value / 10).to_s + "," + (value % 10).to_s
+        diceText = value.div(10).to_s + "," + (value % 10).to_s
         [output, value, diceText]
       when 'D66S'
         table = getTableInfoFromExtraTableText(table, 21)
         output, value = get_table_by_d66_swap(table)
         value = value.to_i
-        diceText = (value / 10).to_s + "," + (value % 10).to_s
+        diceText = value.div(10).to_s + "," + (value % 10).to_s
         [output, value, diceText]
       else
         raise "invalid dice Type #{command}"
diff --git a/src/diceBot/Dracurouge.rb b/src/diceBot/Dracurouge.rb
--- a/src/diceBot/Dracurouge.rb
+++ b/src/diceBot/Dracurouge.rb
@@ -86,7 +86,7 @@ MESSAGETEXT
     oneCount = countTargetDice(diceList, 1)
     sixCount = countTargetDice(diceList, 6)
 
-    gloryDiceCount = (oneCount / 2) + (sixCount / 2)
+    gloryDiceCount = oneCount.div(2) + sixCount.div(2)
     return gloryDiceCount
   end
 
diff --git a/src/diceBot/Dracurouge_Korean.rb b/src/diceBot/Dracurouge_Korean.rb
--- a/src/diceBot/Dracurouge_Korean.rb
+++ b/src/diceBot/Dracurouge_Korean.rb
@@ -88,7 +88,7 @@ MESSAGETEXT
     oneCount = countTargetDice(diceList, 1)
     sixCount = countTargetDice(diceList, 6)
 
-    gloryDiceCount = (oneCount / 2) + (sixCount / 2)
+    gloryDiceCount = oneCount.div(2) + sixCount.div(2)
     return gloryDiceCount
   end
 
@@ -143,7 +143,7 @@ MESSAGETEXT
     type2 = %w{영주	근위	방랑	현자	사냥꾼	야수}
     type2_indexTexts = %w{F G R W J N}
 
-    tensValue = number.to_i / 10
+    tensValue = number.to_i.div(10)
     isBefore = (tensValue < 4)
     type = (isBefore ? type1 : type2)
     indexTexts = (isBefore ? type1_indexTexts : type2_indexTexts)
diff --git a/src/diceBot/EarthDawn3.rb b/src/diceBot/EarthDawn3.rb
--- a/src/diceBot/EarthDawn3.rb
+++ b/src/diceBot/EarthDawn3.rb
@@ -146,7 +146,7 @@ INFO_MESSAGE_TEXT
 
     result = [  0, 0, 0, 0, 0, 0, 0]
 
-    loopCount = (overStep / stepRythm.size)
+    loopCount = overStep.div(stepRythm.size)
 
     loopCount.times do
       addStepToResult(result, baseStepInfo)
diff --git a/src/diceBot/EarthDawn4.rb b/src/diceBot/EarthDawn4.rb
--- a/src/diceBot/EarthDawn4.rb
+++ b/src/diceBot/EarthDawn4.rb
@@ -192,7 +192,7 @@ INFO_MESSAGE_TEXT
 
     result = [  0, 0, 0, 0, 0, 0, 0]
 
-    loopCount = (overStep / stepRythm.size)
+    loopCount = overStep.div(stepRythm.size)
 
     loopCount.times do
       addStepToResult(result, overBounusStep)
@@ -224,7 +224,7 @@ INFO_MESSAGE_TEXT
       return "失敗"
     end
 
-    level = (diff / 5) + 1
+    level = diff.div(5) + 1
 
     return "成功 レベル：#{level}"
   end
diff --git a/src/diceBot/EclipsePhase.rb b/src/diceBot/EclipsePhase.rb
--- a/src/diceBot/EclipsePhase.rb
+++ b/src/diceBot/EclipsePhase.rb
@@ -20,7 +20,7 @@ class EclipsePhase < DiceBot
     return '' unless cmp_op == :<=
 
     diceValue = total % 100 # 出目00は100ではなく00とする
-    dice_ten_place = diceValue / 10
+    dice_ten_place = diceValue.div(10)
     dice_one_place = diceValue % 10
 
     if dice_ten_place == dice_one_place
diff --git a/src/diceBot/FilledWith.rb b/src/diceBot/FilledWith.rb
--- a/src/diceBot/FilledWith.rb
+++ b/src/diceBot/FilledWith.rb
@@ -1513,7 +1513,7 @@ MESSAGETEXT
           '『白銀の猛将』ジェネラル(CL55/ネームド)1匹([命中]+4、あらゆる致傷力+20、[HP]+500)'
         ]],
       ]
-      case event / 100
+      case event.div(100)
       when 1
         areaText = "洞窟"
       when 2
diff --git a/src/diceBot/GardenOrder.rb b/src/diceBot/GardenOrder.rb
--- a/src/diceBot/GardenOrder.rb
+++ b/src/diceBot/GardenOrder.rb
@@ -51,12 +51,12 @@ INFO_MESSAGE_TEXT
   def get_critical_border(critical_border_text, success_rate)
     return critical_border_text.to_i unless critical_border_text.nil?
 
-    critical_border = [success_rate / 5, 1].max
+    critical_border = [success_rate.div(5), 1].max
     return critical_border
   end
 
   def check_roll_repeat_attack(success_rate, repeat_count, critical_border)
-    success_rate_per_one = success_rate / repeat_count
+    success_rate_per_one = success_rate.div(repeat_count)
 
     check_roll(success_rate_per_one, critical_border)
   end
diff --git a/src/diceBot/Gundog.rb b/src/diceBot/Gundog.rb
--- a/src/diceBot/Gundog.rb
+++ b/src/diceBot/Gundog.rb
@@ -27,7 +27,7 @@ INFO_MESSAGE_TEXT
     elsif total <= 1
       " ＞ 絶対成功(達成値1+SL)"
     elsif total <= target
-      dig10 = total / 10
+      dig10 = total.div(10)
       dig1 = total - dig10 * 10
       dig10 = 0 if dig10 >= 10
       dig1 = 0 if dig1 >= 10 # 条件的にはあり得ない(笑
diff --git a/src/diceBot/GundogRevised.rb b/src/diceBot/GundogRevised.rb
--- a/src/diceBot/GundogRevised.rb
+++ b/src/diceBot/GundogRevised.rb
@@ -38,7 +38,7 @@ INFO_MESSAGE_TEXT
     elsif total <= 1
       " ＞ ベアリー(達成値1+SL)"
     elsif total <= target
-      dig10 = total / 10
+      dig10 = total.div(10)
       dig1 = total - dig10 * 10
       dig10 = 0 if dig10 >= 10
       dig1 = 0 if dig1 >= 10 # 条件的にはあり得ない(笑
diff --git a/src/diceBot/GurpsFW.rb b/src/diceBot/GurpsFW.rb
--- a/src/diceBot/GurpsFW.rb
+++ b/src/diceBot/GurpsFW.rb
@@ -340,7 +340,7 @@ INFO_MESSAGE_TEXT
       tableName = "財宝テーブル"
       diff = Regexp.last_match(1)
       depth = Regexp.last_match(2).to_i
-      num = depth / 10
+      num = depth.div(10)
       if num >= 6
         num = 5
       end
diff --git a/src/diceBot/IthaWenUa.rb b/src/diceBot/IthaWenUa.rb
--- a/src/diceBot/IthaWenUa.rb
+++ b/src/diceBot/IthaWenUa.rb
@@ -19,7 +19,7 @@ class IthaWenUa < DiceBot
     return '' unless cmp_op == :<=
 
     diceValue = total % 100
-    dice0 = diceValue / 10 # 10の位を代入
+    dice0 = diceValue.div(10) # 10の位を代入
     dice1 = diceValue % 10 # 1の位を代入
 
     if (dice0 == 0) && (dice1 == 1)
diff --git a/src/diceBot/KemonoNoMori.rb b/src/diceBot/KemonoNoMori.rb
--- a/src/diceBot/KemonoNoMori.rb
+++ b/src/diceBot/KemonoNoMori.rb
@@ -67,7 +67,7 @@ MESSAGETEXT
 
     # 行為判定の成功度は [目標値の10の位の数+1]
     # 継続判定の成功度は固定で+1
-    success_degree = is_action_judge ? target_total / 10 + 1 : 1
+    success_degree = is_action_judge ? target_total.div(10) + 1 : 1
 
     dice_total, = roll(1, 12)
     debug('dice_total, target_total, success_degree = ', dice_total, target_total, success_degree)
diff --git a/src/diceBot/LogHorizon.rb b/src/diceBot/LogHorizon.rb
--- a/src/diceBot/LogHorizon.rb
+++ b/src/diceBot/LogHorizon.rb
@@ -477,7 +477,7 @@ MESSAGETEXT
   end
 
   def getTableByRank(rank, tables)
-    index = (rank - 1) / 5
+    index = (rank - 1).div(5)
 
     index = [0, index].max
     index = [index, (tables.size - 1)].min
diff --git a/src/diceBot/LogHorizon_Korean.rb b/src/diceBot/LogHorizon_Korean.rb
--- a/src/diceBot/LogHorizon_Korean.rb
+++ b/src/diceBot/LogHorizon_Korean.rb
@@ -316,7 +316,7 @@ MESSAGETEXT
   end
 
   def getTableByRank(rank, tables)
-    index = (rank - 1) / 5
+    index = (rank - 1).div(5)
 
     index = [0, index].max
     index = [index, (tables.size - 1)].min
diff --git a/src/diceBot/NinjaSlayer.rb b/src/diceBot/NinjaSlayer.rb
--- a/src/diceBot/NinjaSlayer.rb
+++ b/src/diceBot/NinjaSlayer.rb
@@ -57,16 +57,16 @@ MESSAGETEXT
   # 難易度の値の正規表現
   DIFFICULTY_VALUE_RE = /UH|[2-6KENH]/i.freeze
   # 難易度の正規表現
-  DIFFICULTY_RE = /\[(#{DIFFICULTY_VALUE_RE})\]|@(#{DIFFICULTY_VALUE_RE})/io.freeze
+  DIFFICULTY_RE = /(?:\[(#{DIFFICULTY_VALUE_RE.source})\]|@(#{DIFFICULTY_VALUE_RE.source}))/io.freeze
 
   # 通常判定の正規表現
-  NJ_RE = /\A(S)?NJ(\d+)#{DIFFICULTY_RE}?\z/io.freeze
+  NJ_RE = /\A(S)?NJ(\d+)#{DIFFICULTY_RE.source}?\z/io.freeze
   # 回避判定の正規表現
-  EV_RE = %r{\AEV(\d+)#{DIFFICULTY_RE}?(?:/(\d+))?\z}io.freeze
+  EV_RE = %r{\AEV(\d+)#{DIFFICULTY_RE.source}?(?:/(\d+))?\z}io.freeze
   # 近接攻撃の正規表現
-  AT_RE = /\AAT(\d+)#{DIFFICULTY_RE}?\z/io.freeze
+  AT_RE = /\AAT(\d+)#{DIFFICULTY_RE.source}?\z/io.freeze
   # 電子戦の正規表現
-  EL_RE = /\AEL(\d+)#{DIFFICULTY_RE}?\z/io.freeze
+  EL_RE = /\AEL(\d+)#{DIFFICULTY_RE.source}?\z/io.freeze
 
   # バラバラロール結果の "(" の前までの先頭部分
   B_ROLL_RESULT_HEAD_RE = /\A[^(]+/.freeze
diff --git a/src/diceBot/Ryutama.rb b/src/diceBot/Ryutama.rb
--- a/src/diceBot/Ryutama.rb
+++ b/src/diceBot/Ryutama.rb
@@ -85,14 +85,14 @@ INFO_MESSAGE_TEXT
 
     diceBase = dice1
 
-    dice1 = diceBase / 10
+    dice1 = diceBase.div(10)
     dice2 = diceBase % 10
 
     if isValidDice(dice1, dice2)
       return dice1, dice2
     end
 
-    dice1 = diceBase / 100
+    dice1 = diceBase.div(100)
     dice2 = diceBase % 100
 
     if isValidDice(dice1, dice2)
diff --git a/src/diceBot/SRS.rb b/src/diceBot/SRS.rb
--- a/src/diceBot/SRS.rb
+++ b/src/diceBot/SRS.rb
@@ -81,15 +81,15 @@ HELP_MESSAGE
                      join('|')
 
       @aliases_re_for_srs_roll_with_target_value = Regexp.new(
-        '\A' \
+        '^' \
         "(?:#{aliases_part})" \
-        '((?:[-+][-+\d]+)?>=\d+(?:\[\d*(?:,\d+)?\])?)\z'
+        '((?:[-+][-+\d]+)?>=\d+(?:\[\d*(?:,\d+)?\])?)$'
       )
 
       @aliases_re_for_srs_roll_without_target_value = Regexp.new(
-        '\A' \
+        '^' \
         "(?:#{aliases_part})" \
-        '([-+][-+\d]+)?(\[\d*(?:,\d+)?\])?\z'
+        '([-+][-+\d]+)?(\[\d*(?:,\d+)?\])?$'
       )
 
       prepare_help_msg_for_aliases_for_srs_roll(aliases_upcase)
diff --git a/src/diceBot/ShinMegamiTenseiKakuseihen.rb b/src/diceBot/ShinMegamiTenseiKakuseihen.rb
--- a/src/diceBot/ShinMegamiTenseiKakuseihen.rb
+++ b/src/diceBot/ShinMegamiTenseiKakuseihen.rb
@@ -44,7 +44,7 @@ INFO_MESSAGE_TEXT
   def split_tens(value)
     value %= 100
 
-    ones = value / 10
+    ones = value.div(10)
     tens = value % 10
 
     return [ones, tens]
diff --git a/src/diceBot/Skynauts.rb b/src/diceBot/Skynauts.rb
--- a/src/diceBot/Skynauts.rb
+++ b/src/diceBot/Skynauts.rb
@@ -98,7 +98,7 @@ MESSAGETEXT
     debug("移動修正", bonus)
 
     total, = roll(1, 6)
-    movePointBase = (total / 2) <= 0 ? 1 : (total / 2)
+    movePointBase = total.div(2) <= 0 ? 1 : total.div(2)
     movePoint = movePointBase + bonus
     debug("移動エリア数", movePoint)
 
diff --git a/src/diceBot/VampireTheMasquerade5th.rb b/src/diceBot/VampireTheMasquerade5th.rb
--- a/src/diceBot/VampireTheMasquerade5th.rb
+++ b/src/diceBot/VampireTheMasquerade5th.rb
@@ -93,7 +93,7 @@ MESSAGETEXT
 
   def get_critical_success(ten_dice)
     # 10の目が2個毎に追加2成功
-    return ((ten_dice / 2) * 2)
+    return ten_dice.div(2) * 2
   end
 
   def make_dice_roll(dice_pool)
diff --git a/src/diceBot/Warhammer.rb b/src/diceBot/Warhammer.rb
--- a/src/diceBot/Warhammer.rb
+++ b/src/diceBot/Warhammer.rb
@@ -55,9 +55,9 @@ INFO_MESSAGE_TEXT
     return '' unless cmp_op == :<=
 
     if total <= target
-      " ＞ 成功(成功度#{(target - total) / 10})"
+      " ＞ 成功(成功度#{(target - total).div(10)})"
     else
-      " ＞ 失敗(失敗度#{(total - target) / 10})"
+      " ＞ 失敗(失敗度#{(total - target).div(10)})"
     end
   end
 
diff --git a/src/utils/ArithmeticEvaluator.rb b/src/utils/ArithmeticEvaluator.rb
--- a/src/utils/ArithmeticEvaluator.rb
+++ b/src/utils/ArithmeticEvaluator.rb
@@ -71,7 +71,7 @@ class ArithmeticEvaluator
     when :roundOff
       return (left.to_f / right).round
     else
-      return left / right
+      return left.div(right)
     end
   end
 
