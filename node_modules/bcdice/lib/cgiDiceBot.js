/* Generated by Opal 1.0.3 */
Opal.modules["log"] = function(Opal) {
  var $debugPrint$1, $debugPuts$2, $debug$3, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$print', '$tosjis', '$puts', '$is_a?', '$inspect', '$empty?', '$debugPuts', '$map', '$join']);
  
  
  Opal.def(self, '$debugPrint', $debugPrint$1 = function $$debugPrint(text) {
    var self = this;
    if ($gvars.RUBY18_WIN == null) $gvars.RUBY18_WIN = nil;

    return self.$print((function() {if ($truthy($gvars.RUBY18_WIN)) {
      return text.$tosjis()
    } else {
      return text
    }; return nil; })())
  }, $debugPrint$1.$$arity = 1);
  
  Opal.def(self, '$debugPuts', $debugPuts$2 = function $$debugPuts(text) {
    var self = this, line = nil;
    if ($gvars.RUBY18_WIN == null) $gvars.RUBY18_WIN = nil;

    
    line = "" + (text) + "\n";
    return self.$puts((function() {if ($truthy($gvars.RUBY18_WIN)) {
      return line.$tosjis()
    } else {
      return line
    }; return nil; })());
  }, $debugPuts$2.$$arity = 1);
  return (Opal.def(self, '$debug', $debug$3 = function $$debug(target, $a) {
    var $post_args, values, $$4, self = this, targetStr = nil, valueStrs = nil;
    if ($gvars.isDebug == null) $gvars.isDebug = nil;

    
    
    $post_args = Opal.slice.call(arguments, 1, arguments.length);
    
    values = $post_args;;
    if ($truthy($gvars.isDebug)) {
    } else {
      return nil
    };
    targetStr = (function() {if ($truthy(target['$is_a?']($$($nesting, 'String')))) {
      return target
    } else {
      return target.$inspect()
    }; return nil; })();
    if ($truthy(values['$empty?']())) {
      return self.$debugPuts(targetStr)
    } else {
      
      valueStrs = $send(values, 'map', [], ($$4 = function(value){var self = $$4.$$s || this;

      
        
        if (value == null) {
          value = nil;
        };
        if ($truthy(value['$is_a?']($$($nesting, 'String')))) {
          return "" + "\"" + (value) + "\""
        } else {
          return value.$inspect()
        };}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      return self.$debugPuts("" + (targetStr) + ": " + (valueStrs.$join(", ")));
    };
  }, $debug$3.$$arity = -2), nil) && 'debug';
};

/* Generated by Opal 1.0.3 */
Opal.modules["configBcDice"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars;

  
  $gvars.isDebug = false;
  $gvars.bcDiceVersion = "2.08.00";
  $gvars.DICE_MAXCNT = 200;
  $gvars.DICE_MAXNUM = 1000;
  $gvars.isHandSort = true;
  $gvars.OPEN_DICE = "Open Dice!";
  $gvars.OPEN_PLOT = "Open Plot!";
  $gvars.ADD_PLOT = "PLOT";
  return ($gvars.READY_CMD = "#HERE");
};

/* Generated by Opal 1.0.3 */
Opal.modules["CountHolder"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$debug', '$getNick', '$==', '$===', '$get_point_list', '$delete_point_list', '$nil?', '$rename_point_counter', '$!=', '$=~', '$executeSetCommand', '$last_match', '$to_i', '$setCountHolderByParams', '$setCount', '$changeCount', '$[]', '$[]=', '$-', '$getCharacterInfoList', '$+', '$to_s', '$downcase', '$parren_killer', '$getCharacterInfo', '$getValueText', '$getPointListAtSameNick', '$empty?', '$getPointListAtSameChannel', '$each', '$sort_point_hash', '$split', '$upcase', '$sort', '$keys', '$delete', '$setPointCounter', '$include?', '$<<', '$sort_by', '$getPointHashCurrentAndMax', '$<=>', '$b_crr', '$a_crr']);
  
  self.$require("log");
  self.$require("configBcDice.rb");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CountHolder');

    var $nesting = [self].concat($parent_nesting), $CountHolder_initialize$1, $CountHolder_executeCommand$2, $CountHolder_executeSetCommand$3, $CountHolder_setCountHolderByParams$4, $CountHolder_setCount$5, $CountHolder_changeCount$6, $CountHolder_getValueText$7, $CountHolder_getCharacterInfoList$8, $CountHolder_getCharacterInfo$9, $CountHolder_get_point_list$10, $CountHolder_getPointListAtSameNick$11, $CountHolder_getPointListAtSameChannel$16, $CountHolder_rename_point_counter$19, $CountHolder_setPointCounters$20, $CountHolder_setPointCounter$21, $CountHolder_sort_point_hash$22, $CountHolder_getPointHashCurrentAndMax$24;

    self.$$prototype.bcdice = self.$$prototype.command = self.$$prototype.nick = self.$$prototype.channel = self.$$prototype.pointerMode = self.$$prototype.maxValue = self.$$prototype.characterName = self.$$prototype.tagName = self.$$prototype.currentValue = self.$$prototype.modifyText = self.$$prototype.countInfos = nil;
    
    
    Opal.def(self, '$initialize', $CountHolder_initialize$1 = function $$initialize(bcdice, countInfos) {
      var self = this;

      
      self.bcdice = bcdice;
      return (self.countInfos = countInfos);
    }, $CountHolder_initialize$1.$$arity = 2);
    
    Opal.def(self, '$executeCommand', $CountHolder_executeCommand$2 = function $$executeCommand(command, nick, channel, pointerMode) {
      var self = this, output = nil, isSecret = nil, $case = nil;

      
      self.$debug("point_counter_command begin(command, nick, channel, pointerMode)", command, nick, channel, pointerMode);
      self.command = command;
      self.nick = self.bcdice.$getNick(nick);
      self.channel = channel;
      self.pointerMode = pointerMode;
      output = "1";
      isSecret = pointerMode['$==']("sameNick");
      $case = self.command;
      if (/^#OPEN!/i['$===']($case)) {output = self.$get_point_list()}
      else if (/^#(.*)DIED!/i['$===']($case)) {
      output = self.$delete_point_list();
      if ($truthy(output['$nil?']())) {
      } else {
        
        output = "" + (nick) + ": " + (output) + " のカウンタが削除されました";
        isSecret = true;
      };}
      else if (/^#RENAME!/i['$===']($case)) {
      output = self.$rename_point_counter();
      if ($truthy(output['$!=']("1"))) {
        
        output = "" + (nick) + ": " + (output);
        isSecret = false;};}
      else {if ($truthy(/^#/['$=~'](self.command))) {
        
        output = self.$executeSetCommand();
        if ($truthy(output['$!=']("1"))) {
          output = "" + (nick) + ": " + (output)};}};
      self.$debug("point_counter_command END output, isSecret", output, isSecret);
      return [output, isSecret];
    }, $CountHolder_executeCommand$2.$$arity = 4);
    
    Opal.def(self, '$executeSetCommand', $CountHolder_executeSetCommand$3 = function $$executeSetCommand() {
      var self = this, $case = nil;
      if ($gvars.point_counter == null) $gvars.point_counter = nil;

      
      self.$debug("setCountHolder nick, channel, pointerMode", self.nick, self.channel, self.pointerMode);
      self.characterName = self.nick;
      self.tagName = nil;
      self.currentValue = nil;
      self.maxValue = nil;
      self.modifyText = nil;
      self.$debug("$point_counter", $gvars.point_counter);
      self.$debug("@command", self.command);
      $case = self.command;
      if (/^#([^:\uFF1A]+)(:|\uFF1A)(\w+?)\s*(\d+)(\/(\d+))?/['$===']($case)) {
      self.$debug(" #(識別名):(タグ)(現在値)/(最大値) で指定します。最大値がないものは省略できます。");
      self.characterName = $$($nesting, 'Regexp').$last_match(1);
      self.tagName = $$($nesting, 'Regexp').$last_match(3);
      self.currentValue = $$($nesting, 'Regexp').$last_match(4).$to_i();
      self.maxValue = $$($nesting, 'Regexp').$last_match(6);}
      else if (/^#([^:：]+)(:|：)(\w+?)\s*([\+\-]\d+)/['$===']($case)) {
      self.$debug(" #(識別名):(タグ)(変更量)");
      self.characterName = $$($nesting, 'Regexp').$last_match(1);
      self.tagName = $$($nesting, 'Regexp').$last_match(3);
      self.modifyText = $$($nesting, 'Regexp').$last_match(4);}
      else if (/^#(\w+?)\s*(\d+)\/(\d+)/['$===']($case)) {
      self.$debug(" #(タグ)(現在値)/(最大値) 現在値/最大値指定は半角のみ。");
      self.tagName = $$($nesting, 'Regexp').$last_match(1);
      self.currentValue = $$($nesting, 'Regexp').$last_match(2).$to_i();
      self.maxValue = $$($nesting, 'Regexp').$last_match(3);}
      else if (/^#(\w+?)\s*([\+\-]\d+)/['$===']($case)) {
      self.$debug(" #(タグ)(変更量)");
      self.tagName = $$($nesting, 'Regexp').$last_match(1);
      self.modifyText = $$($nesting, 'Regexp').$last_match(2);}
      else if (/^#(\w+?)\s*(\d+)/['$===']($case)) {
      self.$debug(" #(タグ)(現在値) で指定します。現在値は半角です。");
      self.tagName = $$($nesting, 'Regexp').$last_match(1);
      self.currentValue = $$($nesting, 'Regexp').$last_match(2).$to_i();}
      else {
      self.$debug("not match command", self.command);
      return "";};
      if ($truthy(self.maxValue['$nil?']())) {
      } else {
        self.maxValue = self.maxValue.$to_i()
      };
      self.$debug("characterName", self.characterName);
      self.$debug("tagName", self.tagName);
      self.$debug("@currentValue", self.currentValue);
      self.$debug("@maxValue", self.maxValue);
      self.$debug("@modifyText", self.modifyText);
      return self.$setCountHolderByParams();
    }, $CountHolder_executeSetCommand$3.$$arity = 0);
    
    Opal.def(self, '$setCountHolderByParams', $CountHolder_setCountHolderByParams$4 = function $$setCountHolderByParams() {
      var self = this;

      
      self.$debug("@modifyText", self.modifyText);
      if ($truthy(self.modifyText['$nil?']())) {
        return self.$setCount()
      } else {
        return self.$changeCount()
      };
    }, $CountHolder_setCountHolderByParams$4.$$arity = 0);
    
    Opal.def(self, '$setCount', $CountHolder_setCount$5 = function $$setCount() {
      var $a, self = this, $writer = nil, characterInfoList = nil, characterInfo = nil, output = nil;

      
      ($truthy($a = self.countInfos['$[]'](self.channel)) ? $a : (($writer = [self.channel, $hash2([], {})]), $send(self.countInfos, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      characterInfoList = self.$getCharacterInfoList();
      ($truthy($a = characterInfoList['$[]'](self.characterName)) ? $a : (($writer = [self.characterName, $hash2([], {})]), $send(characterInfoList, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      characterInfo = characterInfoList['$[]'](self.characterName);
      
      $writer = [self.tagName, $hash2(["currentValue", "maxValue"], {"currentValue": self.currentValue, "maxValue": self.maxValue})];
      $send(characterInfo, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      self.$debug("setCount @nick, @characterName", self.nick, self.characterName);
      output = "";
      if ($truthy(self.nick['$!='](self.characterName))) {
        output = $rb_plus(output, self.characterName.$downcase().$to_s())};
      output = $rb_plus(output, "" + "(" + (self.tagName) + ") " + (self.currentValue));
      self.$debug("setCount @maxValue", self.maxValue);
      if ($truthy(self.maxValue['$nil?']())) {
      } else {
        output = $rb_plus(output, "" + "/" + (self.maxValue))
      };
      return output;
    }, $CountHolder_setCount$5.$$arity = 0);
    
    Opal.def(self, '$changeCount', $CountHolder_changeCount$6 = function $$changeCount() {
      var self = this, modifyValue = nil, characterInfo = nil, info = nil, currentValue = nil, maxValue = nil, preText = nil, $writer = nil, nowText = nil, output = nil;

      
      self.$debug("changeCount begin");
      modifyValue = self.bcdice.$parren_killer("" + "(0" + (self.modifyText) + ")").$to_i();
      characterInfo = self.$getCharacterInfo(self.channel, self.characterName);
      info = characterInfo['$[]'](self.tagName);
      self.$debug("characterInfo", characterInfo);
      self.$debug("info", info);
      if ($truthy(info['$nil?']())) {
        return ""};
      currentValue = info['$[]']("currentValue");
      maxValue = info['$[]']("maxValue");
      preText = self.$getValueText(currentValue, maxValue);
      self.$debug("currentValue", currentValue);
      self.$debug("modifyValue", modifyValue);
      currentValue = $rb_plus(currentValue, modifyValue);
      
      $writer = ["currentValue", currentValue];
      $send(info, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      nowText = self.$getValueText(currentValue, maxValue);
      output = "";
      if ($truthy(self.nick['$!='](self.characterName))) {
        output = $rb_plus(output, self.characterName.$downcase().$to_s())};
      output = $rb_plus(output, "" + "(" + (self.tagName) + ") " + (preText) + " -> " + (nowText));
      self.$debug("changeCount end output", output);
      return output;
    }, $CountHolder_changeCount$6.$$arity = 0);
    
    Opal.def(self, '$getValueText', $CountHolder_getValueText$7 = function $$getValueText(currentValue, maxValue) {
      var self = this, text = nil;

      
      text = currentValue.$to_s();
      if ($truthy(maxValue['$nil?']())) {
      } else {
        text = $rb_plus(text, "" + "/" + (maxValue))
      };
      return text;
    }, $CountHolder_getValueText$7.$$arity = 2);
    
    Opal.def(self, '$getCharacterInfoList', $CountHolder_getCharacterInfoList$8 = function $$getCharacterInfoList(channel) {
      var $a, self = this, $writer = nil, characterInfoList = nil;

      
      
      if (channel == null) {
        channel = nil;
      };
      channel = ($truthy($a = channel) ? $a : self.channel);
      ($truthy($a = self.countInfos['$[]'](channel)) ? $a : (($writer = [channel, $hash2([], {})]), $send(self.countInfos, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      characterInfoList = self.countInfos['$[]'](channel);
      return characterInfoList;
    }, $CountHolder_getCharacterInfoList$8.$$arity = -1);
    
    Opal.def(self, '$getCharacterInfo', $CountHolder_getCharacterInfo$9 = function $$getCharacterInfo(channel, characterName) {
      var $a, self = this, characterInfoList = nil, $writer = nil, characterInfo = nil;

      
      characterName = ($truthy($a = characterName) ? $a : self.characterName);
      characterInfoList = self.$getCharacterInfoList(channel);
      ($truthy($a = characterInfoList['$[]'](characterName)) ? $a : (($writer = [characterName, $hash2([], {})]), $send(characterInfoList, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      characterInfo = characterInfoList['$[]'](characterName);
      return characterInfo;
    }, $CountHolder_getCharacterInfo$9.$$arity = 2);
    
    Opal.def(self, '$get_point_list', $CountHolder_get_point_list$10 = function $$get_point_list() {
      var self = this, output = nil, tag = nil, $case = nil, pc_out = nil;

      
      self.$debug("get_point_list(command, nick, channel, pointerMode)", self.command, self.nick, self.channel, self.pointerMode);
      output = "1";
      if ($truthy(/^#OPEN![\s]*(\w*)(\s|$)/['$=~'](self.command))) {
      } else {
        return output
      };
      tag = $$($nesting, 'Regexp').$last_match(1);
      $case = self.pointerMode;
      if ("sameNick"['$===']($case)) {
      self.$debug("same nick");
      pc_out = self.$getPointListAtSameNick(tag);
      if ($truthy(pc_out['$empty?']())) {
      } else {
        output = pc_out
      };}
      else if ("sameChannel"['$===']($case)) {if ($truthy(tag)) {
        
        self.$debug("same Channel");
        pc_out = self.$getPointListAtSameChannel(tag);
        if ($truthy(pc_out['$empty?']())) {
        } else {
          output = pc_out
        };}};
      return output;
    }, $CountHolder_get_point_list$10.$$arity = 0);
    
    Opal.def(self, '$getPointListAtSameNick', $CountHolder_getPointListAtSameNick$11 = function $$getPointListAtSameNick(command, nick, channel, pointerMode, tag) {
      var $$12, $$14, $$15, self = this, pc_list = nil, pc_out = nil, sort_pc = nil, out_pc = nil, pc_sorted = nil, tag_arr = nil, tag_out = nil;
      if ($gvars.point_counter == null) $gvars.point_counter = nil;

      
      self.$debug("getPointListAtSameNick(command, nick, channel, pointerMode, tag)", command, nick, channel, pointerMode, tag);
      self.$debug("同一Nick, 自キャラの一覧表示(パラメータ指定不要)");
      pc_list = $gvars.point_counter['$[]'](nick);
      pc_out = "";
      if ($truthy(pc_list)) {
        
        sort_pc = $hash2([], {});
        $send(pc_list, 'each', [], ($$12 = function(pc_o){var self = $$12.$$s || this, $$13, tag_out = nil, check_name = nil, $writer = nil, tag_arr = nil;
          if ($gvars.point_counter == null) $gvars.point_counter = nil;

        
          
          if (pc_o == null) {
            pc_o = nil;
          };
          if ($truthy($gvars.point_counter['$[]']("" + (nick) + "," + (pc_o)))) {
          } else {
            return nil;
          };
          tag_out = "";
          if ($truthy(tag)) {
            
            check_name = "" + (nick) + "," + (pc_o);
            if ($truthy($gvars.point_counter['$[]']("" + (check_name) + "," + (tag) + ",0"))) {
              
              $writer = [check_name, $gvars.point_counter['$[]']("" + (check_name) + "," + (tag) + ",0")];
              $send(sort_pc, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy($gvars.point_counter['$[]']("" + (check_name) + "," + (tag) + ",1"))) {
              
              $writer = [check_name, $gvars.point_counter['$[]']("" + (check_name) + "," + (tag) + ",1")];
              $send(sort_pc, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
          } else {
            
            tag_arr = $gvars.point_counter['$[]']("" + (nick) + "," + (pc_o));
            $send(tag_arr, 'each', [], ($$13 = function(tag_o){var self = $$13.$$s || this;
              if ($gvars.point_counter == null) $gvars.point_counter = nil;

            
              
              if (tag_o == null) {
                tag_o = nil;
              };
              check_name = "" + (nick) + "," + (pc_o) + "," + (tag_o);
              if ($truthy($gvars.point_counter['$[]']("" + (check_name) + ",0"))) {
                tag_out = $rb_plus(tag_out, $rb_plus($rb_plus("$tag_o(", $gvars.point_counter['$[]']("" + (check_name) + ",0")), ") "))};
              if ($truthy($gvars.point_counter['$[]']("" + (check_name) + ",1"))) {
                return (tag_out = $rb_plus(tag_out, $rb_plus($rb_plus("" + (tag_o) + "[", $gvars.point_counter['$[]']("" + (check_name) + ",1")), "] ")))
              } else {
                return nil
              };}, $$13.$$s = self, $$13.$$arity = 1, $$13));
          };
          if ($truthy(tag_out)) {
          } else {
            return nil;
          };
          self.$debug("中身があるなら");
          if ($truthy(pc_out)) {
            pc_out = $rb_plus(pc_out, ", ")};
          return (pc_out = $rb_plus(pc_out, "" + (pc_o.$downcase()) + ":" + (tag_out)));}, $$12.$$s = self, $$12.$$arity = 1, $$12));
        if ($truthy(tag)) {
          
          out_pc = "";
          pc_sorted = self.$sort_point_hash(sort_pc);
          $send(pc_sorted, 'each', [], ($$14 = function(pc_o){var self = $$14.$$s || this, pc_name = nil;
            if ($gvars.pc_name == null) $gvars.pc_name = nil;
            if ($gvars.point_counter == null) $gvars.point_counter = nil;

          
            
            if (pc_o == null) {
              pc_o = nil;
            };
            pc_name = pc_o.$split(/,/);
            if ($truthy(out_pc)) {
              out_pc = $rb_plus(out_pc, ", ")};
            if ($truthy($gvars.pc_name['$[]'](1))) {
              
              if ($truthy($gvars.point_counter['$[]']("" + (pc_o) + "," + (tag) + ",0"))) {
                out_pc = $rb_plus(out_pc, $rb_plus($rb_plus("" + (pc_name['$[]'](1).$upcase()) + "(", $gvars.point_counter['$[]']("" + (pc_o) + "," + (tag) + ",0")), ")"))};
              if ($truthy($gvars.point_counter['$[]']("" + (pc_o) + "," + (tag) + ",1"))) {
                return (out_pc = $rb_plus(out_pc, $rb_plus($rb_plus("" + (pc_name['$[]'](1).$upcase()) + "[", $gvars.point_counter['$[]']("" + (pc_o) + "," + (tag) + ",1")), "]")))
              } else {
                return nil
              };
            } else {
              
              if ($truthy($gvars.point_counter['$[]']("" + (pc_o) + "," + (tag) + ",0"))) {
                out_pc = $rb_plus(out_pc, $rb_plus($rb_plus("" + (pc_name['$[]'](0).$upcase()) + "(", $gvars.point_counter['$[]']("" + (pc_o) + "," + (tag) + ",0")), ")"))};
              if ($truthy($gvars.point_counter['$[]']("" + (pc_o) + "," + (tag) + ",1"))) {
                return (out_pc = $rb_plus(out_pc, $rb_plus($rb_plus("" + (pc_name['$[]'](0).$upcase()) + "[", $gvars.point_counter['$[]']("" + (pc_o) + "," + (tag) + ",1")), "]")))
              } else {
                return nil
              };
            };}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          if ($truthy(out_pc)) {
            pc_out = "" + (tag) + ": " + (out_pc)};};
      } else if ($truthy($gvars.point_counter['$[]']("$nick,"))) {
        
        tag_arr = $gvars.point_counter['$[]']("$nick,");
        tag_out = "";
        $send(tag_arr, 'each', [], ($$15 = function(tag_o){var self = $$15.$$s || this, check_name = nil;
          if ($gvars.point_counter == null) $gvars.point_counter = nil;

        
          
          if (tag_o == null) {
            tag_o = nil;
          };
          check_name = "" + (nick) + ",," + (tag_o);
          if ($truthy($gvars.point_counter['$[]']("" + (check_name) + ",0"))) {
            tag_out = $rb_plus(tag_out, $rb_plus($rb_plus("" + (tag_o) + "(", $gvars.point_counter['$[]']("" + (check_name) + ",0")), ") "))};
          if ($truthy($gvars.point_counter['$[]']("" + (check_name) + ",1"))) {
            return (tag_out = $rb_plus(tag_out, $rb_plus($rb_plus("" + (tag_o) + "[", $gvars.point_counter['$[]']("" + (check_name) + ",1")), "] ")))
          } else {
            return nil
          };}, $$15.$$s = self, $$15.$$arity = 1, $$15));
        if ($truthy(tag_out)) {
          
          self.$debug("中身があるなら");
          if ($truthy(pc_out)) {
            pc_out = $rb_plus(pc_out, ", ")};
          pc_out = $rb_plus(pc_out, tag_out.$to_s());};};
      return pc_out;
    }, $CountHolder_getPointListAtSameNick$11.$$arity = 5);
    
    Opal.def(self, '$getPointListAtSameChannel', $CountHolder_getPointListAtSameChannel$16 = function $$getPointListAtSameChannel(tagName) {
      var $$17, self = this, output = nil, characterInfoList = nil;

      
      self.$debug("getPointListAtSameChannel(command, nick, channel, pointerMode, tagName)", self.command, self.nick, self.channel, self.pointerMode, tagName);
      self.$debug("同一チャンネル特定タグ(ポイント)の表示");
      output = "";
      if ($truthy(tagName['$empty?']())) {
      } else {
        output = $rb_plus(output, "" + (tagName) + ":")
      };
      self.$debug("getPointListAtSameChannel @countInfos", self.countInfos);
      characterInfoList = self.$getCharacterInfoList();
      $send(characterInfoList.$keys().$sort(), 'each', [], ($$17 = function(characterName){var self = $$17.$$s || this, $$18, characterInfo = nil, tagText = nil;

      
        
        if (characterName == null) {
          characterName = nil;
        };
        characterInfo = characterInfoList['$[]'](characterName);
        tagText = "";
        $send(characterInfo.$keys().$sort(), 'each', [], ($$18 = function(currentTag){var self = $$18.$$s || this, info = nil, currentValue = nil, maxValue = nil;

        
          
          if (currentTag == null) {
            currentTag = nil;
          };
          if ($truthy(tagName['$empty?']())) {
          } else if (tagName['$=='](currentTag)) {
          } else {
            return nil;
          };
          info = characterInfo['$[]'](currentTag);
          currentValue = info['$[]']("currentValue");
          maxValue = info['$[]']("maxValue");
          tagText = $rb_plus(tagText, currentValue.$to_s());
          if ($truthy(maxValue['$nil?']())) {
            return nil
          } else {
            return (tagText = $rb_plus(tagText, "" + "/" + (maxValue)))
          };}, $$18.$$s = self, $$18.$$arity = 1, $$18));
        if ($truthy(tagText['$empty?']())) {
          return nil
        } else {
          
          if ($truthy(output['$empty?']())) {
          } else {
            output = $rb_plus(output, " ")
          };
          return (output = $rb_plus(output, "" + (characterName) + "(" + (tagText) + ")"));
        };}, $$17.$$s = self, $$17.$$arity = 1, $$17));
      return output;
    }, $CountHolder_getPointListAtSameChannel$16.$$arity = 1);
    
    Opal.def(self, '$rename_point_counter', $CountHolder_rename_point_counter$19 = function $$rename_point_counter() {
      var self = this, output = nil, oldName = nil, newName = nil, characterInfoList = nil, counterInfo = nil, $writer = nil;

      
      self.$debug("rename_point_counter @command, @nick", self.command, self.nick);
      output = "1";
      if ($truthy(/^#RENAME!\s*(.+?)\s*\-\>\s*(.+?)(\s|$)/['$=~'](self.command))) {
      } else {
        return output
      };
      oldName = $$($nesting, 'Regexp').$last_match(1);
      newName = $$($nesting, 'Regexp').$last_match(2);
      self.$debug("oldName, newName", oldName, newName);
      characterInfoList = self.$getCharacterInfoList(self.channel);
      counterInfo = characterInfoList.$delete(oldName);
      if ($truthy(counterInfo['$nil?']())) {
        return output};
      
      $writer = [newName, counterInfo];
      $send(characterInfoList, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      output = "" + (oldName) + "->" + (newName);
      return output;
    }, $CountHolder_rename_point_counter$19.$$arity = 0);
    
    Opal.def(self, '$setPointCounters', $CountHolder_setPointCounters$20 = function $$setPointCounters(nick, pc, target) {
      var self = this, key = nil;

      
      key = "" + (nick) + "," + (pc);
      self.$setPointCounter(key, pc);
      key = "" + (nick) + "," + (pc) + "," + (target);
      return self.$setPointCounter(key, target);
    }, $CountHolder_setPointCounters$20.$$arity = 3);
    
    Opal.def(self, '$setPointCounter', $CountHolder_setPointCounter$21 = function $$setPointCounter(key, data) {
      var self = this, $writer = nil, cnt_list = nil;
      if ($gvars.point_counter == null) $gvars.point_counter = nil;

      
      self.$debug("setPointCounter begin key, data", key, data);
      if ($truthy($gvars.point_counter['$include?'](key))) {
      } else {
        
        self.$debug("$point_counterにkeyが存在しないので新規作成");
        
        $writer = [key, data];
        $send($gvars.point_counter, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return nil;
      };
      self.$debug("$point_counterにkeyが存在する場合");
      cnt_list = $gvars.point_counter['$[]'](key);
      if ($truthy(cnt_list['$include?'](data))) {
        return nil
      } else {
        return cnt_list['$<<'](data)
      };
    }, $CountHolder_setPointCounter$21.$$arity = 2);
    
    Opal.def(self, '$sort_point_hash', $CountHolder_sort_point_hash$22 = function $$sort_point_hash(base_hash) {
      var $$23, self = this, keys = nil, pc_sorted = nil;

      
      keys = base_hash.$keys();
      pc_sorted = $send(keys, 'sort_by', [], ($$23 = function(a, b){var self = $$23.$$s || this, $a, $b, a_current = nil, a_max = nil, b_current = nil, b_max = nil, compare = nil;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        $b = self.$getPointHashCurrentAndMax(a), $a = Opal.to_ary($b), (a_current = ($a[0] == null ? nil : $a[0])), (a_max = ($a[1] == null ? nil : $a[1])), $b;
        $b = self.$getPointHashCurrentAndMax(b), $a = Opal.to_ary($b), (b_current = ($a[0] == null ? nil : $a[0])), (b_max = ($a[1] == null ? nil : $a[1])), $b;
        compare = self.$b_crr()['$<=>'](self.$a_crr());
        if (compare['$=='](0)) {
          
          compare = a_max['$<=>'](b_max);
          if (compare['$=='](0)) {
            compare = a['$<=>'](b)};};
        return compare;}, $$23.$$s = self, $$23.$$arity = 2, $$23));
      return pc_sorted;
    }, $CountHolder_sort_point_hash$22.$$arity = 1);
    return (Opal.def(self, '$getPointHashCurrentAndMax', $CountHolder_getPointHashCurrentAndMax$24 = function $$getPointHashCurrentAndMax(key) {
      var self = this, current = nil, max = nil;

      
      if ($truthy(/(\d+)[\/](\d+)/['$=~'](key))) {
        
        current = $$($nesting, 'Regexp').$last_match(1);
        max = $$($nesting, 'Regexp').$last_match(2);
        return [current, max];};
      return [0, 0];
    }, $CountHolder_getPointHashCurrentAndMax$24.$$arity = 1), nil) && 'getPointHashCurrentAndMax';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return left.$div(right)}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["CardTrader"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$freeze', '$attr_accessor', '$attr_reader', '$initValues', '$set1Deck1Joker', '$card_place=', '$-', '$clone', '$readExtraCard', '$sendMessageToOnlySender', '$to_s', '$sendMessage', '$sendMessageToChannels', '$nil?', '$empty?', '$debug', '$readlines', '$each', '$=~', '$to_i', '$last_match', '$push', '$[]=', '$raise', '$===', '$shuffleCards', '$drawCardByCommandText', '$drawCardOpen', '$getHandAndPlaceCardInfoText', '$+', '$playCardByCommandText', '$returnCards', '$clearAllPlaceAllPlayerCards', '$reviewCards', '$getAllCardLocation', '$transferCardsByCommandText', '$pickupCardCommandText', '$backCardCommandText', '$dealCard', '$lookAndDealCard', '$discardCardCommandText', '$sendCardToTargetNickPlaceCommandText', '$tapCardCommandText', '$printCardRestorationSpellResult', '$printMilStoneResult', '$drawCard', '$!', '$getCardsTextFromCards', '$length', '$[]', '$upcase', '$<=', '$times', '$ejectOneCardRandomFromCards', '$<<', '$pickupCard', '$>', '$!=', '$getCardsText', '$pickupCardByCardName', '$join', '$split', '$pickupCardByCards', '$pickupOneCard', '$==', '$delete_if', '$backCard', '$backCardByCommandSetAndPlace', '$backOneCard', '$getBurriedCard', '$transferOneCard', '$sendDealResult', '$discardCards', '$playCard', '$playCardByCardsBlockTextAndPlaceNo', '$playCardByCardsTextAndPlaceNo', '$playCardByCardAndPlaceNo', '$playOneCard', '$discardOneCard', '$discardCardsByCommandSetAndPlaceAndDestination', '$discardCardsByCardsAndPlace', '$getDestinationWhenPlaceIsNotHand', '$getCardsFromDealCards', '$reject!', '$transferCards', '$<', '$transferCardsByCommand', '$transferCardsByCards', '$transferTargetCard', '$transferTargetCardToNewMember', '$roll', '$delete_at', '$getSendCardToTargetNickPlace', '$printRegistCardResult', '$okCards', '$getSendCardToTargetNickPlaceByCardSetAndDestination', '$getSendCardToTargetNickPlaceByCards', '$tapCard', '$tapCardByCardsTextAndPlace', '$tapOneCardByCardAndPlace', '$*', '$getCardMilstone', '$clearAllPlayerCardsWhenPlayedPlace', '$clearAllPlayerCards', '$clear', '$shift', '$getCardLocationOnPlace', '$getCardLocationOnNumberdPlace', '$isTapCardPlace', '$getHandCardInfoText', '$getPlaceCardInfoText', '$getDealCardsText', '$compareCardByCardNumber', '$<=>', '$sort', '$compareCard', '$even?', '$throwCardRestorationSpell', '$getNewSpellText', '$setNewSpellText', '$keys', '$getSpellWords', '$getDealCardIndex', '$getIndexWord', '$shrinkSpellWords', '$each_with_index', '$include?', '$gsub', '$pop', '$expandSpellWords', '$getCardsFromIndexWordAndSpellText']);
  
  self.$require("configBcDice.rb");
  $gvars.ircNickRegExp = "[A-Za-z\\d\\-\\[\\]\\'^{}_]+";
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CardTrader');

    var $nesting = [self].concat($parent_nesting), $CardTrader_initialize$1, $CardTrader_initValues$2, $CardTrader_set1Deck1Joker$3, $CardTrader_set1Deck2Jokers$4, $CardTrader_set2Decks2Jokers$5, $CardTrader_setBcDice$6, $CardTrader_setNick$7, $CardTrader_setTnick$8, $CardTrader_readCardSet$9, $CardTrader_sendMessage$10, $CardTrader_sendMessageToOnlySender$11, $CardTrader_sendMessageToChannels$12, $CardTrader_readExtraCard$13, $CardTrader_executeCard$15, $CardTrader_shuffleCards$16, $CardTrader_drawCardByCommandText$17, $CardTrader_drawCardOpen$18, $CardTrader_drawCard$19, $CardTrader_pickupCardCommandText$21, $CardTrader_pickupCard$22, $CardTrader_pickupCardByCardName$23, $CardTrader_pickupCardByCards$24, $CardTrader_pickupOneCard$26, $CardTrader_backCardCommandText$28, $CardTrader_backCard$29, $CardTrader_backCardByCommandSetAndPlace$30, $CardTrader_backOneCard$32, $CardTrader_dealCard$34, $CardTrader_sendDealResult$35, $CardTrader_lookAndDealCard$36, $CardTrader_discardCardCommandText$37, $CardTrader_playCardByCommandText$38, $CardTrader_playCard$39, $CardTrader_playCardByCardsBlockTextAndPlaceNo$40, $CardTrader_playCardByCardsTextAndPlaceNo$41, $CardTrader_playCardByCardAndPlaceNo$43, $CardTrader_playOneCard$44, $CardTrader_discardCards$45, $CardTrader_discardCardsByCommandSetAndPlaceAndDestination$46, $CardTrader_discardCardsByCardsAndPlace$47, $CardTrader_discardOneCard$49, $CardTrader_getDestinationWhenPlaceIsNotHand$51, $CardTrader_getCardsFromDealCards$52, $CardTrader_transferCardsByCommandText$53, $CardTrader_transferCards$54, $CardTrader_transferCardsByCommand$55, $CardTrader_transferCardsByCards$56, $CardTrader_transferOneCard$58, $CardTrader_ejectOneCardRandomFromCards$59, $CardTrader_transferTargetCard$60, $CardTrader_transferTargetCardToNewMember$62, $CardTrader_sendCardToTargetNickPlaceCommandText$63, $CardTrader_getSendCardToTargetNickPlace$64, $CardTrader_getSendCardToTargetNickPlaceByCardSetAndDestination$65, $CardTrader_getSendCardToTargetNickPlaceByCards$66, $CardTrader_printRegistCardResult$68, $CardTrader_tapCardCommandText$69, $CardTrader_tapCard$70, $CardTrader_tapCardByCardsTextAndPlace$71, $CardTrader_tapOneCardByCardAndPlace$73, $CardTrader_printMilStoneResult$74, $CardTrader_getCardMilstone$75, $CardTrader_clearAllPlaceAllPlayerCards$76, $CardTrader_clearAllPlayerCardsWhenPlayedPlace$78, $CardTrader_clearAllPlayerCards$79, $CardTrader_returnCards$80, $CardTrader_getBurriedCard$81, $CardTrader_reviewCards$82, $CardTrader_getAllCardLocation$83, $CardTrader_getCardLocationOnPlace$85, $CardTrader_getCardLocationOnNumberdPlace$86, $CardTrader_getHandAndPlaceCardInfoText$87, $CardTrader_getHandCardInfoText$88, $CardTrader_getDealCardsText$89, $CardTrader_compareCard$90, $CardTrader_compareCardByCardNumber$91, $CardTrader_getPlaceCardInfoText$92, $CardTrader_getCardsText$94, $CardTrader_getCardsTextFromCards$95, $CardTrader_isTapCardPlace$98, $CardTrader_printCardRestorationSpellResult$99, $CardTrader_throwCardRestorationSpell$100, $CardTrader_getNewSpellText$101, $CardTrader_getSpellWords$102, $CardTrader_getIndexWord$104, $CardTrader_getDealCardIndex$105, $CardTrader_shrinkSpellWords$107, $CardTrader_setNewSpellText$110, $CardTrader_expandSpellWords$112, $CardTrader_getCardsFromIndexWordAndSpellText$115;

    self.$$prototype.card_val = self.$$prototype.tnick = self.$$prototype.bcdice = self.$$prototype.channel = self.$$prototype.nick_e = self.$$prototype.cardRegExp = self.$$prototype.card_channels = self.$$prototype.cardRest = self.$$prototype.deal_cards = self.$$prototype.card_place = self.$$prototype.cardTitles = self.$$prototype.canTapCard = self.$$prototype.card_spell = nil;
    
    Opal.const_set($nesting[0], 'OK_RESULT', "_OK_".$freeze());
    Opal.const_set($nesting[0], 'NG_RESULT', "_NG_".$freeze());
    self.$attr_accessor("card_place");
    self.$attr_accessor("canTapCard");
    self.$attr_reader("numOfDecks");
    self.$attr_reader("numOfJokers");
    
    Opal.def(self, '$initialize', $CardTrader_initialize$1 = function $$initialize() {
      var self = this;

      
      self.$initValues();
      self.card_channels = $hash2([], {});
      return (self.card_spell = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]);
    }, $CardTrader_initialize$1.$$arity = 0);
    
    Opal.def(self, '$initValues', $CardTrader_initValues$2 = function $$initValues() {
      var self = this, $writer = nil;

      
      self.cardTitles = $hash2([], {});
      self.cardRegExp = "[DHSCJdhscj][\\d]+";
      self.deal_cards = $hash2(["card_played"], {"card_played": []});
      self.$set1Deck1Joker();
      
      $writer = [1];
      $send(self, 'card_place=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return (self.canTapCard = true);
    }, $CardTrader_initValues$2.$$arity = 0);
    
    Opal.def(self, '$set1Deck1Joker', $CardTrader_set1Deck1Joker$3 = function $$set1Deck1Joker() {
      var self = this;

      
      self.card_val = ["S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10", "S11", "S12", "S13", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", "H12", "H13", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "C13", "J1"];
      self.cardRest = self.card_val.$clone();
      self.numOfDecks = 1;
      self.numOfJokers = 1;
      return self;
    }, $CardTrader_set1Deck1Joker$3.$$arity = 0);
    
    Opal.def(self, '$set1Deck2Jokers', $CardTrader_set1Deck2Jokers$4 = function $$set1Deck2Jokers() {
      var self = this;

      
      self.card_val = ["S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10", "S11", "S12", "S13", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", "H12", "H13", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "C13", "J1", "J0"];
      self.cardRest = self.card_val.$clone();
      self.numOfDecks = 1;
      self.numOfJokers = 2;
      return self;
    }, $CardTrader_set1Deck2Jokers$4.$$arity = 0);
    
    Opal.def(self, '$set2Decks2Jokers', $CardTrader_set2Decks2Jokers$5 = function $$set2Decks2Jokers() {
      var self = this;

      
      self.card_val = ["S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10", "S11", "S12", "S13", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s11", "s12", "s13", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", "H12", "H13", "h1", "h2", "h3", "h4", "h5", "h6", "h7", "h8", "h9", "h10", "h11", "h12", "h13", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "d10", "d11", "d12", "d13", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "C13", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10", "c11", "c12", "c13", "J1", "J2", "J3", "J4"];
      self.cardRest = self.card_val.$clone();
      self.numOfDecks = 2;
      self.numOfJokers = 2;
      return self;
    }, $CardTrader_set2Decks2Jokers$5.$$arity = 0);
    
    Opal.def(self, '$setBcDice', $CardTrader_setBcDice$6 = function $$setBcDice(bcDice) {
      var self = this;

      return (self.bcdice = bcDice)
    }, $CardTrader_setBcDice$6.$$arity = 1);
    
    Opal.def(self, '$setNick', $CardTrader_setNick$7 = function $$setNick(nick_e) {
      var self = this;

      return (self.nick_e = nick_e)
    }, $CardTrader_setNick$7.$$arity = 1);
    
    Opal.def(self, '$setTnick', $CardTrader_setTnick$8 = function $$setTnick(t) {
      var self = this;

      return (self.tnick = t)
    }, $CardTrader_setTnick$8.$$arity = 1);
    
    Opal.def(self, '$readCardSet', $CardTrader_readCardSet$9 = function $$readCardSet() {
      var self = this, e = nil;

      try {
        
        self.$readExtraCard(self.tnick);
        return self.$sendMessageToOnlySender("カードセットの読み込み成功しました");
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            return self.$sendMessageToOnlySender(e.$to_s())
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $CardTrader_readCardSet$9.$$arity = 0);
    
    Opal.def(self, '$sendMessage', $CardTrader_sendMessage$10 = function $$sendMessage(to, message) {
      var self = this;

      return self.bcdice.$sendMessage(to, message)
    }, $CardTrader_sendMessage$10.$$arity = 2);
    
    Opal.def(self, '$sendMessageToOnlySender', $CardTrader_sendMessageToOnlySender$11 = function $$sendMessageToOnlySender(message) {
      var self = this;

      return self.bcdice.$sendMessageToOnlySender(message)
    }, $CardTrader_sendMessageToOnlySender$11.$$arity = 1);
    
    Opal.def(self, '$sendMessageToChannels', $CardTrader_sendMessageToChannels$12 = function $$sendMessageToChannels(message) {
      var self = this;

      return self.bcdice.$sendMessageToChannels(message)
    }, $CardTrader_sendMessageToChannels$12.$$arity = 1);
    
    Opal.def(self, '$readExtraCard', $CardTrader_readExtraCard$13 = function $$readExtraCard(cardFileName) {
      var $$14, self = this, lines = nil, e = nil;

      
      if ($truthy(cardFileName['$nil?']())) {
        return nil};
      if ($truthy(cardFileName['$empty?']())) {
        return nil};
      self.$debug("" + "Loading Cardset『" + (cardFileName) + "』...\n");
      self.card_val = [];
      
      try {
        
        lines = $$($nesting, 'File').$readlines(cardFileName);
        $send(lines, 'each', [], ($$14 = function(line){var self = $$14.$$s || this, cardNumber = nil, cardTitle = nil, $writer = nil;
          if (self.card_val == null) self.card_val = nil;
          if (self.cardTitles == null) self.cardTitles = nil;

        
          
          if (line == null) {
            line = nil;
          };
          if ($truthy(/^(\d+)->(.+)$/['$=~'](line))) {
          } else {
            return nil;
          };
          cardNumber = $$($nesting, 'Regexp').$last_match(1).$to_i();
          cardTitle = $$($nesting, 'Regexp').$last_match(2);
          self.card_val.$push(cardNumber);
          
          $writer = [cardNumber, cardTitle];
          $send(self.cardTitles, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$14.$$s = self, $$14.$$arity = 1, $$14));
        self.cardRegExp = "[\\d]+";
        self.cardRest = self.card_val.$clone();
        self.deal_cards = $hash2(["card_played"], {"card_played": []});
        return self.$debug("Load Finished...\n");
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            return self.$raise("" + "カードデータを開けません :『" + (cardFileName) + "』" + (e))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
    }, $CardTrader_readExtraCard$13.$$arity = 1);
    
    Opal.def(self, '$executeCard', $CardTrader_executeCard$15 = function $$executeCard(arg, channel) {
      var $a, $b, self = this, count = nil, $case = nil, output_msg = nil, value = nil, name = nil, messageText = nil, out_msg = nil, place_msg = nil, sendTo = nil, targetNick = nil, spellText = nil, commandText = nil;
      if ($gvars.ircNickRegExp == null) $gvars.ircNickRegExp = nil;

      
      self.channel = channel;
      self.$debug("executeCard arg", arg);
      if ($truthy(/(c-)/['$=~'](arg))) {
      } else {
        return nil
      };
      count = 0;
      return (function() {$case = arg;
      if (/(c-shuffle|c-sh)($|\s)/['$===']($case)) {
      output_msg = self.$shuffleCards();
      return self.$sendMessage(self.channel, output_msg);}
      else if (/c-draw(\[[\d]+\])?($|\s)/['$===']($case)) {return self.$drawCardByCommandText(arg)}
      else if (/(c-odraw|c-opend)(\[[\d]+\])?($|\s)/['$===']($case)) {
      value = $$($nesting, 'Regexp').$last_match(2);
      return self.$drawCardOpen(value);}
      else if (/c-hand($|\s)/['$===']($case)) {return self.$sendMessageToOnlySender(self.$getHandAndPlaceCardInfoText(arg, self.nick_e))}
      else if (new RegExp("" + "c-vhand\\s*(" + ($gvars.ircNickRegExp) + ")($|\\s)")['$===']($case)) {
      name = $$($nesting, 'Regexp').$last_match(1);
      self.$debug("c-vhand name", name);
      messageText = $rb_plus($rb_plus("" + (name) + " の手札は", self.$getHandAndPlaceCardInfoText("c-hand", name)), "です");
      return self.$sendMessageToOnlySender(messageText);}
      else if (new RegExp("" + "c-play(\\d*)\\[" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*\\]($|\\s)")['$===']($case)) {return self.$playCardByCommandText(arg)}
      else if (/(c-rshuffle|c-rsh)($|\s)/['$===']($case)) {
      output_msg = self.$returnCards();
      return self.$sendMessage(self.channel, output_msg);}
      else if (/c-clean($|\s)/['$===']($case)) {
      output_msg = self.$clearAllPlaceAllPlayerCards();
      return self.$sendMessage(self.channel, output_msg);}
      else if (/c-review($|\s)/['$===']($case)) {
      output_msg = self.$reviewCards();
      return self.$sendMessageToOnlySender(output_msg);}
      else if (/c-check($|\s)/['$===']($case)) {
      $b = self.$getAllCardLocation(), $a = Opal.to_ary($b), (out_msg = ($a[0] == null ? nil : $a[0])), (place_msg = ($a[1] == null ? nil : $a[1])), $b;
      self.$sendMessage(self.channel, out_msg);
      return self.$sendMessage(self.channel, place_msg);}
      else if (new RegExp("" + "c-pass(\\d)*(\\[" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*\\])?\\s*(" + ($gvars.ircNickRegExp) + ")($|\\s)")['$===']($case)) {
      sendTo = $$($nesting, 'Regexp').$last_match(4);
      return self.$transferCardsByCommandText(arg, sendTo);}
      else if (new RegExp("" + "c-pick\\[" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*\\]($|\\s)")['$===']($case)) {return self.$pickupCardCommandText(arg)}
      else if (new RegExp("" + "c-back(\\d)*\\[" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*\\]($|\\s)")['$===']($case)) {return self.$backCardCommandText(arg)}
      else if (new RegExp("" + "c-deal(\\[[\\d]+\\]|\\s)\\s*(" + ($gvars.ircNickRegExp) + ")($|\\s)")['$===']($case)) {
      count = $$($nesting, 'Regexp').$last_match(1);
      targetNick = $$($nesting, 'Regexp').$last_match(2);
      return self.$dealCard(count, targetNick);}
      else if (new RegExp("" + "c-vdeal(\\[[\\d]+\\]|\\s)\\s*(" + ($gvars.ircNickRegExp) + ")($|\\s)")['$===']($case)) {
      count = $$($nesting, 'Regexp').$last_match(1);
      targetNick = $$($nesting, 'Regexp').$last_match(2);
      return self.$lookAndDealCard(count, targetNick);}
      else if (new RegExp("" + "c-(dis|discard)(\\d)*\\[" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*\\]($|\\s)")['$===']($case)) {return self.$discardCardCommandText(arg)}
      else if (new RegExp("" + "c-place(\\d)*(\\[" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*\\])?\\s*(" + ($gvars.ircNickRegExp) + ")($|\\s)")['$===']($case)) {
      targetNick = $$($nesting, 'Regexp').$last_match(4);
      return self.$sendCardToTargetNickPlaceCommandText(arg, targetNick);}
      else if (new RegExp("" + "c-(un)?tap(\\d+)\\[" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*\\]($|\\s)")['$===']($case)) {return self.$tapCardCommandText(arg)}
      else if (new RegExp("" + "c-spell(\\[(" + ($gvars.ircNickRegExp) + "[^\\]]+?)\\])?($|\\s)")['$===']($case)) {
      spellText = $$($nesting, 'Regexp').$last_match(2);
      return self.$printCardRestorationSpellResult(spellText);}
      else if (/(c-mil(stone)?(\[[\d]+\])?)($|\s)/['$===']($case)) {
      commandText = $$($nesting, 'Regexp').$last_match(1);
      return self.$printMilStoneResult(commandText);}
      else { return nil }})();
    }, $CardTrader_executeCard$15.$$arity = 2);
    
    Opal.def(self, '$shuffleCards', $CardTrader_shuffleCards$16 = function $$shuffleCards() {
      var self = this;

      
      self.cardRest = self.card_val.$clone();
      self.deal_cards = $hash2(["card_played"], {"card_played": []});
      return "シャッフルしました";
    }, $CardTrader_shuffleCards$16.$$arity = 0);
    
    Opal.def(self, '$drawCardByCommandText', $CardTrader_drawCardByCommandText$17 = function $$drawCardByCommandText(arg) {
      var $a, self = this, cards = nil, $writer = nil;

      
      self.$debug("drawCardByCommandText arg", arg);
      cards = self.$drawCard(arg);
      self.$debug("drawCardByCommandText cards", cards);
      if ($truthy(cards['$empty?']()['$!']())) {
        
        self.$sendMessageToOnlySender(self.$getCardsTextFromCards(cards));
        self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (cards.$length()) + "枚引きました");
      } else {
        self.$sendMessage(self.channel, "カードが残っていません")
      };
      return ($truthy($a = self.card_channels['$[]'](self.nick_e)) ? $a : (($writer = [self.nick_e, self.channel]), $send(self.card_channels, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
    }, $CardTrader_drawCardByCommandText$17.$$arity = 1);
    
    Opal.def(self, '$drawCardOpen', $CardTrader_drawCardOpen$18 = function $$drawCardOpen(value) {
      var $a, self = this, cmd = nil, cards = nil, $writer = nil;

      
      cmd = "c-draw";
      if ($truthy(value['$nil?']())) {
      } else {
        cmd = $rb_plus(cmd, value)
      };
      cards = self.$drawCard(cmd);
      if ($truthy(cards['$empty?']()['$!']())) {
        self.$sendMessage(self.channel, $rb_plus($rb_plus("" + (self.nick_e) + ": ", self.$getCardsTextFromCards(cards)), "を引きました"))
      } else {
        self.$sendMessage(self.channel, "カードが残っていません")
      };
      return ($truthy($a = self.card_channels['$[]'](self.nick_e)) ? $a : (($writer = [self.nick_e, self.channel]), $send(self.card_channels, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
    }, $CardTrader_drawCardOpen$18.$$arity = 1);
    
    Opal.def(self, '$drawCard', $CardTrader_drawCard$19 = function $$drawCard(command, destination) {
      var $a, $$20, self = this, outputCards = nil, count = nil;

      
      
      if (destination == null) {
        destination = nil;
      };
      destination = ($truthy($a = destination) ? $a : self.nick_e);
      destination = destination.$upcase();
      self.$debug("drawCard command, destination", command, destination);
      outputCards = [];
      self.$debug("@cardRest.length", self.cardRest.$length());
      if ($truthy($rb_le(self.cardRest.$length(), 0))) {
        return outputCards};
      if ($truthy(/(c-draw(\[([\d]+)\])?)/['$=~'](command))) {
      } else {
        return outputCards
      };
      count = $$($nesting, 'Regexp').$last_match(3);
      count = ($truthy($a = count) ? $a : 1);
      count = count.$to_i();
      self.$debug("draw count", count);
      (function(){var $brk = Opal.new_brk(); try {return $send(count, 'times', [], ($$20 = function(_i){var self = $$20.$$s || this, $b, card = nil, $writer = nil;
        if (self.cardRest == null) self.cardRest = nil;
        if (self.deal_cards == null) self.deal_cards = nil;

      
        
        if (_i == null) {
          _i = nil;
        };
        if ($truthy($rb_le(self.cardRest.$length(), 0))) {
          
          Opal.brk(nil, $brk)};
        card = self.$ejectOneCardRandomFromCards(self.cardRest);
        if ($truthy(card['$nil?']())) {
          
          Opal.brk(nil, $brk)};
        ($truthy($b = self.deal_cards['$[]'](destination)) ? $b : (($writer = [destination, []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        self.deal_cards['$[]'](destination)['$<<'](card);
        return outputCards['$<<'](card);}, $$20.$$s = self, $$20.$$brk = $brk, $$20.$$arity = 1, $$20))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return outputCards;
    }, $CardTrader_drawCard$19.$$arity = -2);
    
    Opal.def(self, '$pickupCardCommandText', $CardTrader_pickupCardCommandText$21 = function $$pickupCardCommandText(string) {
      var $a, $b, self = this, count = nil, output_msg = nil;

      
      self.$debug("pickupCardCommandText string", string);
      $b = self.$pickupCard(string), $a = Opal.to_ary($b), (count = ($a[0] == null ? nil : $a[0])), (output_msg = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy($rb_gt(count, 0))) {
        self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (count) + "枚選んで引きました")};
      if ($truthy(output_msg['$!='](""))) {
        self.$sendMessage(self.channel, $rb_plus($rb_plus("[", self.$getCardsText(output_msg)), "]がありません"))};
      return self.$sendMessageToOnlySender(self.$getHandAndPlaceCardInfoText("Auto"));
    }, $CardTrader_pickupCardCommandText$21.$$arity = 1);
    
    Opal.def(self, '$pickupCard', $CardTrader_pickupCard$22 = function $$pickupCard(string) {
      var $a, $b, self = this, okCount = nil, ngCardList = nil, cardName = nil, ngCardText = nil;

      
      okCount = 0;
      ngCardList = [];
      if ($truthy(new RegExp("" + "(c-pick\\[((,)?" + (self.cardRegExp) + ")+\\])")['$=~'](string))) {
        
        cardName = $$($nesting, 'Regexp').$last_match(1);
        $b = self.$pickupCardByCardName(cardName), $a = Opal.to_ary($b), (okCount = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;};
      ngCardText = ngCardList.$join(",");
      return [okCount, ngCardText];
    }, $CardTrader_pickupCard$22.$$arity = 1);
    
    Opal.def(self, '$pickupCardByCardName', $CardTrader_pickupCardByCardName$23 = function $$pickupCardByCardName(cardName) {
      var $a, $b, self = this, okCount = nil, ngCardList = nil, cards = nil;

      
      okCount = 0;
      ngCardList = [];
      if ($truthy(new RegExp("" + "\\[(" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*)\\]")['$=~'](cardName))) {
        
        cards = $$($nesting, 'Regexp').$last_match(1).$split(/,/);
        $b = self.$pickupCardByCards(cards), $a = Opal.to_ary($b), (okCount = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;};
      return [okCount, ngCardList];
    }, $CardTrader_pickupCardByCardName$23.$$arity = 1);
    
    Opal.def(self, '$pickupCardByCards', $CardTrader_pickupCardByCards$24 = function $$pickupCardByCards(cards) {
      var $$25, self = this, okCount = nil, ngCardList = nil;

      
      okCount = 0;
      ngCardList = [];
      $send(cards, 'each', [], ($$25 = function(card){var self = $$25.$$s || this, string = nil;

      
        
        if (card == null) {
          card = nil;
        };
        string = self.$pickupOneCard(card);
        if (string['$==']($$($nesting, 'OK_RESULT'))) {
          return (okCount = $rb_plus(okCount, 1))
        } else {
          return ngCardList['$<<'](string)
        };}, $$25.$$s = self, $$25.$$arity = 1, $$25));
      return [okCount, ngCardList];
    }, $CardTrader_pickupCardByCards$24.$$arity = 1);
    
    Opal.def(self, '$pickupOneCard', $CardTrader_pickupOneCard$26 = function $$pickupOneCard(card) {
      var $$27, $a, self = this, targetCard = nil, destination = nil, isDelete = nil, $writer = nil;

      
      if ($truthy($rb_le(self.cardRest.$length(), 0))) {
        return "山札"};
      targetCard = card.$upcase();
      destination = self.nick_e.$upcase();
      isDelete = $send(self.cardRest, 'delete_if', [], ($$27 = function(c){var self = $$27.$$s || this;

      
        
        if (c == null) {
          c = nil;
        };
        return c['$=='](targetCard);}, $$27.$$s = self, $$27.$$arity = 1, $$27));
      if ($truthy(isDelete)) {
        
        ($truthy($a = self.deal_cards['$[]'](destination)) ? $a : (($writer = [destination, []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        self.deal_cards['$[]'](destination)['$<<'](targetCard);
        return $$($nesting, 'OK_RESULT');
      } else {
        return targetCard
      };
    }, $CardTrader_pickupOneCard$26.$$arity = 1);
    
    Opal.def(self, '$backCardCommandText', $CardTrader_backCardCommandText$28 = function $$backCardCommandText(command) {
      var $a, $b, self = this, count = nil, output_msg = nil;

      
      $b = self.$backCard(command), $a = Opal.to_ary($b), (count = ($a[0] == null ? nil : $a[0])), (output_msg = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy($rb_gt(count, 0))) {
        self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (count) + "枚戻しました")};
      if ($truthy(output_msg['$!='](""))) {
        return self.$sendMessage(self.channel, "" + "[" + (self.$getCardsText(output_msg)) + "]がありません")
      } else {
        return self.$sendMessageToOnlySender(self.$getHandAndPlaceCardInfoText("Auto"))
      };
    }, $CardTrader_backCardCommandText$28.$$arity = 1);
    
    Opal.def(self, '$backCard', $CardTrader_backCard$29 = function $$backCard(command) {
      var $a, $b, self = this, okCount = nil, ngCards = nil, commandset = nil, place = nil;

      
      okCount = 0;
      ngCards = [];
      if ($truthy(new RegExp("" + "(c-back(\\d*)\\[((,)?" + (self.cardRegExp) + ")+\\])")['$=~'](command))) {
        
        commandset = $$($nesting, 'Regexp').$last_match(1);
        place = $$($nesting, 'Regexp').$last_match(2).$to_i();
        $b = self.$backCardByCommandSetAndPlace(commandset, place), $a = Opal.to_ary($b), (okCount = ($a[0] == null ? nil : $a[0])), (ngCards = ($a[1] == null ? nil : $a[1])), $b;};
      return [okCount, ngCards.$join(",")];
    }, $CardTrader_backCard$29.$$arity = 1);
    
    Opal.def(self, '$backCardByCommandSetAndPlace', $CardTrader_backCardByCommandSetAndPlace$30 = function $$backCardByCommandSetAndPlace(commandset, place) {
      var $$31, self = this, okCount = nil, ngCards = nil, destination = nil, cards = nil;

      
      okCount = 0;
      ngCards = [];
      destination = self.nick_e.$upcase();
      if ($truthy(new RegExp("" + "\\[(" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*)\\]")['$=~'](commandset))) {
        
        cards = $$($nesting, 'Regexp').$last_match(1).$split(/,/);
        $send(cards, 'each', [], ($$31 = function(card){var self = $$31.$$s || this, string = nil;

        
          
          if (card == null) {
            card = nil;
          };
          string = self.$backOneCard(card, destination, place);
          if (string['$==']($$($nesting, 'OK_RESULT'))) {
            return (okCount = $rb_plus(okCount, 1))
          } else {
            return ngCards['$<<'](string)
          };}, $$31.$$s = self, $$31.$$arity = 1, $$31));};
      return [okCount, ngCards];
    }, $CardTrader_backCardByCommandSetAndPlace$30.$$arity = 2);
    
    Opal.def(self, '$backOneCard', $CardTrader_backOneCard$32 = function $$backOneCard(targetCard, destination, place) {
      var $a, $$33, self = this, string = nil, $writer = nil, cards = nil, isDelete = nil;

      
      if ($truthy($rb_le(self.$getBurriedCard(), 0))) {
        return "捨て札"};
      targetCard = targetCard.$upcase();
      if ($truthy($rb_gt(self.card_place, 0))) {
        
        string = self.$transferOneCard(targetCard, "" + (place) + (destination), destination);
        if (string['$==']($$($nesting, 'OK_RESULT'))) {
          return $$($nesting, 'OK_RESULT')};};
      ($truthy($a = self.deal_cards['$[]']("card_played")) ? $a : (($writer = ["card_played", []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      cards = self.deal_cards['$[]']("card_played");
      isDelete = $send(cards, 'delete_if', [], ($$33 = function(i){var self = $$33.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i['$=='](targetCard);}, $$33.$$s = self, $$33.$$arity = 1, $$33));
      if ($truthy(isDelete)) {
        
        self.deal_cards['$[]'](destination)['$<<'](targetCard);
        return $$($nesting, 'OK_RESULT');};
      return "${targetCard}";
    }, $CardTrader_backOneCard$32.$$arity = 3);
    
    Opal.def(self, '$dealCard', $CardTrader_dealCard$34 = function $$dealCard(count, targetNick, isLook) {
      var $a, self = this, cards = nil, $writer = nil;

      
      
      if (isLook == null) {
        isLook = false;
      };
      self.$debug("dealCard count, targetNick", count, targetNick);
      cards = self.$drawCard("" + "c-draw" + (count), targetNick);
      if ($truthy(cards['$empty?']()['$!']())) {
        self.$sendDealResult(targetNick, count, self.$getCardsTextFromCards(cards), isLook)
      } else {
        self.$sendMessage(self.channel, "カードが残っていません")
      };
      ($truthy($a = self.card_channels['$[]'](targetNick)) ? $a : (($writer = [targetNick, self.channel]), $send(self.card_channels, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return count;
    }, $CardTrader_dealCard$34.$$arity = -3);
    
    Opal.def(self, '$sendDealResult', $CardTrader_sendDealResult$35 = function $$sendDealResult(targetNick, count, output_msg, isLook) {
      var self = this;

      
      self.$sendMessage(targetNick, output_msg);
      if ($truthy(isLook)) {
        self.$sendMessage(self.nick_e, "" + (targetNick) + " に " + (output_msg) + " を配りました")};
      return self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (targetNick) + "に" + (count) + "枚配りました");
    }, $CardTrader_sendDealResult$35.$$arity = 4);
    
    Opal.def(self, '$lookAndDealCard', $CardTrader_lookAndDealCard$36 = function $$lookAndDealCard(count, targetNick) {
      var self = this, isLook = nil;

      
      isLook = true;
      return self.$dealCard(count, targetNick, isLook);
    }, $CardTrader_lookAndDealCard$36.$$arity = 2);
    
    Opal.def(self, '$discardCardCommandText', $CardTrader_discardCardCommandText$37 = function $$discardCardCommandText(commandText) {
      var $a, $b, self = this, count = nil, output_msg = nil, _card_ok = nil, cardText = nil;
      if ($gvars.card_ok == null) $gvars.card_ok = nil;

      
      $b = self.$discardCards(commandText), $a = Opal.to_ary($b), (count = ($a[0] == null ? nil : $a[0])), (output_msg = ($a[1] == null ? nil : $a[1])), (_card_ok = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy($rb_gt(count, 0))) {
        
        self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (count) + "枚捨てました");
        if ($truthy(self.cardTitles['$empty?']())) {
        } else {
          
          cardText = self.$getCardsText($gvars.card_ok);
          self.$sendMessage(self.channel, "" + "[" + (cardText) + "]");
        };};
      if ($truthy(output_msg['$!='](""))) {
        
        cardText = self.$getCardsText(output_msg);
        return self.$sendMessageToOnlySender("" + "[" + (cardText) + "]がありません");
      } else {
        return self.$sendMessageToOnlySender(self.$getHandAndPlaceCardInfoText("Auto"))
      };
    }, $CardTrader_discardCardCommandText$37.$$arity = 1);
    
    Opal.def(self, '$playCardByCommandText', $CardTrader_playCardByCommandText$38 = function $$playCardByCommandText(arg) {
      var $a, $b, self = this, count = nil, output_msg = nil, _card_ok = nil;
      if ($gvars.card_ok == null) $gvars.card_ok = nil;

      
      self.$debug("c-play pattern", arg);
      $b = self.$playCard(arg), $a = Opal.to_ary($b), (count = ($a[0] == null ? nil : $a[0])), (output_msg = ($a[1] == null ? nil : $a[1])), (_card_ok = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy($rb_gt(count, 0))) {
        
        self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (count) + "枚出しました");
        if ($truthy(self.cardTitles['$empty?']())) {
        } else {
          self.$sendMessage(self.channel, $rb_plus($rb_plus("[", self.$getCardsText($gvars.card_ok)), "]"))
        };};
      if ($truthy(output_msg['$!='](""))) {
        
        self.$debug("output_msg", output_msg);
        self.$sendMessage(self.channel, $rb_plus($rb_plus("[", self.$getCardsText(output_msg)), "]は持っていません"));};
      return self.$sendMessageToOnlySender(self.$getHandAndPlaceCardInfoText("Auto", self.nick_e));
    }, $CardTrader_playCardByCommandText$38.$$arity = 1);
    
    Opal.def(self, '$playCard', $CardTrader_playCard$39 = function $$playCard(cardPlayCommandText) {
      var $a, $b, self = this, okCardCount = nil, okCardList = nil, ngCardList = nil, cardsBlockText = nil, place = nil, okCardText = nil, ngCardText = nil;

      
      self.$debug("playCard cardPlayCommandText", cardPlayCommandText);
      okCardCount = 0;
      okCardList = [];
      ngCardList = [];
      if ($truthy(new RegExp("" + "(c-play(\\d*)\\[((,)?" + (self.cardRegExp) + ")+\\])")['$=~'](cardPlayCommandText))) {
        
        cardsBlockText = $$($nesting, 'Regexp').$last_match(1);
        place = $$($nesting, 'Regexp').$last_match(2).$to_i();
        self.$debug("cardsBlockText", cardsBlockText);
        self.$debug("place", place);
        $b = self.$playCardByCardsBlockTextAndPlaceNo(cardsBlockText, place), $a = Opal.to_ary($b), (okCardList = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;
        self.$debug("okCardList", okCardList);
        self.$debug("ngCardList", ngCardList);
        okCardCount = okCardList.$length();
        okCardText = okCardList.$join(",");
        ngCardText = ngCardList.$join(",");};
      return [okCardCount, ngCardText, okCardText];
    }, $CardTrader_playCard$39.$$arity = 1);
    
    Opal.def(self, '$playCardByCardsBlockTextAndPlaceNo', $CardTrader_playCardByCardsBlockTextAndPlaceNo$40 = function $$playCardByCardsBlockTextAndPlaceNo(cardsBlockText, place) {
      var $a, $b, self = this, okCardList = nil, ngCardList = nil, cardsText = nil;

      
      okCardList = [];
      ngCardList = [];
      if ($truthy(new RegExp("" + "\\[(" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*)\\]")['$=~'](cardsBlockText))) {
        
        cardsText = $$($nesting, 'Regexp').$last_match(1);
        $b = self.$playCardByCardsTextAndPlaceNo(cardsText, place), $a = Opal.to_ary($b), (okCardList = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;};
      return [okCardList, ngCardList];
    }, $CardTrader_playCardByCardsBlockTextAndPlaceNo$40.$$arity = 2);
    
    Opal.def(self, '$playCardByCardsTextAndPlaceNo', $CardTrader_playCardByCardsTextAndPlaceNo$41 = function $$playCardByCardsTextAndPlaceNo(cardsText, place) {
      var $$42, self = this, cards = nil, okCardList = nil, ngCardList = nil;

      
      cards = cardsText.$split(/,/);
      okCardList = [];
      ngCardList = [];
      $send(cards, 'each', [], ($$42 = function(card){var self = $$42.$$s || this, $a, $b, okList = nil, ngList = nil;

      
        
        if (card == null) {
          card = nil;
        };
        $b = self.$playCardByCardAndPlaceNo(card, place), $a = Opal.to_ary($b), (okList = ($a[0] == null ? nil : $a[0])), (ngList = ($a[1] == null ? nil : $a[1])), $b;
        okCardList = $rb_plus(okCardList, okList);
        return (ngCardList = $rb_plus(ngCardList, ngList));}, $$42.$$s = self, $$42.$$arity = 1, $$42));
      return [okCardList, ngCardList];
    }, $CardTrader_playCardByCardsTextAndPlaceNo$41.$$arity = 2);
    
    Opal.def(self, '$playCardByCardAndPlaceNo', $CardTrader_playCardByCardAndPlaceNo$43 = function $$playCardByCardAndPlaceNo(card, place) {
      var self = this, okList = nil, ngList = nil, result = nil;

      
      self.$debug("playCardByCardAndPlaceNo card, place", card, place);
      okList = [];
      ngList = [];
      result = self.$playOneCard(card, place);
      self.$debug("playOneCard result", result);
      if (result['$==']($$($nesting, 'OK_RESULT'))) {
        okList['$<<'](card)
      } else {
        ngList['$<<'](result)
      };
      return [okList, ngList];
    }, $CardTrader_playCardByCardAndPlaceNo$43.$$arity = 2);
    
    Opal.def(self, '$playOneCard', $CardTrader_playOneCard$44 = function $$playOneCard(card, place) {
      var self = this, destination = nil, result = nil;

      
      self.$debug("playOneCard card, place", card, place);
      destination = self.nick_e.$upcase();
      result = "";
      if ($truthy($rb_gt(place, 0))) {
        
        self.$debug("playOneCard place > 0");
        result = self.$transferOneCard(card, destination, "" + (place) + (destination));
      } else {
        
        self.$debug("playOneCard place <= 0");
        result = self.$discardOneCard(card, place, destination);
      };
      if (result['$==']($$($nesting, 'OK_RESULT'))) {
        return result
      } else {
        return card
      };
    }, $CardTrader_playOneCard$44.$$arity = 2);
    
    Opal.def(self, '$discardCards', $CardTrader_discardCards$45 = function $$discardCards(command, destination) {
      var $a, $b, self = this, okList = nil, ngList = nil, commandSet = nil, place = nil, ngText = nil, okText = nil;

      
      
      if (destination == null) {
        destination = nil;
      };
      self.$debug("discardCards command, destination", command, destination);
      if ($truthy(destination['$nil?']())) {
        destination = self.nick_e};
      destination = destination.$upcase();
      okList = [];
      ngList = [];
      if ($truthy(new RegExp("" + "(c-(dis|discard)(\\d*)\\[((,)?" + (self.cardRegExp) + ")+\\])")['$=~'](command))) {
        
        self.$debug("discardCards reg OK");
        commandSet = $$($nesting, 'Regexp').$last_match(1);
        place = $$($nesting, 'Regexp').$last_match(3).$to_i();
        $b = self.$discardCardsByCommandSetAndPlaceAndDestination(commandSet, place, destination), $a = Opal.to_ary($b), (okList = ($a[0] == null ? nil : $a[0])), (ngList = ($a[1] == null ? nil : $a[1])), $b;};
      ngText = ngList.$join(",");
      okText = okList.$join(",");
      return [okList.$length(), ngText, okText];
    }, $CardTrader_discardCards$45.$$arity = -2);
    
    Opal.def(self, '$discardCardsByCommandSetAndPlaceAndDestination', $CardTrader_discardCardsByCommandSetAndPlaceAndDestination$46 = function $$discardCardsByCommandSetAndPlaceAndDestination(commandSet, place, destination) {
      var $a, $b, self = this, okList = nil, ngList = nil, cards = nil;

      
      okList = [];
      ngList = [];
      if ($truthy(new RegExp("" + "\\[(" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*)\\]")['$=~'](commandSet))) {
        
        cards = $$($nesting, 'Regexp').$last_match(1).$split(/,/);
        $b = self.$discardCardsByCardsAndPlace(cards, place, destination), $a = Opal.to_ary($b), (okList = ($a[0] == null ? nil : $a[0])), (ngList = ($a[1] == null ? nil : $a[1])), $b;};
      return [okList, ngList];
    }, $CardTrader_discardCardsByCommandSetAndPlaceAndDestination$46.$$arity = 3);
    
    Opal.def(self, '$discardCardsByCardsAndPlace', $CardTrader_discardCardsByCardsAndPlace$47 = function $$discardCardsByCardsAndPlace(cards, place, destination) {
      var $$48, self = this, okList = nil, ngList = nil;

      
      okList = [];
      ngList = [];
      $send(cards, 'each', [], ($$48 = function(card){var self = $$48.$$s || this, result = nil;

      
        
        if (card == null) {
          card = nil;
        };
        result = self.$discardOneCard(card, place, destination);
        if (result['$==']($$($nesting, 'OK_RESULT'))) {
          return okList['$<<'](card)
        } else {
          return ngList['$<<'](result)
        };}, $$48.$$s = self, $$48.$$arity = 1, $$48));
      return [okList, ngList];
    }, $CardTrader_discardCardsByCardsAndPlace$47.$$arity = 3);
    
    Opal.def(self, '$discardOneCard', $CardTrader_discardOneCard$49 = function $$discardOneCard(card, place, destination) {
      var $$50, $a, self = this, this_cards = nil, rest_cards = nil, temp_cards = nil, result = nil, isTargetCardInHand = nil, $writer = nil;

      
      card = card.$upcase();
      destination = destination.$upcase();
      destination = self.$getDestinationWhenPlaceIsNotHand(place, destination);
      this_cards = [];
      rest_cards = [];
      temp_cards = self.$getCardsFromDealCards(destination);
      result = $send(temp_cards, 'reject!', [], ($$50 = function(i){var self = $$50.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i['$=='](card);}, $$50.$$s = self, $$50.$$arity = 1, $$50));
      isTargetCardInHand = result['$nil?']()['$!']();
      if ($truthy(isTargetCardInHand)) {
        this_cards['$<<'](card)
      } else {
        rest_cards['$<<'](card)
      };
      self.$debug("isTargetCardInHand", isTargetCardInHand);
      if ($truthy(isTargetCardInHand)) {
        
        self.$debug("isTargetCardInHand OK, so set card info");
        ($truthy($a = self.deal_cards['$[]'](destination)) ? $a : (($writer = [destination, []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        
        $writer = [destination, $rb_plus(self.deal_cards['$[]'](destination), rest_cards)];
        $send(self.deal_cards, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        ($truthy($a = self.deal_cards['$[]']("card_played")) ? $a : (($writer = ["card_played", []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        
        $writer = ["card_played", $rb_plus(self.deal_cards['$[]']("card_played"), this_cards)];
        $send(self.deal_cards, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.$debug("@deal_cards", self.deal_cards);
        return $$($nesting, 'OK_RESULT');
      } else {
        return card
      };
    }, $CardTrader_discardOneCard$49.$$arity = 3);
    
    Opal.def(self, '$getDestinationWhenPlaceIsNotHand', $CardTrader_getDestinationWhenPlaceIsNotHand$51 = function $$getDestinationWhenPlaceIsNotHand(place, destination) {
      var self = this;

      
      if ($truthy($rb_gt(place, 0))) {
        
        destination = "" + (place) + (destination);
        return destination;};
      return destination;
    }, $CardTrader_getDestinationWhenPlaceIsNotHand$51.$$arity = 2);
    
    Opal.def(self, '$getCardsFromDealCards', $CardTrader_getCardsFromDealCards$52 = function $$getCardsFromDealCards(destination) {
      var self = this, cards = nil;

      
      self.$debug("getCardsFromDealCards destination", destination);
      self.$debug("@deal_cards", self.deal_cards);
      self.$debug("@deal_cards[destination]", self.deal_cards['$[]'](destination));
      if ($truthy(self.deal_cards['$[]'](destination)['$nil?']())) {
        
        self.$debug("getCardsFromDealCards empty");
        return [];};
      cards = self.deal_cards['$[]'](destination);
      self.$debug("getCardsFromDealCards cards", cards);
      return cards;
    }, $CardTrader_getCardsFromDealCards$52.$$arity = 1);
    
    Opal.def(self, '$transferCardsByCommandText', $CardTrader_transferCardsByCommandText$53 = function $$transferCardsByCommandText(commandText, sendTo) {
      var $a, $b, self = this, count = nil, output_msg = nil;

      
      self.$debug("transferCardsByCommandText commandText, sendTo", commandText, sendTo);
      $b = self.$transferCards(commandText), $a = Opal.to_ary($b), (count = ($a[0] == null ? nil : $a[0])), (output_msg = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy($rb_lt(count, 0))) {
        self.$sendMessage(self.channel, "" + (self.nick_e) + ": 相手が登録されていません")
      } else {
        
        if ($truthy(output_msg['$!='](""))) {
          self.$sendMessage(self.channel, $rb_plus($rb_plus("[", self.$getCardsText(output_msg)), "]がありません"))};
        if ($truthy($rb_gt(count, 0))) {
          
          self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (count) + "枚渡しました");
          self.$debug("transferCardsByCommandText sendTo", sendTo);
          self.$sendMessage(sendTo, self.$getHandAndPlaceCardInfoText("Auto", sendTo));};
      };
      return self.$sendMessageToOnlySender(self.$getHandAndPlaceCardInfoText("Auto"));
    }, $CardTrader_transferCardsByCommandText$53.$$arity = 2);
    
    Opal.def(self, '$transferCards', $CardTrader_transferCards$54 = function $$transferCards(command) {
      var $a, $b, self = this, okCount = nil, ngCardList = nil, destination = nil, commandset = nil, place = nil, ngCardText = nil;
      if ($gvars.ircNickRegExp == null) $gvars.ircNickRegExp = nil;

      
      self.$debug("transferCards command", command);
      okCount = 0;
      ngCardList = [];
      if ($truthy(new RegExp("" + "(c-pass(\\d*)(\\[(((,)?" + (self.cardRegExp) + ")*)\\])?)\\s*(" + ($gvars.ircNickRegExp) + ")")['$=~'](command))) {
        
        destination = $$($nesting, 'Regexp').$last_match(7).$upcase();
        commandset = $$($nesting, 'Regexp').$last_match(1);
        place = $$($nesting, 'Regexp').$last_match(2).$to_i();
        place = ($truthy($a = place) ? $a : 0);
        $b = self.$transferCardsByCommand(commandset, place, destination), $a = Opal.to_ary($b), (okCount = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;
        self.$debug("transferCardsByCommand resutl okCount, ngCardList", okCount, ngCardList);};
      ngCardText = ngCardList.$join(",");
      return [okCount, ngCardText];
    }, $CardTrader_transferCards$54.$$arity = 1);
    
    Opal.def(self, '$transferCardsByCommand', $CardTrader_transferCardsByCommand$55 = function $$transferCardsByCommand(commandset, place, destination) {
      var $a, $b, self = this, nick_e = nil, okCount = nil, ngCardList = nil, cards = nil;

      
      self.$debug("transferCardsByCommand commandset, place, destination", commandset, place, destination);
      nick_e = self.nick_e;
      if ($truthy($rb_gt(place, 0))) {
        nick_e = "" + (place) + (nick_e)};
      okCount = 0;
      ngCardList = [];
      self.$debug("LINE", 827);
      cards = [""];
      if ($truthy(new RegExp("" + "\\[(" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*)\\]")['$=~'](commandset))) {
        cards = $$($nesting, 'Regexp').$last_match(1).$split(/,/)};
      self.$debug("transferCardsByCommand cards", cards);
      $b = self.$transferCardsByCards(cards, destination, nick_e), $a = Opal.to_ary($b), (okCount = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;
      self.$debug("LINE", 837);
      return [okCount, ngCardList];
    }, $CardTrader_transferCardsByCommand$55.$$arity = 3);
    
    Opal.def(self, '$transferCardsByCards', $CardTrader_transferCardsByCards$56 = function $$transferCardsByCards(cards, destination, nick_e) {try {

      var $$57, self = this, okCount = nil, ngCardList = nil;

      
      okCount = 0;
      ngCardList = [];
      $send(cards, 'each', [], ($$57 = function(card){var self = $$57.$$s || this, result = nil, $case = nil;

      
        
        if (card == null) {
          card = nil;
        };
        self.$debug("transferCardsByCards card", card);
        result = self.$transferOneCard(card, nick_e, destination);
        self.$debug("transferOneCard result", result);
        return (function() {$case = result;
        if ($$($nesting, 'NG_RESULT')['$===']($case)) {Opal.ret([-1, ["渡す相手が登録されていません"]])}
        else if ($$($nesting, 'OK_RESULT')['$===']($case)) {return (okCount = $rb_plus(okCount, 1))}
        else {return ngCardList['$<<'](result)}})();}, $$57.$$s = self, $$57.$$arity = 1, $$57));
      return [okCount, ngCardList];
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $CardTrader_transferCardsByCards$56.$$arity = 3);
    
    Opal.def(self, '$transferOneCard', $CardTrader_transferOneCard$58 = function $$transferOneCard(card, from, toSend) {
      var $a, $b, self = this, targetCard = nil, isTargetCardInHand = nil, restCards = nil, thisCard = nil, $writer = nil, cards = nil, isSuccess = nil;

      
      self.$debug("transferOneCard card, from, toSend", card, from, toSend);
      targetCard = card.$upcase();
      toSend = toSend.$upcase();
      from = from.$upcase();
      isTargetCardInHand = false;
      restCards = [];
      thisCard = "";
      ($truthy($a = self.deal_cards['$[]'](from)) ? $a : (($writer = [from, []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      cards = self.deal_cards['$[]'](from);
      self.$debug("from, cards, @deal_cards", from, cards, self.deal_cards);
      if (targetCard['$==']("")) {
        
        self.$debug("カード指定がないのでランダムで一枚渡す");
        thisCard = self.$ejectOneCardRandomFromCards(cards);
        isTargetCardInHand = true;
        restCards = self.deal_cards['$[]'](from);
      } else {
        
        self.$debug("カード指定あり targetCard", targetCard);
        $b = self.$transferTargetCard(targetCard, cards, toSend, from), $a = Opal.to_ary($b), (thisCard = ($a[0] == null ? nil : $a[0])), (restCards = ($a[1] == null ? nil : $a[1])), (isTargetCardInHand = ($a[2] == null ? nil : $a[2])), $b;
      };
      self.$debug("transferOneCard isTargetCardInHand", isTargetCardInHand);
      if ($truthy(isTargetCardInHand)) {
      } else {
        return targetCard
      };
      self.$debug("transferOneCard @deal_cards", self.deal_cards);
      self.$debug("transferOneCard toSend", toSend);
      if ($truthy(self.deal_cards['$[]'](toSend))) {
        
        self.$debug("alreadyRegisted");
        self.deal_cards['$[]'](toSend)['$<<'](thisCard);
      } else {
        
        self.$debug("NOT registed");
        isSuccess = self.$transferTargetCardToNewMember(toSend, thisCard);
        self.$debug("isSuccess", isSuccess);
        if ($truthy(isSuccess)) {
        } else {
          return $$($nesting, 'NG_RESULT')
        };
      };
      
      $writer = [from, restCards];
      $send(self.deal_cards, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      self.$debug("transferOneCard @deal_cards", self.deal_cards);
      return $$($nesting, 'OK_RESULT');
    }, $CardTrader_transferOneCard$58.$$arity = 3);
    
    Opal.def(self, '$ejectOneCardRandomFromCards', $CardTrader_ejectOneCardRandomFromCards$59 = function $$ejectOneCardRandomFromCards(cards) {
      var $a, $b, self = this, cardNumber = nil, card = nil;

      
      self.$debug("ejectOneCardRandomFromCards cards.length", cards.$length());
      if ($truthy(cards['$empty?']())) {
        return nil};
      $b = self.bcdice.$roll(1, cards.$length()), $a = Opal.to_ary($b), (cardNumber = ($a[0] == null ? nil : $a[0])), $b;
      cardNumber = $rb_minus(cardNumber, 1);
      self.$debug("cardNumber", cardNumber);
      card = cards.$delete_at(cardNumber);
      self.$debug("card", card);
      return card;
    }, $CardTrader_ejectOneCardRandomFromCards$59.$$arity = 1);
    
    Opal.def(self, '$transferTargetCard', $CardTrader_transferTargetCard$60 = function $$transferTargetCard(targetCard, cards, toSend, from) {
      var $$61, self = this, thisCard = nil, restCards = nil, isTargetCardInHand = nil;

      
      self.$debug("transferTargetCard(targetCard, cards, toSend, from)", targetCard, cards, toSend, from);
      thisCard = "";
      restCards = [];
      isTargetCardInHand = false;
      $send(cards, 'each', [], ($$61 = function(card){var self = $$61.$$s || this, $a;

      
        
        if (card == null) {
          card = nil;
        };
        if ($truthy(($truthy($a = isTargetCardInHand['$!']()) ? card['$=='](targetCard) : $a))) {
          
          isTargetCardInHand = true;
          return (thisCard = card);
        } else {
          return restCards['$<<'](card)
        };}, $$61.$$s = self, $$61.$$arity = 1, $$61));
      self.$debug("restCards", restCards);
      return [thisCard, restCards, isTargetCardInHand];
    }, $CardTrader_transferTargetCard$60.$$arity = 4);
    
    Opal.def(self, '$transferTargetCardToNewMember', $CardTrader_transferTargetCardToNewMember$62 = function $$transferTargetCardToNewMember(destination, thisCard) {
      var $a, self = this, isSuccess = nil, placeName = nil, $writer = nil;

      
      self.$debug("transferTargetCardToNewMember destination, thisCard", destination, thisCard);
      self.$debug("@card_place", self.card_place);
      isSuccess = false;
      if ($truthy($rb_gt(self.card_place, 0))) {
        if ($truthy(/^\d+(.+)/['$=~'](destination))) {
          
          placeName = $$($nesting, 'Regexp').$last_match(1);
          self.$debug("placeName", placeName);
          if ($truthy(self.deal_cards['$[]'](placeName))) {
            
            ($truthy($a = self.deal_cards['$[]'](destination)) ? $a : (($writer = [destination, []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            self.deal_cards['$[]'](destination)['$<<'](thisCard);
            isSuccess = true;};}};
      return isSuccess;
    }, $CardTrader_transferTargetCardToNewMember$62.$$arity = 2);
    
    Opal.def(self, '$sendCardToTargetNickPlaceCommandText', $CardTrader_sendCardToTargetNickPlaceCommandText$63 = function $$sendCardToTargetNickPlaceCommandText(commandText, targetNick) {
      var $a, $b, self = this, okCardList = nil, ngCardList = nil, ngCardText = nil;

      
      self.$debug("sendCardToTargetNickPlaceCommandText commandText, targetNick", commandText, targetNick);
      $b = self.$getSendCardToTargetNickPlace(commandText, targetNick), $a = Opal.to_ary($b), (okCardList = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;
      self.$debug("getSendCardToTargetNickPlace okCardList, ngCardList", okCardList, ngCardList);
      if ($truthy($rb_lt(okCardList.$length(), 0))) {
        
        self.$sendMessage(self.channel, "" + (self.nick_e) + ": 相手が登録されていません");
        return nil;};
      if ($truthy(ngCardList['$empty?']())) {
      } else {
        
        ngCardText = self.$getCardsTextFromCards(ngCardList);
        self.$sendMessage(self.channel, "" + "[" + (ngCardText) + "]がありません");
        return nil;
      };
      if ($truthy(okCardList['$empty?']())) {
      } else {
        self.$printRegistCardResult(targetNick, self.$okCards())
      };
      return self.$sendMessageToOnlySender(self.$getHandAndPlaceCardInfoText("Auto"));
    }, $CardTrader_sendCardToTargetNickPlaceCommandText$63.$$arity = 2);
    
    Opal.def(self, '$getSendCardToTargetNickPlace', $CardTrader_getSendCardToTargetNickPlace$64 = function $$getSendCardToTargetNickPlace(commandText, _nick_e) {
      var self = this, ngCardList = nil, okCardList = nil, cardset = nil, placeNumber = nil, destination = nil;
      if ($gvars.ircNickRegExp == null) $gvars.ircNickRegExp = nil;

      
      ngCardList = [];
      okCardList = [];
      self.$debug("commandText", commandText);
      if ($truthy(new RegExp("" + "(c-place(\\d*)(\\[(((,)?" + (self.cardRegExp) + ")*)\\])?)\\s*(" + ($gvars.ircNickRegExp) + ")")['$=~'](commandText))) {
        
        cardset = $$($nesting, 'Regexp').$last_match(1);
        placeNumber = $$($nesting, 'Regexp').$last_match(2).$to_i();
        destination = $$($nesting, 'Regexp').$last_match(7).$upcase();
        self.$getSendCardToTargetNickPlaceByCardSetAndDestination(cardset, placeNumber, destination);};
      return [okCardList, ngCardList];
    }, $CardTrader_getSendCardToTargetNickPlace$64.$$arity = 2);
    
    Opal.def(self, '$getSendCardToTargetNickPlaceByCardSetAndDestination', $CardTrader_getSendCardToTargetNickPlaceByCardSetAndDestination$65 = function $$getSendCardToTargetNickPlaceByCardSetAndDestination(cardset, placeNumber, destination) {
      var $a, $b, self = this, toSend = nil, from = nil, cards = nil, okCardList = nil, ngCardList = nil;

      
      self.$debug("getSendCardToTargetNickPlaceByCardSetAndDestination cardset, placeNumber, destination", cardset, placeNumber, destination);
      self.$debug("今のところ場が１つしかないので相手の場は決めうち");
      toSend = "" + "1" + (destination);
      self.$debug("toSend", toSend);
      from = self.nick_e;
      if ($truthy($rb_gt(placeNumber, 0))) {
        from = "" + (placeNumber) + (from)};
      self.$debug("from", from);
      if ($truthy(new RegExp("" + "\\[(" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*)\\]")['$=~'](cardset))) {
        
        cards = $$($nesting, 'Regexp').$last_match(1).$split(/,/);
        $b = self.$getSendCardToTargetNickPlaceByCards(cards, from, toSend), $a = Opal.to_ary($b), (okCardList = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;};
      return [okCardList, ngCardList];
    }, $CardTrader_getSendCardToTargetNickPlaceByCardSetAndDestination$65.$$arity = 3);
    
    Opal.def(self, '$getSendCardToTargetNickPlaceByCards', $CardTrader_getSendCardToTargetNickPlaceByCards$66 = function $$getSendCardToTargetNickPlaceByCards(cards, destination, toSend) {try {

      var $$67, self = this, okCardList = nil, ngCardList = nil;

      
      self.$debug("getSendCardToTargetNickPlaceByCards cards, destination, toSend", destination, toSend);
      okCardList = [];
      ngCardList = [];
      $send(cards, 'each', [], ($$67 = function(card){var self = $$67.$$s || this, result = nil, $case = nil;

      
        
        if (card == null) {
          card = nil;
        };
        result = self.$transferOneCard(card, destination, toSend);
        return (function() {$case = result;
        if ($$($nesting, 'NG_RESULT')['$===']($case)) {Opal.ret([-1, "渡す相手が登録されていません"])}
        else if ($$($nesting, 'OK_RESULT')['$===']($case)) {return okCardList['$<<'](card)}
        else {return ngCardList['$<<'](result)}})();}, $$67.$$s = self, $$67.$$arity = 1, $$67));
      return [okCardList, ngCardList];
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $CardTrader_getSendCardToTargetNickPlaceByCards$66.$$arity = 3);
    
    Opal.def(self, '$printRegistCardResult', $CardTrader_printRegistCardResult$68 = function $$printRegistCardResult(targetNick, okCards) {
      var self = this, cardText = nil;

      
      self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (okCards.$length()) + "枚場に置きました");
      if ($truthy(self.cardTitles['$empty?']())) {
      } else {
        
        cardText = self.$getCardsTextFromCards(okCards);
        self.$sendMessage(self.channel, "" + "[" + (cardText) + "]");
      };
      return self.$sendMessage(targetNick, self.$getHandAndPlaceCardInfoText("Auto", targetNick));
    }, $CardTrader_printRegistCardResult$68.$$arity = 2);
    
    Opal.def(self, '$tapCardCommandText', $CardTrader_tapCardCommandText$69 = function $$tapCardCommandText(commandText) {
      var $a, $b, self = this, okList = nil, ngList = nil, isUntap = nil, tapTypeName = nil;

      
      self.$debug("tapCardCommandText commandText", commandText);
      $b = self.$tapCard(commandText), $a = Opal.to_ary($b), (okList = ($a[0] == null ? nil : $a[0])), (ngList = ($a[1] == null ? nil : $a[1])), (isUntap = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(okList['$empty?']())) {
      } else {
        
        tapTypeName = (function() {if ($truthy(isUntap)) {
          return "アンタップ"
        } else {
          return "タップ"
        }; return nil; })();
        self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (okList.$length()) + "枚" + (tapTypeName) + "しました");
        if ($truthy(self.cardTitles['$empty?']())) {
        } else {
          self.$sendMessage(self.channel, "" + "[" + (self.$getCardsTextFromCards(okList)) + "]")
        };
      };
      if ($truthy(ngList['$empty?']())) {
      } else {
        self.$sendMessage(self.channel, "" + "[" + (self.$getCardsTextFromCards(ngList)) + "]は場にありません")
      };
      return self.$sendMessageToOnlySender(self.$getHandAndPlaceCardInfoText("Auto", self.nick_e));
    }, $CardTrader_tapCardCommandText$69.$$arity = 1);
    
    Opal.def(self, '$tapCard', $CardTrader_tapCard$70 = function $$tapCard(command) {
      var $a, $b, self = this, okCardList = nil, ngCardList = nil, place = nil, isUntap = nil, cardsText = nil;

      
      okCardList = [];
      ngCardList = [];
      if ($truthy(($truthy($a = self.canTapCard) ? self.card_place : $a))) {
      } else {
        return [okCardList, ngCardList]
      };
      if ($truthy(new RegExp("" + "(c-(un)?tap(\\d+)\\[((,)?" + (self.cardRegExp) + ")+\\])")['$=~'](command))) {
      } else {
        return [okCardList, ngCardList]
      };
      place = $$($nesting, 'Regexp').$last_match(3).$to_i();
      isUntap = $$($nesting, 'Regexp').$last_match(2);
      cardsText = $$($nesting, 'Regexp').$last_match(1);
      $b = self.$tapCardByCardsTextAndPlace(cardsText, place, isUntap), $a = Opal.to_ary($b), (okCardList = ($a[0] == null ? nil : $a[0])), (ngCardList = ($a[1] == null ? nil : $a[1])), $b;
      return [okCardList, ngCardList, isUntap];
    }, $CardTrader_tapCard$70.$$arity = 1);
    
    Opal.def(self, '$tapCardByCardsTextAndPlace', $CardTrader_tapCardByCardsTextAndPlace$71 = function $$tapCardByCardsTextAndPlace(cardsText, place, isUntap) {
      var $$72, self = this, okCardList = nil, ngCardList = nil, cards = nil;

      
      okCardList = [];
      ngCardList = [];
      if ($truthy(new RegExp("" + "\\[(" + (self.cardRegExp) + "(," + (self.cardRegExp) + ")*)\\]")['$=~'](cardsText))) {
        
        cards = $$($nesting, 'Regexp').$last_match(1).$split(/,/);
        $send(cards, 'each', [], ($$72 = function(card){var self = $$72.$$s || this, $a, $b, okCard = nil, ngCard = nil;

        
          
          if (card == null) {
            card = nil;
          };
          $b = self.$tapOneCardByCardAndPlace(card, place, isUntap), $a = Opal.to_ary($b), (okCard = ($a[0] == null ? nil : $a[0])), (ngCard = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(okCard['$nil?']())) {
          } else {
            okCardList['$<<'](okCard)
          };
          if ($truthy(ngCard['$nil?']())) {
            return nil
          } else {
            return ngCardList['$<<'](ngCard)
          };}, $$72.$$s = self, $$72.$$arity = 1, $$72));};
      return [okCardList, ngCardList];
    }, $CardTrader_tapCardByCardsTextAndPlace$71.$$arity = 3);
    
    Opal.def(self, '$tapOneCardByCardAndPlace', $CardTrader_tapOneCardByCardAndPlace$73 = function $$tapOneCardByCardAndPlace(card, place, isUntap) {
      var self = this, result = nil, nick_e_original = nil, nick_to = nil, destination = nil;

      
      card = card.$upcase();
      result = "";
      nick_e_original = self.nick_e;
      self.nick_e = self.nick_e.$upcase();
      nick_to = "";
      if ($truthy(isUntap)) {
        
        destination = "" + ($rb_minus($rb_times(place, 2), 1)) + (self.nick_e);
        nick_to = "" + ($rb_times(place, 2)) + (self.nick_e);
      } else {
        
        destination = "" + ($rb_times(place, 2)) + (self.nick_e);
        nick_to = "" + ($rb_minus($rb_times(place, 2), 1)) + (self.nick_e);
      };
      result = self.$transferOneCard(card, nick_to, destination);
      self.nick_e = nick_e_original;
      if (result['$==']($$($nesting, 'OK_RESULT'))) {
        return [card, nil]
      } else {
        return [nil, card]
      };
    }, $CardTrader_tapOneCardByCardAndPlace$73.$$arity = 3);
    
    Opal.def(self, '$printMilStoneResult', $CardTrader_printMilStoneResult$74 = function $$printMilStoneResult(commandText) {
      var $a, $b, self = this, count = nil, output_msg = nil;

      
      $b = self.$getCardMilstone(commandText), $a = Opal.to_ary($b), (count = ($a[0] == null ? nil : $a[0])), (output_msg = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy($rb_gt(count, 0))) {
        return self.$sendMessage(self.channel, "" + (self.nick_e) + ": " + (self.$getCardsText(output_msg)) + "が出ました")
      } else {
        return self.$sendMessage(self.channel, "カードが残っていません")
      };
    }, $CardTrader_printMilStoneResult$74.$$arity = 1);
    
    Opal.def(self, '$getCardMilstone', $CardTrader_getCardMilstone$75 = function $$getCardMilstone(commandText) {
      var $a, $b, self = this, command = nil, count = nil, cards = nil, text = nil, cardInfo = nil, okCount = nil, ngCount = nil;

      
      command = "c-draw";
      count = 0;
      if ($truthy(/\[(\d+)\]/['$=~'](commandText))) {
        
        count = $$($nesting, 'Regexp').$last_match(1).$to_i();
        command = $rb_plus(command, "" + "[" + (count) + "]");};
      cards = self.$drawCard(command);
      self.$debug("cards", cards);
      text = "";
      if ($truthy(cards['$empty?']()['$!']())) {
        
        cardInfo = self.$getCardsTextFromCards(cards);
        $b = self.$discardCards("" + "c-discard[" + (cardInfo) + "]"), $a = Opal.to_ary($b), (okCount = ($a[0] == null ? nil : $a[0])), (ngCount = ($a[1] == null ? nil : $a[1])), (text = ($a[2] == null ? nil : $a[2])), $b;
        self.$debug("discardCards okCount, ngCount, text", okCount, ngCount, text);
        count = okCount;
      } else {
        count = 0
      };
      self.$debug("count", count);
      self.$debug("cardInfo", cardInfo);
      return [count, cardInfo];
    }, $CardTrader_getCardMilstone$75.$$arity = 1);
    
    Opal.def(self, '$clearAllPlaceAllPlayerCards', $CardTrader_clearAllPlaceAllPlayerCards$76 = function $$clearAllPlaceAllPlayerCards() {
      var $$77, self = this;

      
      $send(self.deal_cards, 'each', [], ($$77 = function(place, cards){var self = $$77.$$s || this;

      
        
        if (place == null) {
          place = nil;
        };
        
        if (cards == null) {
          cards = nil;
        };
        return self.$clearAllPlayerCardsWhenPlayedPlace(place, cards);}, $$77.$$s = self, $$77.$$arity = 2, $$77));
      return "場のカードを捨てました";
    }, $CardTrader_clearAllPlaceAllPlayerCards$76.$$arity = 0);
    
    Opal.def(self, '$clearAllPlayerCardsWhenPlayedPlace', $CardTrader_clearAllPlayerCardsWhenPlayedPlace$78 = function $$clearAllPlayerCardsWhenPlayedPlace(place, cards) {
      var self = this;

      if ($truthy(place['$=~'](/^\d+/))) {
        return self.$clearAllPlayerCards(place, cards)
      } else {
        return nil
      }
    }, $CardTrader_clearAllPlayerCardsWhenPlayedPlace$78.$$arity = 2);
    
    Opal.def(self, '$clearAllPlayerCards', $CardTrader_clearAllPlayerCards$79 = function $$clearAllPlayerCards(place, cards) {
      var $a, self = this, cardset = nil, $writer = nil;

      
      cardset = cards.$join(",");
      self.$discardCards("" + "c-discard[" + (cardset) + "]", place);
      ($truthy($a = self.deal_cards['$[]'](place)) ? $a : (($writer = [place, []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return self.deal_cards['$[]'](place).$clear();
    }, $CardTrader_clearAllPlayerCards$79.$$arity = 2);
    
    Opal.def(self, '$returnCards', $CardTrader_returnCards$80 = function $$returnCards() {
      var $a, self = this, $writer = nil, cards = nil;

      
      ($truthy($a = self.deal_cards['$[]']("card_played")) ? $a : (($writer = ["card_played", []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      cards = self.deal_cards['$[]']("card_played");
      while ($truthy(cards['$empty?']()['$!']())) {
        self.cardRest.$push(cards.$shift())
      };
      return "捨て札を山に戻しました";
    }, $CardTrader_returnCards$80.$$arity = 0);
    
    Opal.def(self, '$getBurriedCard', $CardTrader_getBurriedCard$81 = function $$getBurriedCard() {
      var $a, self = this, $writer = nil, cards = nil;

      
      ($truthy($a = self.deal_cards['$[]']("card_played")) ? $a : (($writer = ["card_played", []]), $send(self.deal_cards, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      cards = self.deal_cards['$[]']("card_played");
      return cards.$length();
    }, $CardTrader_getBurriedCard$81.$$arity = 0);
    
    Opal.def(self, '$reviewCards', $CardTrader_reviewCards$82 = function $$reviewCards() {
      var self = this;

      return self.cardRest.$join(",")
    }, $CardTrader_reviewCards$82.$$arity = 0);
    
    Opal.def(self, '$getAllCardLocation', $CardTrader_getAllCardLocation$83 = function $$getAllCardLocation() {
      var $$84, self = this, allText = nil, allPlaceText = nil;

      
      allText = "" + "山札:" + (self.cardRest.$length()) + "枚 捨札:" + (self.$getBurriedCard()) + "枚";
      allPlaceText = "";
      $send(self.deal_cards, 'each', [], ($$84 = function(place, cards){var self = $$84.$$s || this, $a, $b, text = nil, placeText = nil;

      
        
        if (place == null) {
          place = nil;
        };
        
        if (cards == null) {
          cards = nil;
        };
        if (place['$==']("card_played")) {
          return nil;};
        $b = self.$getCardLocationOnPlace(place, cards), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (placeText = ($a[1] == null ? nil : $a[1])), $b;
        allText = $rb_plus(allText, text);
        return (allPlaceText = $rb_plus(allPlaceText, placeText));}, $$84.$$s = self, $$84.$$arity = 2, $$84));
      return [allText, allPlaceText];
    }, $CardTrader_getAllCardLocation$83.$$arity = 0);
    
    Opal.def(self, '$getCardLocationOnPlace', $CardTrader_getCardLocationOnPlace$85 = function $$getCardLocationOnPlace(place, cards) {
      var self = this, text = nil, placeText = nil, placeNumber = nil, cnick = nil;
      if ($gvars.ircNickRegExp == null) $gvars.ircNickRegExp = nil;

      
      text = "";
      placeText = "";
      if ($truthy(place['$=~'](new RegExp("" + "^(\\d+)(" + ($gvars.ircNickRegExp) + ")")))) {
        
        placeNumber = $$($nesting, 'Regexp').$last_match(1);
        cnick = $$($nesting, 'Regexp').$last_match(2);
        placeText = self.$getCardLocationOnNumberdPlace(cards, placeNumber, cnick);
      } else {
        text = "" + " " + (place) + ":" + (cards.$length()) + "枚"
      };
      return [text, placeText];
    }, $CardTrader_getCardLocationOnPlace$85.$$arity = 2);
    
    Opal.def(self, '$getCardLocationOnNumberdPlace', $CardTrader_getCardLocationOnNumberdPlace$86 = function $$getCardLocationOnNumberdPlace(cards, placeNumber, cnick) {
      var self = this, cardText = nil;

      
      cardText = self.$getCardsText(cards);
      if ($truthy(self.$isTapCardPlace(placeNumber))) {
        return "" + " " + (cnick) + "のタップした場札:" + (cardText)
      } else {
        return "" + " " + (cnick) + "の場札:" + (cardText)
      };
    }, $CardTrader_getCardLocationOnNumberdPlace$86.$$arity = 3);
    
    Opal.def(self, '$getHandAndPlaceCardInfoText', $CardTrader_getHandAndPlaceCardInfoText$87 = function $$getHandAndPlaceCardInfoText(str, destination) {
      var self = this, hand = nil, place = nil;

      
      
      if (destination == null) {
        destination = nil;
      };
      self.$debug("getHandAndPlaceCardInfoText(str, destination)", str, destination);
      if ($truthy(destination['$nil?']())) {
        destination = self.nick_e};
      destination = destination.$upcase();
      hand = self.$getHandCardInfoText(destination);
      self.$debug("hand", hand);
      place = self.$getPlaceCardInfoText(destination);
      self.$debug("place", place);
      return $rb_plus(hand, place);
    }, $CardTrader_getHandAndPlaceCardInfoText$87.$$arity = -2);
    
    Opal.def(self, '$getHandCardInfoText', $CardTrader_getHandCardInfoText$88 = function $$getHandCardInfoText(destination) {
      var self = this, out_msg = nil;

      
      destination = destination.$upcase();
      self.$debug("getHandCardInfoText destination", destination);
      out_msg = self.$getDealCardsText(destination);
      if ($truthy(out_msg['$empty?']())) {
        out_msg = "カードを持っていません"};
      return out_msg;
    }, $CardTrader_getHandCardInfoText$88.$$arity = 1);
    
    Opal.def(self, '$getDealCardsText', $CardTrader_getDealCardsText$89 = function $$getDealCardsText(destination) {
      var self = this, cards = nil, cardsText = nil;

      
      self.$debug("getDealCardsText destination", destination);
      cards = self.deal_cards['$[]'](destination);
      self.$debug("@deal_cards", self.deal_cards);
      self.$debug("getDealCardsText cards", cards);
      if ($truthy(cards['$nil?']())) {
        return ""};
      cardsText = self.$getCardsTextFromCards(cards);
      return "" + "[ " + (cardsText) + " ]";
    }, $CardTrader_getDealCardsText$89.$$arity = 1);
    
    Opal.def(self, '$compareCard', $CardTrader_compareCard$90 = function $$compareCard(a, b) {
      var self = this;

      if ($truthy(a['$=~'](/[^\d]/))) {
        return self.$compareCardByCardNumber(a, b)
      } else {
        return a['$<=>'](b)
      }
    }, $CardTrader_compareCard$90.$$arity = 2);
    
    Opal.def(self, '$compareCardByCardNumber', $CardTrader_compareCardByCardNumber$91 = function $$compareCardByCardNumber(a, b) {
      var self = this, a1 = nil, a2 = nil, b1 = nil, b2 = nil, result = nil;

      
      /([^\d]+)(\d+)/['$=~'](a);
      a1 = $$($nesting, 'Regexp').$last_match(1);
      a2 = $$($nesting, 'Regexp').$last_match(2);
      /([^\d]+)(\d+)/['$=~'](b);
      b1 = $$($nesting, 'Regexp').$last_match(1);
      b2 = $$($nesting, 'Regexp').$last_match(2);
      result = [a1, a2]['$<=>']([b1, b2]);
      return result;
    }, $CardTrader_compareCardByCardNumber$91.$$arity = 2);
    
    Opal.def(self, '$getPlaceCardInfoText', $CardTrader_getPlaceCardInfoText$92 = function $$getPlaceCardInfoText(destination) {
      var $$93, self = this, out_msg = nil, place_max = nil;

      
      destination = destination.$upcase();
      out_msg = "";
      if ($truthy($rb_gt(self.card_place, 0))) {
      } else {
        return out_msg
      };
      place_max = self.card_place;
      if ($truthy(self.canTapCard)) {
        place_max = $rb_times(place_max, 2)};
      self.$debug("place_max", place_max);
      $send(place_max, 'times', [], ($$93 = function(i){var self = $$93.$$s || this, $a, index = nil, dealCardsKey = nil, cards = nil, cardsText = nil;
        if (self.deal_cards == null) self.deal_cards = nil;

      
        
        if (i == null) {
          i = nil;
        };
        index = $rb_plus(i, 1);
        dealCardsKey = "" + (index) + (destination);
        self.$debug("dealCardsKey", dealCardsKey);
        cards = self.deal_cards['$[]'](dealCardsKey);
        cards = ($truthy($a = cards) ? $a : []);
        cardsText = self.$getCardsTextFromCards(cards);
        if ($truthy(self.$isTapCardPlace(index))) {
          return (out_msg = $rb_plus(out_msg, "" + " タップした場札:[ " + (cardsText) + " ]"))
        } else {
          return (out_msg = $rb_plus(out_msg, "" + " 場札:[ " + (cardsText) + " ]"))
        };}, $$93.$$s = self, $$93.$$arity = 1, $$93));
      return out_msg;
    }, $CardTrader_getPlaceCardInfoText$92.$$arity = 1);
    
    Opal.def(self, '$getCardsText', $CardTrader_getCardsText$94 = function $$getCardsText(cardsText) {
      var self = this, cards = nil;

      
      cards = cardsText.$split(/,/);
      return self.$getCardsTextFromCards(cards);
    }, $CardTrader_getCardsText$94.$$arity = 1);
    
    Opal.def(self, '$getCardsTextFromCards', $CardTrader_getCardsTextFromCards$95 = function $$getCardsTextFromCards(cards) {
      var $$96, $$97, self = this, out_msg = nil;
      if ($gvars.isHandSort == null) $gvars.isHandSort = nil;

      
      if ($truthy($gvars.isHandSort)) {
        cards = $send(cards, 'sort', [], ($$96 = function(a, b){var self = $$96.$$s || this;

        
          
          if (a == null) {
            a = nil;
          };
          
          if (b == null) {
            b = nil;
          };
          return self.$compareCard(a, b);}, $$96.$$s = self, $$96.$$arity = 2, $$96))};
      if ($truthy(self.cardTitles['$empty?']())) {
        return cards.$join(",")};
      out_msg = "";
      $send(cards, 'each', [], ($$97 = function(cardNumber){var self = $$97.$$s || this, title = nil;
        if (self.cardTitles == null) self.cardTitles = nil;

      
        
        if (cardNumber == null) {
          cardNumber = nil;
        };
        if ($truthy(out_msg['$!='](""))) {
          out_msg = $rb_plus(out_msg, ",")};
        title = self.cardTitles['$[]'](cardNumber);
        return (out_msg = $rb_plus(out_msg, "" + (cardNumber) + "-" + (title)));}, $$97.$$s = self, $$97.$$arity = 1, $$97));
      if (out_msg['$==']("")) {
        out_msg = "無し"};
      return out_msg;
    }, $CardTrader_getCardsTextFromCards$95.$$arity = 1);
    
    Opal.def(self, '$isTapCardPlace', $CardTrader_isTapCardPlace$98 = function $$isTapCardPlace(index) {
      var self = this;

      
      if ($truthy(self.canTapCard)) {
      } else {
        return false
      };
      return index['$even?']();
    }, $CardTrader_isTapCardPlace$98.$$arity = 1);
    
    Opal.def(self, '$printCardRestorationSpellResult', $CardTrader_printCardRestorationSpellResult$99 = function $$printCardRestorationSpellResult(spellText) {
      var self = this, output_msg = nil;

      
      output_msg = self.$throwCardRestorationSpell(spellText);
      if (output_msg['$==']("readSpell")) {
        return self.$sendMessage(self.channel, "" + (self.nick_e) + ": カード配置を復活しました")
      } else {
        return self.$sendMessage(self.channel, output_msg)
      };
    }, $CardTrader_printCardRestorationSpellResult$99.$$arity = 1);
    
    Opal.def(self, '$throwCardRestorationSpell', $CardTrader_throwCardRestorationSpell$100 = function $$throwCardRestorationSpell(spellText) {
      var self = this, output = nil;

      
      output = "0";
      self.$debug("spellText", spellText);
      if ($truthy(spellText['$nil?']())) {
        
        self.$debug("getNewSpellText");
        spellText = self.$getNewSpellText();
        output = "" + "復活の呪文 ＞ [" + (spellText) + "]";
      } else {
        
        self.$debug("setNewSpellText");
        output = self.$setNewSpellText(spellText);
      };
      self.$debug("throwCardRestorationSpell output", output);
      return output;
    }, $CardTrader_throwCardRestorationSpell$100.$$arity = 1);
    
    Opal.def(self, '$getNewSpellText', $CardTrader_getNewSpellText$101 = function $$getNewSpellText() {
      var self = this, textList = nil, placeNames = nil, spellWords = nil;

      
      self.$debug("getNewSpellText begin");
      textList = [];
      placeNames = self.deal_cards.$keys().$sort();
      textList['$<<'](placeNames);
      spellWords = self.$getSpellWords();
      textList['$<<'](spellWords);
      return textList.$join(",");
    }, $CardTrader_getNewSpellText$101.$$arity = 0);
    
    Opal.def(self, '$getSpellWords', $CardTrader_getSpellWords$102 = function $$getSpellWords() {
      var $$103, self = this, spellWords = nil;

      
      spellWords = "";
      $send(self.card_val, 'each', [], ($$103 = function(card){var self = $$103.$$s || this, index = nil, indexWord = nil;

      
        
        if (card == null) {
          card = nil;
        };
        index = self.$getDealCardIndex(card);
        indexWord = self.$getIndexWord(index);
        return spellWords['$<<'](indexWord);}, $$103.$$s = self, $$103.$$arity = 1, $$103));
      spellWords = self.$shrinkSpellWords(spellWords);
      return spellWords;
    }, $CardTrader_getSpellWords$102.$$arity = 0);
    
    Opal.def(self, '$getIndexWord', $CardTrader_getIndexWord$104 = function $$getIndexWord(index) {
      var self = this;

      return self.card_spell['$[]']($rb_plus(index, 1))
    }, $CardTrader_getIndexWord$104.$$arity = 1);
    
    Opal.def(self, '$getDealCardIndex', $CardTrader_getDealCardIndex$105 = function $$getDealCardIndex(card) {try {

      var $$106, self = this;

      
      $send(self.deal_cards.$keys().$sort(), 'each_with_index', [], ($$106 = function(place, index){var self = $$106.$$s || this, cards = nil;
        if (self.deal_cards == null) self.deal_cards = nil;

      
        
        if (place == null) {
          place = nil;
        };
        
        if (index == null) {
          index = nil;
        };
        cards = self.deal_cards['$[]'](place);
        if ($truthy(cards['$include?'](card))) {
          Opal.ret(index)
        } else {
          return nil
        };}, $$106.$$s = self, $$106.$$arity = 2, $$106));
      return -1;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $CardTrader_getDealCardIndex$105.$$arity = 1);
    
    Opal.def(self, '$shrinkSpellWords', $CardTrader_shrinkSpellWords$107 = function $$shrinkSpellWords(spellWords) {
      var $$108, self = this;

      
      $send(self.card_spell, 'each', [], ($$108 = function(word){var self = $$108.$$s || this, $$109;

      
        
        if (word == null) {
          word = nil;
        };
        return (spellWords = $send(spellWords, 'gsub', [new RegExp("" + (word) + "(" + (word) + "+)")], ($$109 = function(){var self = $$109.$$s || this;

        return $rb_plus(word, $rb_plus($$($nesting, 'Regexp').$last_match(1).$length(), 1).$to_s())}, $$109.$$s = self, $$109.$$arity = 0, $$109)));}, $$108.$$s = self, $$108.$$arity = 1, $$108));
      return spellWords;
    }, $CardTrader_shrinkSpellWords$107.$$arity = 1);
    
    Opal.def(self, '$setNewSpellText', $CardTrader_setNewSpellText$110 = function $$setNewSpellText(spellText) {
      var $$111, self = this, textList = nil, spellWords = nil, placeNames = nil;

      
      self.$shuffleCards();
      textList = spellText.$split(",");
      spellWords = textList.$pop();
      placeNames = textList;
      self.$debug("placeNames", placeNames);
      self.$debug("spellWords", spellWords);
      spellWords = self.$expandSpellWords(spellWords);
      self.$debug("expanded spellWords", spellWords);
      $send(placeNames, 'each_with_index', [], ($$111 = function(place, index){var self = $$111.$$s || this, indexWord = nil, cards = nil, $writer = nil;
        if (self.deal_cards == null) self.deal_cards = nil;

      
        
        if (place == null) {
          place = nil;
        };
        
        if (index == null) {
          index = nil;
        };
        indexWord = self.$getIndexWord(index);
        cards = self.$getCardsFromIndexWordAndSpellText(indexWord, spellWords);
        
        $writer = [place, cards];
        $send(self.deal_cards, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;}, $$111.$$s = self, $$111.$$arity = 2, $$111));
      self.$debug("setNewSpellText @deal_cards", self.deal_cards);
      return "readSpell";
    }, $CardTrader_setNewSpellText$110.$$arity = 1);
    
    Opal.def(self, '$expandSpellWords', $CardTrader_expandSpellWords$112 = function $$expandSpellWords(spellWords) {
      var $$113, self = this;

      
      $send(self.card_spell, 'each', [], ($$113 = function(word){var self = $$113.$$s || this, $$114;

      
        
        if (word == null) {
          word = nil;
        };
        return (spellWords = $send(spellWords, 'gsub', [new RegExp("" + (word) + "(\\d+)")], ($$114 = function(){var self = $$114.$$s || this;

        return $rb_times(word, $$($nesting, 'Regexp').$last_match(1).$to_i())}, $$114.$$s = self, $$114.$$arity = 0, $$114)));}, $$113.$$s = self, $$113.$$arity = 1, $$113));
      return spellWords;
    }, $CardTrader_expandSpellWords$112.$$arity = 1);
    return (Opal.def(self, '$getCardsFromIndexWordAndSpellText', $CardTrader_getCardsFromIndexWordAndSpellText$115 = function $$getCardsFromIndexWordAndSpellText(indexWord, spellText) {
      var $$116, self = this, cards = nil;

      
      cards = [];
      $send(spellText.$split(/(?:)/), 'each_with_index', [], ($$116 = function(word, index){var self = $$116.$$s || this, $$117, card = nil, isDelete = nil;
        if (self.card_val == null) self.card_val = nil;
        if (self.cardRest == null) self.cardRest = nil;

      
        
        if (word == null) {
          word = nil;
        };
        
        if (index == null) {
          index = nil;
        };
        if (indexWord['$=='](word)) {
        } else {
          return nil;
        };
        card = self.card_val['$[]'](index);
        isDelete = $send(self.cardRest, 'delete_if', [], ($$117 = function(i){var self = $$117.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i['$=='](card);}, $$117.$$s = self, $$117.$$arity = 1, $$117));
        if ($truthy(isDelete)) {
        } else {
          return nil;
        };
        return cards['$<<'](card);}, $$116.$$s = self, $$116.$$arity = 2, $$116));
      return cards;
    }, $CardTrader_getCardsFromIndexWordAndSpellText$115.$$arity = 2), nil) && 'getCardsFromIndexWordAndSpellText';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["fileutils"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 1.0.3 */
Opal.modules["TableFileData"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$directory?', '$searchTableFileDefine', '$include?', '$<<', '$merge!', '$nil?', '$exist?', '$glob', '$each', '$readGameCommandInfo', '$[]', '$empty?', '$[]=', '$-', '$basename', '$===', '$last_match', '$+', '$readOneTableData', '$map', '$lines', '$toutf8', '$read', '$to_proc', '$shift', '$getDiceAndTitle', '$getLineKeyValue', '$to_i', '$class', '$chomp', '$keys', '$isTargetGameType', '$!', '$changeEnterCode', '$gsub', '$==', '$getTableDataFromFile', '$instance', '$getTableFileName', '$checkFile', '$getTableText', '$createFile', '$checkFileNotExist', '$raise', '$initCommand', '$checkCommand', '$gsub!', '$is_a?', '$getFormatedTableText', '$each_with_index', '$tr!', '$checkTableKey', '$open', '$write', '$checkFileWhenFileNameNotChanged', '$checkFileWhenFileNameChanged', '$checkFileExist', '$mv']);
  
  self.$require("fileutils");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TableFileData');

    var $nesting = [self].concat($parent_nesting), $TableFileData_initialize$1, $TableFileData_setDir$2, $TableFileData_searchTableFileDefine$3, $TableFileData_readGameCommandInfo$5, $TableFileData_getAllTableInfo$6, $TableFileData_getGameCommandInfos$8, $TableFileData_getTableDataFromFile$10, $TableFileData_getLineKeyValue$12, $TableFileData_getLineKeyValue$13, $TableFileData_getDiceAndTitle$14, $TableFileData_getTableData$15, $TableFileData_changeEnterCode$17, $TableFileData_isTargetGameType$19, $TableFileData_readOneTableData$20;

    self.$$prototype.dir = self.$$prototype.dirs = self.$$prototype.tableData = nil;
    
    
    Opal.def(self, '$initialize', $TableFileData_initialize$1 = function $$initialize(isLoadCommonTable) {
      var self = this;

      
      
      if (isLoadCommonTable == null) {
        isLoadCommonTable = true;
      };
      self.dirs = [];
      self.tableData = $hash2([], {});
      if ($truthy(isLoadCommonTable)) {
      } else {
        return nil
      };
      self.dir = (function() {if ($truthy($$($nesting, 'FileTest')['$directory?']("./extratables"))) {
        return "./extratables"
      } else {
        return "../extratables"
      }; return nil; })();
      return (self.tableData = self.$searchTableFileDefine(self.dir));
    }, $TableFileData_initialize$1.$$arity = -1);
    
    Opal.def(self, '$setDir', $TableFileData_setDir$2 = function $$setDir(dir, prefix) {
      var self = this, tableData = nil;

      
      
      if (prefix == null) {
        prefix = "";
      };
      if ($truthy(self.dirs['$include?'](dir))) {
        return nil};
      self.dirs['$<<'](dir);
      tableData = self.$searchTableFileDefine(dir, prefix);
      return self.tableData['$merge!'](tableData);
    }, $TableFileData_setDir$2.$$arity = -2);
    
    Opal.def(self, '$searchTableFileDefine', $TableFileData_searchTableFileDefine$3 = function $$searchTableFileDefine(dir, prefix) {
      var $$4, self = this, tableData = nil, fileNames = nil;

      
      
      if (prefix == null) {
        prefix = "";
      };
      tableData = $hash2([], {});
      if ($truthy(dir['$nil?']())) {
        return tableData};
      if ($truthy($$($nesting, 'File')['$exist?'](dir))) {
      } else {
        return tableData
      };
      if ($truthy($$($nesting, 'File')['$directory?'](dir))) {
      } else {
        return tableData
      };
      fileNames = $$($nesting, 'Dir').$glob("" + (dir) + "/" + (prefix) + "*.txt");
      $send(fileNames, 'each', [], ($$4 = function(fileName){var self = $$4.$$s || this, $a, info = nil, gameType = nil, command = nil, $writer = nil;

      
        
        if (fileName == null) {
          fileName = nil;
        };
        info = self.$readGameCommandInfo(fileName, prefix);
        gameType = info['$[]']("gameType");
        gameType = ($truthy($a = gameType) ? $a : "");
        command = info['$[]']("command");
        if ($truthy(command['$empty?']())) {
          return nil;};
        
        $writer = ["" + (gameType) + "_" + (command), info];
        $send(tableData, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      return tableData;
    }, $TableFileData_searchTableFileDefine$3.$$arity = -2);
    
    Opal.def(self, '$readGameCommandInfo', $TableFileData_readGameCommandInfo$5 = function $$readGameCommandInfo(fileName, prefix) {
      var self = this, info = nil, baseName = nil, $case = nil, $writer = nil;

      
      info = $hash2(["fileName", "gameType", "command"], {"fileName": fileName, "gameType": "", "command": ""});
      baseName = $$($nesting, 'File').$basename(fileName, ".txt");
      $case = baseName;
      if (new RegExp("" + "^" + (prefix) + "(.+)_(.+)_(.+)$")['$===']($case)) {
      
      $writer = ["command", $$($nesting, 'Regexp').$last_match(3)];
      $send(info, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = ["gameType", $rb_plus($rb_plus($$($nesting, 'Regexp').$last_match(1), ":"), $$($nesting, 'Regexp').$last_match(2))];
      $send(info, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;}
      else if (new RegExp("" + "^" + (prefix) + "(.+)_(.+)$")['$===']($case)) {
      
      $writer = ["command", $$($nesting, 'Regexp').$last_match(2)];
      $send(info, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = ["gameType", $$($nesting, 'Regexp').$last_match(1)];
      $send(info, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;}
      else if (new RegExp("" + "^" + (prefix) + "(.+)$")['$===']($case)) {
      
      $writer = ["command", $$($nesting, 'Regexp').$last_match(1)];
      $send(info, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = ["gameType", ""];
      $send(info, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;};
      return info;
    }, $TableFileData_readGameCommandInfo$5.$$arity = 2);
    
    Opal.def(self, '$getAllTableInfo', $TableFileData_getAllTableInfo$6 = function $$getAllTableInfo() {
      var $$7, self = this, result = nil;

      
      result = [];
      $send(self.tableData, 'each', [], ($$7 = function(_key, oneTableData){var self = $$7.$$s || this, tableData = nil;

      
        
        if (_key == null) {
          _key = nil;
        };
        
        if (oneTableData == null) {
          oneTableData = nil;
        };
        tableData = self.$readOneTableData(oneTableData);
        return result['$<<'](tableData);}, $$7.$$s = self, $$7.$$arity = 2, $$7));
      return result;
    }, $TableFileData_getAllTableInfo$6.$$arity = 0);
    
    Opal.def(self, '$getGameCommandInfos', $TableFileData_getGameCommandInfos$8 = function $$getGameCommandInfos() {
      var $$9, self = this, commandInfos = nil;

      
      commandInfos = [];
      $send(self.tableData, 'each', [], ($$9 = function(_command, info){var self = $$9.$$s || this, commandInfo = nil;

      
        
        if (_command == null) {
          _command = nil;
        };
        
        if (info == null) {
          info = nil;
        };
        commandInfo = $hash2(["gameType", "command"], {"gameType": info['$[]']("gameType"), "command": info['$[]']("command")});
        return commandInfos['$<<'](commandInfo);}, $$9.$$s = self, $$9.$$arity = 2, $$9));
      return commandInfos;
    }, $TableFileData_getGameCommandInfos$8.$$arity = 0);
    
    Opal.def(self, '$getTableDataFromFile', $TableFileData_getTableDataFromFile$10 = function $$getTableDataFromFile(fileName) {
      var $a, $b, $$11, self = this, table = nil, lines = nil, defineLine = nil, dice = nil, title = nil;

      
      table = [];
      lines = $send($$($nesting, 'File').$read(fileName).$toutf8().$lines(), 'map', [], "chomp".$to_proc());
      defineLine = lines.$shift();
      $b = self.$getDiceAndTitle(defineLine), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (title = ($a[1] == null ? nil : $a[1])), $b;
      $send(lines, 'each', [], ($$11 = function(line){var self = $$11.$$s || this, $c, $d, key = nil, value = nil;

      
        
        if (line == null) {
          line = nil;
        };
        $d = self.$getLineKeyValue(line), $c = Opal.to_ary($d), (key = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
        if ($truthy(key['$empty?']())) {
          return nil;};
        key = key.$to_i();
        return table['$<<']([key, value]);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
      return [dice, title, table];
    }, $TableFileData_getTableDataFromFile$10.$$arity = 1);
    
    Opal.def(self, '$getLineKeyValue', $TableFileData_getLineKeyValue$12 = function $$getLineKeyValue(line) {
      var self = this;

      return self.$class().$getLineKeyValue(line)
    }, $TableFileData_getLineKeyValue$12.$$arity = 1);
    Opal.defs(self, '$getLineKeyValue', $TableFileData_getLineKeyValue$13 = function $$getLineKeyValue(line) {
      var self = this, key = nil, value = nil;

      
      line = line.$toutf8().$chomp();
      if ($truthy(/^[\s　]*([^:：]+)[\s　]*[:：][\s　]*(.+)/['$==='](line))) {
      } else {
        return ["", ""]
      };
      key = $$($nesting, 'Regexp').$last_match(1);
      value = $$($nesting, 'Regexp').$last_match(2);
      return [key, value];
    }, $TableFileData_getLineKeyValue$13.$$arity = 1);
    
    Opal.def(self, '$getDiceAndTitle', $TableFileData_getDiceAndTitle$14 = function $$getDiceAndTitle(line) {
      var $a, $b, self = this, dice = nil, title = nil;

      
      $b = self.$getLineKeyValue(line), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (title = ($a[1] == null ? nil : $a[1])), $b;
      return [dice, title];
    }, $TableFileData_getDiceAndTitle$14.$$arity = 1);
    
    Opal.def(self, '$getTableData', $TableFileData_getTableData$15 = function $$getTableData(arg, targetGameType) {
      var $$16, self = this, oneTableData = nil, isSecret = nil, dice = nil, title = nil, table = nil;

      
      oneTableData = $hash2([], {});
      isSecret = false;
      (function(){var $brk = Opal.new_brk(); try {return $send(self.tableData.$keys(), 'each', [], ($$16 = function(fileName){var self = $$16.$$s || this, key = nil, data = nil, gameType = nil;
        if (self.tableData == null) self.tableData = nil;

      
        
        if (fileName == null) {
          fileName = nil;
        };
        if ($truthy(/.*_(.+)/['$==='](fileName))) {
        } else {
          return nil;
        };
        key = $$($nesting, 'Regexp').$last_match(1);
        if ($truthy(new RegExp("" + "^(s|S)?" + (key) + "(\\s|$)", 'i')['$==='](arg))) {
        } else {
          return nil;
        };
        data = self.tableData['$[]'](fileName);
        gameType = data['$[]']("gameType");
        if ($truthy(self.$isTargetGameType(gameType, targetGameType))) {
        } else {
          return nil;
        };
        oneTableData = data;
        isSecret = $$($nesting, 'Regexp').$last_match(1)['$nil?']()['$!']();
        
        Opal.brk(nil, $brk);}, $$16.$$s = self, $$16.$$brk = $brk, $$16.$$arity = 1, $$16))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      self.$readOneTableData(oneTableData);
      dice = oneTableData['$[]']("dice");
      title = oneTableData['$[]']("title");
      table = oneTableData['$[]']("table");
      table = self.$changeEnterCode(table);
      return [dice, title, table, isSecret];
    }, $TableFileData_getTableData$15.$$arity = 2);
    
    Opal.def(self, '$changeEnterCode', $TableFileData_changeEnterCode$17 = function $$changeEnterCode(table) {
      var $$18, self = this, newTable = nil;

      
      newTable = $hash2([], {});
      if ($truthy(table['$nil?']())) {
        return newTable};
      $send(table, 'each', [], ($$18 = function(key, value){var self = $$18.$$s || this, $writer = nil;

      
        
        if (key == null) {
          key = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        value = value.$gsub(/\\n/, "\n");
        value = value.$gsub(/\\\n/, "\\n");
        
        $writer = [key, value];
        $send(newTable, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;}, $$18.$$s = self, $$18.$$arity = 2, $$18));
      return newTable;
    }, $TableFileData_changeEnterCode$17.$$arity = 1);
    
    Opal.def(self, '$isTargetGameType', $TableFileData_isTargetGameType$19 = function $$isTargetGameType(gameType, targetGameType) {
      var self = this;

      
      if ($truthy(gameType['$empty?']())) {
        return true};
      return gameType['$=='](targetGameType);
    }, $TableFileData_isTargetGameType$19.$$arity = 2);
    return (Opal.def(self, '$readOneTableData', $TableFileData_readOneTableData$20 = function $$readOneTableData(oneTableData) {
      var $a, $b, self = this, command = nil, gameType = nil, fileName = nil, dice = nil, title = nil, table = nil, $writer = nil;

      
      if ($truthy(oneTableData['$nil?']())) {
        return nil};
      if ($truthy(oneTableData['$[]']("table")['$nil?']())) {
      } else {
        return nil
      };
      command = oneTableData['$[]']("command");
      gameType = oneTableData['$[]']("gameType");
      fileName = oneTableData['$[]']("fileName");
      if ($truthy(command['$nil?']())) {
        return nil};
      if ($truthy($$($nesting, 'File')['$exist?'](fileName))) {
      } else {
        return nil
      };
      $b = self.$getTableDataFromFile(fileName), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (title = ($a[1] == null ? nil : $a[1])), (table = ($a[2] == null ? nil : $a[2])), $b;
      
      $writer = ["dice", dice];
      $send(oneTableData, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = ["title", title];
      $send(oneTableData, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = ["table", table];
      $send(oneTableData, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return oneTableData;
    }, $TableFileData_readOneTableData$20.$$arity = 1), nil) && 'readOneTableData';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TableFileCreator');

    var $nesting = [self].concat($parent_nesting), $TableFileCreator_initialize$21, $TableFileCreator_execute$22, $TableFileCreator_checkFile$23, $TableFileCreator_checkFileNotExist$24, $TableFileCreator_checkFileExist$25, $TableFileCreator_getTableFileName$26, $TableFileCreator_initCommand$27, $TableFileCreator_checkCommand$28, $TableFileCreator_getTableText$29, $TableFileCreator_getFormatedTableText$30, $TableFileCreator_checkTableKey$32, $TableFileCreator_createFile$33;

    self.$$prototype.params = self.$$prototype.command = self.$$prototype.dir = self.$$prototype.prefix = nil;
    
    
    Opal.def(self, '$initialize', $TableFileCreator_initialize$21 = function $$initialize(dir, prefix, params) {
      var self = this;

      
      self.dir = dir;
      self.prefix = prefix;
      self.params = params;
      return (self.logger = $$$($$($nesting, 'DodontoF'), 'Logger').$instance());
    }, $TableFileCreator_initialize$21.$$arity = 3);
    
    Opal.def(self, '$execute', $TableFileCreator_execute$22 = function $$execute() {
      var self = this, fileName = nil, text = nil;

      
      fileName = self.$getTableFileName();
      self.$checkFile(fileName);
      text = self.$getTableText();
      return self.$createFile(fileName, text);
    }, $TableFileCreator_execute$22.$$arity = 0);
    
    Opal.def(self, '$checkFile', $TableFileCreator_checkFile$23 = function $$checkFile(fileName) {
      var self = this;

      return self.$checkFileNotExist(fileName)
    }, $TableFileCreator_checkFile$23.$$arity = 1);
    
    Opal.def(self, '$checkFileNotExist', $TableFileCreator_checkFileNotExist$24 = function $$checkFileNotExist(fileName) {
      var self = this;

      if ($truthy($$($nesting, 'File')['$exist?'](fileName))) {
        return self.$raise("commandNameAlreadyExist")
      } else {
        return nil
      }
    }, $TableFileCreator_checkFileNotExist$24.$$arity = 1);
    
    Opal.def(self, '$checkFileExist', $TableFileCreator_checkFileExist$25 = function $$checkFileExist(fileName) {
      var self = this;

      if ($truthy($$($nesting, 'File')['$exist?'](fileName))) {
        return nil
      } else {
        return self.$raise("commandNameIsNotExist")
      }
    }, $TableFileCreator_checkFileExist$25.$$arity = 1);
    
    Opal.def(self, '$getTableFileName', $TableFileCreator_getTableFileName$26 = function $$getTableFileName(command, gameType) {
      var $a, self = this, prefix2 = nil, fileName = nil;

      
      
      if (command == null) {
        command = nil;
      };
      
      if (gameType == null) {
        gameType = nil;
      };
      if ($truthy(gameType['$nil?']())) {
        gameType = self.params['$[]']("gameType")};
      gameType = ($truthy($a = gameType) ? $a : "");
      gameType = gameType.$gsub(":", "_");
      if ($truthy(command['$nil?']())) {
        
        self.$initCommand();
        command = self.command;};
      self.$checkCommand(command);
      prefix2 = "";
      if ($truthy(gameType['$empty?']())) {
      } else {
        prefix2 = "" + (gameType) + "_"
      };
      fileName = "" + (self.dir) + "/" + (self.prefix) + (prefix2) + (command) + ".txt";
      return fileName;
    }, $TableFileCreator_getTableFileName$26.$$arity = -1);
    
    Opal.def(self, '$initCommand', $TableFileCreator_initCommand$27 = function $$initCommand() {
      var $a, self = this;

      
      self.command = self.params['$[]']("command");
      self.command = ($truthy($a = self.command) ? $a : "");
      return self.command['$gsub!'](/\./, "_");
    }, $TableFileCreator_initCommand$27.$$arity = 0);
    
    Opal.def(self, '$checkCommand', $TableFileCreator_checkCommand$28 = function $$checkCommand(command) {
      var self = this;

      
      if ($truthy(command['$empty?']())) {
        self.$raise("commandNameIsEmpty")};
      if ($truthy(/^[a-zA-Z\d]+$/['$==='](command))) {
        return nil
      } else {
        return self.$raise("commandNameCanUseOnlyAlphabetAndNumber")
      };
    }, $TableFileCreator_checkCommand$28.$$arity = 1);
    
    Opal.def(self, '$getTableText', $TableFileCreator_getTableText$29 = function $$getTableText() {
      var self = this, dice = nil, title = nil, table = nil, text = nil;

      
      dice = self.params['$[]']("dice");
      title = self.params['$[]']("title");
      table = self.params['$[]']("table");
      text = "";
      text['$<<']("" + (dice) + ":" + (title) + "\n");
      if ($truthy(table['$is_a?']($$($nesting, 'String')))) {
      } else {
        table = self.$getFormatedTableText(table)
      };
      return text['$<<'](table);
    }, $TableFileCreator_getTableText$29.$$arity = 0);
    
    Opal.def(self, '$getFormatedTableText', $TableFileCreator_getFormatedTableText$30 = function $$getFormatedTableText(table) {
      var $$31, self = this, result = nil;

      
      result = "";
      $send(table, 'each_with_index', [], ($$31 = function(line, index){var self = $$31.$$s || this, $a, $b, key = nil, value = nil;

      
        
        if (line == null) {
          line = nil;
        };
        
        if (index == null) {
          index = nil;
        };
        $b = $$($nesting, 'TableFileData').$getLineKeyValue(line), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
        key['$tr!']("　", "");
        key['$tr!'](" ", "");
        key['$tr!']("０-９", "0-9");
        key = self.$checkTableKey(key, index);
        return result['$<<']((((("" + (key)) + ":") + (value)) + "\n").$toutf8());}, $$31.$$s = self, $$31.$$arity = 2, $$31));
      return result;
    }, $TableFileCreator_getFormatedTableText$30.$$arity = 1);
    
    Opal.def(self, '$checkTableKey', $TableFileCreator_checkTableKey$32 = function $$checkTableKey(key, index) {
      var self = this, keyValue = nil;

      
      if (key['$==']("0")) {
        return nil};
      keyValue = key.$to_i();
      if (keyValue['$=='](0)) {
        self.$raise("" + "tableFormatIsInvalid\t" + ($rb_plus(index, 1)) + "\t" + (key))};
      return keyValue;
    }, $TableFileCreator_checkTableKey$32.$$arity = 2);
    return (Opal.def(self, '$createFile', $TableFileCreator_createFile$33 = function $$createFile(fileName, text) {
      var $$34, self = this;

      return $send($$($nesting, 'File'), 'open', [fileName, "w+"], ($$34 = function(file){var self = $$34.$$s || this;

      
        
        if (file == null) {
          file = nil;
        };
        return file.$write(text);}, $$34.$$s = self, $$34.$$arity = 1, $$34))
    }, $TableFileCreator_createFile$33.$$arity = 2), nil) && 'createFile';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TableFileEditer');

    var $nesting = [self].concat($parent_nesting), $TableFileEditer_checkFile$35, $TableFileEditer_checkFileWhenFileNameNotChanged$36, $TableFileEditer_checkFileWhenFileNameChanged$37;

    self.$$prototype.params = self.$$prototype.originalCommand = self.$$prototype.command = self.$$prototype.originalGameType = self.$$prototype.gameType = nil;
    
    
    Opal.def(self, '$checkFile', $TableFileEditer_checkFile$35 = function $$checkFile(fileName) {
      var $a, self = this;

      
      self.originalCommand = self.params['$[]']("originalCommand");
      self.gameType = self.params['$[]']("gameType");
      self.originalGameType = self.params['$[]']("originalGameType");
      if ($truthy(($truthy($a = self.originalCommand['$=='](self.command)) ? self.originalGameType['$=='](self.gameType) : $a))) {
        return self.$checkFileWhenFileNameNotChanged(fileName)
      } else {
        return self.$checkFileWhenFileNameChanged(fileName)
      };
    }, $TableFileEditer_checkFile$35.$$arity = 1);
    
    Opal.def(self, '$checkFileWhenFileNameNotChanged', $TableFileEditer_checkFileWhenFileNameNotChanged$36 = function $$checkFileWhenFileNameNotChanged(fileName) {
      var self = this;

      return self.$checkFileExist(fileName)
    }, $TableFileEditer_checkFileWhenFileNameNotChanged$36.$$arity = 1);
    return (Opal.def(self, '$checkFileWhenFileNameChanged', $TableFileEditer_checkFileWhenFileNameChanged$37 = function $$checkFileWhenFileNameChanged(fileName) {
      var $a, self = this, originalCommand = nil, originalGameType = nil, originalFileName = nil, e = nil;

      
      originalCommand = self.originalCommand;
      originalCommand = ($truthy($a = originalCommand) ? $a : self.command);
      originalGameType = self.originalGameType;
      originalGameType = ($truthy($a = originalGameType) ? $a : self.gameType);
      originalFileName = self.$getTableFileName(originalCommand, originalGameType);
      self.$checkFileExist(originalFileName);
      self.$checkFileNotExist(fileName);
      
      try {
        return $$($nesting, 'FileUtils').$mv(originalFileName, fileName)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            return self.$raise("changeCommandNameFaild")
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
    }, $TableFileEditer_checkFileWhenFileNameChanged$37.$$arity = 1), nil) && 'checkFileWhenFileNameChanged';
  })($nesting[0], $$($nesting, 'TableFileCreator'), $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["diceBot/DiceBot"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$freeze', '$attr_reader', '$map', '$to_proc', '$join', '$private', '$clearPrefixes', '$!', '$empty?', '$prefixs', '$prefixes', '$class', '$warn', '$id', '$setPrefixes', '$attr_accessor', '$name', '$sort_key', '$help_message', '$attr_writer', '$rand', '$roll', '$marshalSignOfInequality', '$unlimitedRollDiceType', '$getD66Value', '$parren_killer', '$debug', '$isGetOriginalMessage', '$getOriginalMessage', '$=~', '$prefixesPattern', '$last_match', '$removeDiceCommandMessage', '$rollDiceCommandCatched', '$nil?', '$!=', '$sub', '$rollDiceCommand', '$to_s', '$backtrace', '$size', '$===', '$check_1D100', '$check_1D20', '$check_2D6', '$check_nD10', '$check_nD6', '$check_nDx', '$is_a?', '$==', '$send', '$get_table_by_nD6', '$get_table_by_nDx', '$getTableValue', '$[]', '$-', '$/', '$getD66', '$bcdice', '$get_table_by_number', '$+', '$*', '$<', '$each', '$>=', '$call', '$select', '$public_methods', '$upcase', '$to_i', '$getTableInfoFromExtraTableText', '$get_table_by_nDx_extratable', '$get_table_by_d66', '$div', '$%', '$get_table_by_d66_swap', '$raise', '$gsub', '$rollTableMessageDiceText', '$split', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBot');

    var $nesting = [self].concat($parent_nesting), $DiceBot_initialize$4, $DiceBot_postSet$5, $DiceBot_info$6, $DiceBot_id$7, $DiceBot_gameType$8, $DiceBot_name$9, $DiceBot_gameName$10, $DiceBot_sort_key$11, $DiceBot_help_message$12, $DiceBot_getHelpMessage$13, $DiceBot_prefixes$14, $DiceBot_setSendMode$15, $DiceBot_bcdice$eq$16, $DiceBot_bcdice$17, $DiceBot_rand$18, $DiceBot_roll$19, $DiceBot_marshalSignOfInequality$20, $DiceBot_unlimitedRollDiceType$21, $DiceBot_setSortType$22, $DiceBot_d66$23, $DiceBot_parren_killer$24, $DiceBot_changeText$25, $DiceBot_dice_command$26, $DiceBot_isGetOriginalMessage$27, $DiceBot_removeDiceCommandMessage$28, $DiceBot_rollDiceCommandCatched$29, $DiceBot_rollDiceCommand$30, $DiceBot_dice_command_xRn$31, $DiceBot_check_result$32, $DiceBot_check_nDx$33, $DiceBot_check_1D100$34, $DiceBot_check_1D20$35, $DiceBot_check_nD10$36, $DiceBot_check_2D6$37, $DiceBot_check_nD6$38, $DiceBot_get_table_by_2d6$39, $DiceBot_get_table_by_1d6$40, $DiceBot_get_table_by_nD6$41, $DiceBot_get_table_by_nDx$42, $DiceBot_get_table_by_1d3$43, $DiceBot_getD66$44, $DiceBot_get_table_by_d66_swap$45, $DiceBot_get_table_by_d66$46, $DiceBot_getDiceRolledAdditionalText$47, $DiceBot_getDiceRevision$48, $DiceBot_isD9$49, $DiceBot_getGrichText$50, $DiceBot_should_reroll$ques$51, $DiceBot_get_table_by_number$52, $DiceBot_getTableValue$54, $DiceBot_analyzeDiceCommandResultMethod$55, $DiceBot_get_table_by_nDx_extratable$58, $DiceBot_getTableCommandResult$59, $DiceBot_getTableInfoFromExtraTableText$60, $DiceBot_roll_tables$62;

    self.$$prototype.rerollLimitCount = self.$$prototype.d66Type = nil;
    
    Opal.const_set($nesting[0], 'EMPTY_PREFIXES_PATTERN', /(^|\s)(S)?()(\s|$)/i.$freeze());
    Opal.const_set($nesting[0], 'ID', "DiceBot");
    Opal.const_set($nesting[0], 'NAME', "DiceBot");
    Opal.const_set($nesting[0], 'SORT_KEY', "*たいすほつと");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "");
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $setPrefixes$1, $clearPrefixes$2, $inherited$3;

      
      self.$attr_reader("prefixes");
      self.$attr_reader("prefixesPattern");
      
      Opal.def(self, '$setPrefixes', $setPrefixes$1 = function $$setPrefixes(prefixes) {
        var self = this;

        
        self.prefixes = $send(prefixes, 'map', [], "freeze".$to_proc()).$freeze();
        self.prefixesPattern = new RegExp("" + "(^|\\s)(S)?(" + (prefixes.$join("|")) + ")(\\s|$)", 'i').$freeze();
        return self;
      }, $setPrefixes$1.$$arity = 1);
      
      Opal.def(self, '$clearPrefixes', $clearPrefixes$2 = function $$clearPrefixes() {
        var self = this;

        
        self.prefixes = [].$freeze();
        self.prefixesPattern = $$($nesting, 'EMPTY_PREFIXES_PATTERN');
        return self;
      }, $clearPrefixes$2.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$inherited', $inherited$3 = function $$inherited(subclass) {
        var self = this;

        return subclass.$clearPrefixes()
      }, $inherited$3.$$arity = 1), nil) && 'inherited';
    })(Opal.get_singleton_class(self), $nesting);
    self.$clearPrefixes();
    (Opal.class_variable_set($nesting[0], '@@bcdice', nil));
    Opal.const_set($nesting[0], 'DEFAULT_SEND_MODE', 2);
    
    Opal.def(self, '$initialize', $DiceBot_initialize$4 = function $$initialize() {
      var $a, self = this;

      
      self.sendMode = $$($nesting, 'DEFAULT_SEND_MODE');
      self.sortType = 0;
      self.sameDiceRerollCount = 0;
      self.sameDiceRerollType = 0;
      self.d66Type = 1;
      self.isPrintMaxDice = false;
      self.upperRollThreshold = 0;
      self.unlimitedRollDiceType = 0;
      self.rerollNumber = 0;
      self.defaultSuccessTarget = "";
      self.rerollLimitCount = 10000;
      self.fractionType = "omit";
      if ($truthy(($truthy($a = self.$prefixs()['$empty?']()['$!']()) ? self.$class().$prefixes()['$empty?']() : $a))) {
        
        self.$warn("" + (self.$id()) + ": #prefixs is deprecated. Please use .setPrefixes.");
        return self.$class().$setPrefixes(self.$prefixs());
      } else {
        return nil
      };
    }, $DiceBot_initialize$4.$$arity = 0);
    self.$attr_accessor("rerollLimitCount");
    self.$attr_reader("sendMode", "sameDiceRerollCount", "sameDiceRerollType", "d66Type");
    self.$attr_reader("isPrintMaxDice", "upperRollThreshold");
    self.$attr_reader("defaultSuccessTarget", "rerollNumber", "fractionType");
    
    Opal.def(self, '$postSet', $DiceBot_postSet$5 = function $$postSet() {
      var self = this;

      return nil
    }, $DiceBot_postSet$5.$$arity = 0);
    
    Opal.def(self, '$info', $DiceBot_info$6 = function $$info() {
      var self = this;

      return $hash2(["gameType", "name", "sortKey", "prefixs", "info"], {"gameType": self.$id(), "name": self.$name(), "sortKey": self.$sort_key(), "prefixs": self.$class().$prefixes(), "info": self.$help_message()})
    }, $DiceBot_info$6.$$arity = 0);
    
    Opal.def(self, '$id', $DiceBot_id$7 = function $$id() {
      var self = this;

      return $$$(self.$class(), 'ID')
    }, $DiceBot_id$7.$$arity = 0);
    
    Opal.def(self, '$gameType', $DiceBot_gameType$8 = function $$gameType() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #gameType is deprecated. Please use #id.");
      return self.$id();
    }, $DiceBot_gameType$8.$$arity = 0);
    
    Opal.def(self, '$name', $DiceBot_name$9 = function $$name() {
      var self = this;

      return $$$(self.$class(), 'NAME')
    }, $DiceBot_name$9.$$arity = 0);
    
    Opal.def(self, '$gameName', $DiceBot_gameName$10 = function $$gameName() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #gameName is deprecated. Please use #name.");
      return self.$name();
    }, $DiceBot_gameName$10.$$arity = 0);
    
    Opal.def(self, '$sort_key', $DiceBot_sort_key$11 = function $$sort_key() {
      var self = this;

      return $$$(self.$class(), 'SORT_KEY')
    }, $DiceBot_sort_key$11.$$arity = 0);
    
    Opal.def(self, '$help_message', $DiceBot_help_message$12 = function $$help_message() {
      var self = this;

      return $$$(self.$class(), 'HELP_MESSAGE')
    }, $DiceBot_help_message$12.$$arity = 0);
    
    Opal.def(self, '$getHelpMessage', $DiceBot_getHelpMessage$13 = function $$getHelpMessage() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #getHelpMessage is deprecated. Please use #help_message.");
      return self.$help_message();
    }, $DiceBot_getHelpMessage$13.$$arity = 0);
    
    Opal.def(self, '$prefixes', $DiceBot_prefixes$14 = function $$prefixes() {
      var self = this;

      return self.$class().$prefixes()
    }, $DiceBot_prefixes$14.$$arity = 0);
    Opal.alias(self, "prefixs", "prefixes");
    
    Opal.def(self, '$setSendMode', $DiceBot_setSendMode$15 = function $$setSendMode(m) {
      var self = this;

      return (self.sendMode = m)
    }, $DiceBot_setSendMode$15.$$arity = 1);
    self.$attr_writer("upperRollThreshold");
    
    Opal.def(self, '$bcdice=', $DiceBot_bcdice$eq$16 = function(b) {
      var self = this;

      return (Opal.class_variable_set($nesting[0], '@@bcdice', b))
    }, $DiceBot_bcdice$eq$16.$$arity = 1);
    
    Opal.def(self, '$bcdice', $DiceBot_bcdice$17 = function $$bcdice() {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a)
    }, $DiceBot_bcdice$17.$$arity = 0);
    
    Opal.def(self, '$rand', $DiceBot_rand$18 = function $$rand(max) {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$rand(max)
    }, $DiceBot_rand$18.$$arity = 1);
    
    Opal.def(self, '$roll', $DiceBot_roll$19 = function $$roll($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'roll', Opal.to_a(args));
    }, $DiceBot_roll$19.$$arity = -1);
    
    Opal.def(self, '$marshalSignOfInequality', $DiceBot_marshalSignOfInequality$20 = function $$marshalSignOfInequality($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'marshalSignOfInequality', Opal.to_a(args));
    }, $DiceBot_marshalSignOfInequality$20.$$arity = -1);
    
    Opal.def(self, '$unlimitedRollDiceType', $DiceBot_unlimitedRollDiceType$21 = function $$unlimitedRollDiceType() {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$unlimitedRollDiceType()
    }, $DiceBot_unlimitedRollDiceType$21.$$arity = 0);
    self.$attr_reader("sortType");
    
    Opal.def(self, '$setSortType', $DiceBot_setSortType$22 = function $$setSortType(s) {
      var self = this;

      return (self.sortType = s)
    }, $DiceBot_setSortType$22.$$arity = 1);
    
    Opal.def(self, '$d66', $DiceBot_d66$23 = function $$d66($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'getD66Value', Opal.to_a(args));
    }, $DiceBot_d66$23.$$arity = -1);
    
    Opal.def(self, '$parren_killer', $DiceBot_parren_killer$24 = function $$parren_killer(string) {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$parren_killer(string)
    }, $DiceBot_parren_killer$24.$$arity = 1);
    
    Opal.def(self, '$changeText', $DiceBot_changeText$25 = function $$changeText(string) {
      var self = this;

      
      self.$debug("DiceBot.parren_killer_add called");
      return string;
    }, $DiceBot_changeText$25.$$arity = 1);
    
    Opal.def(self, '$dice_command', $DiceBot_dice_command$26 = function $$dice_command(string, nick_e) {
      var $a, $b, self = this, secret_flg = nil, secretMarker = nil, command = nil, output_msg = nil;

      
      if ($truthy(self.$isGetOriginalMessage())) {
        string = (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$getOriginalMessage()};
      self.$debug("dice_command Begin string", string);
      secret_flg = false;
      if ($truthy(self.$class().$prefixesPattern()['$=~'](string))) {
      } else {
        
        self.$debug("not match in prefixes");
        return ["1", secret_flg];
      };
      secretMarker = $$($nesting, 'Regexp').$last_match(2);
      command = $$($nesting, 'Regexp').$last_match(3);
      command = self.$removeDiceCommandMessage(command);
      self.$debug("dicebot after command", command);
      self.$debug("match");
      $b = self.$rollDiceCommandCatched(command), $a = Opal.to_ary($b), (output_msg = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(($truthy($a = output_msg['$nil?']()) ? $a : output_msg['$empty?']()))) {
        output_msg = "1"};
      secret_flg = ($truthy($a = secret_flg) ? $a : false);
      if ($truthy(output_msg['$!=']("1"))) {
        output_msg = "" + (nick_e) + ": " + (output_msg)};
      if ($truthy(secretMarker)) {
        if ($truthy(output_msg['$!=']("1"))) {
          secret_flg = true}};
      return [output_msg, secret_flg];
    }, $DiceBot_dice_command$26.$$arity = 2);
    
    Opal.def(self, '$isGetOriginalMessage', $DiceBot_isGetOriginalMessage$27 = function $$isGetOriginalMessage() {
      var self = this;

      return false
    }, $DiceBot_isGetOriginalMessage$27.$$arity = 0);
    
    Opal.def(self, '$removeDiceCommandMessage', $DiceBot_removeDiceCommandMessage$28 = function $$removeDiceCommandMessage(command) {
      var self = this;

      return command.$sub(/[\s　].+/, "")
    }, $DiceBot_removeDiceCommandMessage$28.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommandCatched', $DiceBot_rollDiceCommandCatched$29 = function $$rollDiceCommandCatched(command) {
      var $a, $b, self = this, result = nil, secret_flg = nil, e = nil;

      
      result = nil;
      
      try {
        
        self.$debug("call rollDiceCommand command", command);
        $b = self.$rollDiceCommand(command), $a = Opal.to_ary($b), (result = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            self.$debug("executeCommand exception", e.$to_s(), e.$backtrace().$join("\n"))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      self.$debug("rollDiceCommand result", result);
      return [result, secret_flg];
    }, $DiceBot_rollDiceCommandCatched$29.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommand', $DiceBot_rollDiceCommand$30 = function $$rollDiceCommand(_command) {
      var self = this;

      return nil
    }, $DiceBot_rollDiceCommand$30.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $DiceBot_dice_command_xRn$31 = function $$dice_command_xRn(_string, _nick_e) {
      var self = this;

      return ""
    }, $DiceBot_dice_command_xRn$31.$$arity = 2);
    
    Opal.def(self, '$check_result', $DiceBot_check_result$32 = function $$check_result(total, dice_total, dice_list, sides, cmp_op, target) {
      var $a, self = this, ret = nil, $case = nil;

      
      ret = (function() {$case = [dice_list.$size(), sides];
      if ([1, 100]['$===']($case)) {return self.$check_1D100(total, dice_total, cmp_op, target)}
      else if ([1, 20]['$===']($case)) {return self.$check_1D20(total, dice_total, cmp_op, target)}
      else if ([2, 6]['$===']($case)) {return self.$check_2D6(total, dice_total, dice_list, cmp_op, target)}
      else { return nil }})();
      if ($truthy(($truthy($a = ret['$nil?']()) ? $a : ret['$empty?']()))) {
      } else {
        return ret
      };
      ret = (function() {$case = sides;
      if ((10)['$===']($case)) {return self.$check_nD10(total, dice_total, dice_list, cmp_op, target)}
      else if ((6)['$===']($case)) {return self.$check_nD6(total, dice_total, dice_list, cmp_op, target)}
      else { return nil }})();
      if ($truthy(($truthy($a = ret['$nil?']()) ? $a : ret['$empty?']()))) {
      } else {
        return ret
      };
      return self.$check_nDx(total, cmp_op, target);
    }, $DiceBot_check_result$32.$$arity = 6);
    
    Opal.def(self, '$check_nDx', $DiceBot_check_nDx$33 = function $$check_nDx(total, cmp_op, target) {
      var self = this, success = nil;

      
      if ($truthy(target['$is_a?']($$($nesting, 'String')))) {
        return " ＞ 失敗"};
      success = (function() {if (cmp_op['$==']("!=")) {
        return total['$!='](target)
      } else {
        return total.$send(cmp_op, target)
      }; return nil; })();
      if ($truthy(success)) {
        return " ＞ 成功"
      } else {
        return " ＞ 失敗"
      };
    }, $DiceBot_check_nDx$33.$$arity = 3);
    
    Opal.def(self, '$check_1D100', $DiceBot_check_1D100$34 = function $$check_1D100(total, dice_total, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_1D100$34.$$arity = 4);
    
    Opal.def(self, '$check_1D20', $DiceBot_check_1D20$35 = function $$check_1D20(total, dice_total, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_1D20$35.$$arity = 4);
    
    Opal.def(self, '$check_nD10', $DiceBot_check_nD10$36 = function $$check_nD10(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_nD10$36.$$arity = 5);
    
    Opal.def(self, '$check_2D6', $DiceBot_check_2D6$37 = function $$check_2D6(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_2D6$37.$$arity = 5);
    
    Opal.def(self, '$check_nD6', $DiceBot_check_nD6$38 = function $$check_nD6(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_nD6$38.$$arity = 5);
    
    Opal.def(self, '$get_table_by_2d6', $DiceBot_get_table_by_2d6$39 = function $$get_table_by_2d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 2)
    }, $DiceBot_get_table_by_2d6$39.$$arity = 1);
    
    Opal.def(self, '$get_table_by_1d6', $DiceBot_get_table_by_1d6$40 = function $$get_table_by_1d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 1)
    }, $DiceBot_get_table_by_1d6$40.$$arity = 1);
    
    Opal.def(self, '$get_table_by_nD6', $DiceBot_get_table_by_nD6$41 = function $$get_table_by_nD6(table, count) {
      var self = this;

      return self.$get_table_by_nDx(table, count, 6)
    }, $DiceBot_get_table_by_nD6$41.$$arity = 2);
    
    Opal.def(self, '$get_table_by_nDx', $DiceBot_get_table_by_nDx$42 = function $$get_table_by_nDx(table, count, diceType) {
      var $a, $b, self = this, num = nil, text = nil;

      
      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(num, count)));
      if ($truthy(text['$nil?']())) {
        return ["1", 0]};
      return [text, num];
    }, $DiceBot_get_table_by_nDx$42.$$arity = 3);
    
    Opal.def(self, '$get_table_by_1d3', $DiceBot_get_table_by_1d3$43 = function $$get_table_by_1d3(table) {
      var $a, $b, self = this, count = nil, num = nil, index = nil, text = nil;

      
      self.$debug("get_table_by_1d3");
      count = 1;
      $b = self.$roll(count, 6), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;
      self.$debug("num", num);
      index = $rb_divide($rb_minus(num, 1), 2);
      self.$debug("index", index);
      text = table['$[]'](index);
      if ($truthy(text['$nil?']())) {
        return ["1", 0]};
      return [text, num];
    }, $DiceBot_get_table_by_1d3$43.$$arity = 1);
    
    Opal.def(self, '$getD66', $DiceBot_getD66$44 = function $$getD66(isSwap) {
      var self = this;

      return self.$bcdice().$getD66(isSwap)
    }, $DiceBot_getD66$44.$$arity = 1);
    
    Opal.def(self, '$get_table_by_d66_swap', $DiceBot_get_table_by_d66_swap$45 = function $$get_table_by_d66_swap(table) {
      var self = this, isSwap = nil, number = nil;

      
      isSwap = true;
      number = self.$bcdice().$getD66(isSwap);
      return [self.$get_table_by_number(number, table), number];
    }, $DiceBot_get_table_by_d66_swap$45.$$arity = 1);
    
    Opal.def(self, '$get_table_by_d66', $DiceBot_get_table_by_d66$46 = function $$get_table_by_d66(table) {
      var $a, $b, self = this, dice1 = nil, dice2 = nil, num = nil, text = nil, indexText = nil;

      
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), $b;
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice2 = ($a[0] == null ? nil : $a[0])), $b;
      num = $rb_plus($rb_times($rb_minus(dice1, 1), 6), $rb_minus(dice2, 1));
      text = table['$[]'](num);
      indexText = "" + (dice1) + (dice2);
      if ($truthy(text['$nil?']())) {
        return ["1", indexText]};
      return [text, indexText];
    }, $DiceBot_get_table_by_d66$46.$$arity = 1);
    
    Opal.def(self, '$getDiceRolledAdditionalText', $DiceBot_getDiceRolledAdditionalText$47 = function $$getDiceRolledAdditionalText(_n1, _n_max, _dice_max) {
      var self = this;

      return ""
    }, $DiceBot_getDiceRolledAdditionalText$47.$$arity = 3);
    
    Opal.def(self, '$getDiceRevision', $DiceBot_getDiceRevision$48 = function $$getDiceRevision(_n_max, _dice_max, _total_n) {
      var self = this;

      return ["", 0]
    }, $DiceBot_getDiceRevision$48.$$arity = 3);
    
    Opal.def(self, '$isD9', $DiceBot_isD9$49 = function $$isD9() {
      var self = this;

      return false
    }, $DiceBot_isD9$49.$$arity = 0);
    
    Opal.def(self, '$getGrichText', $DiceBot_getGrichText$50 = function $$getGrichText(_numberSpot1, _dice_cnt_total, _suc) {
      var self = this;

      return ""
    }, $DiceBot_getGrichText$50.$$arity = 3);
    
    Opal.def(self, '$should_reroll?', $DiceBot_should_reroll$ques$51 = function(loop_count) {
      var $a, self = this;

      return ($truthy($a = $rb_lt(loop_count, self.rerollLimitCount)) ? $a : self.rerollLimitCount['$=='](0))
    }, $DiceBot_should_reroll$ques$51.$$arity = 1);
    
    Opal.def(self, '$get_table_by_number', $DiceBot_get_table_by_number$52 = function $$get_table_by_number(index, table, default$) {try {

      var $$53, self = this;

      
      
      if (default$ == null) {
        default$ = "1";
      };
      $send(table, 'each', [], ($$53 = function(item){var self = $$53.$$s || this, number = nil;

      
        
        if (item == null) {
          item = nil;
        };
        number = item['$[]'](0);
        if ($truthy($rb_ge(number, index))) {
          Opal.ret(self.$getTableValue(item['$[]'](1)))
        } else {
          return nil
        };}, $$53.$$s = self, $$53.$$arity = 1, $$53));
      return self.$getTableValue(default$);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_get_table_by_number$52.$$arity = -3);
    
    Opal.def(self, '$getTableValue', $DiceBot_getTableValue$54 = function $$getTableValue(data) {
      var self = this;

      
      if ($truthy(data['$is_a?']($$($nesting, 'Proc')))) {
        return data.$call()};
      return data;
    }, $DiceBot_getTableValue$54.$$arity = 1);
    
    Opal.def(self, '$analyzeDiceCommandResultMethod', $DiceBot_analyzeDiceCommandResultMethod$55 = function $$analyzeDiceCommandResultMethod(command) {try {

      var $$56, $$57, self = this, methodList = nil;

      
      methodList = $send(self.$public_methods(false), 'select', [], ($$56 = function(method){var self = $$56.$$s || this;

      
        
        if (method == null) {
          method = nil;
        };
        return /^get.+DiceCommandResult$/['$==='](method.$to_s());}, $$56.$$s = self, $$56.$$arity = 1, $$56));
      $send(methodList, 'each', [], ($$57 = function(method){var self = $$57.$$s || this, result = nil;

      
        
        if (method == null) {
          method = nil;
        };
        result = self.$send(method, command);
        if ($truthy(result['$nil?']())) {
          return nil
        } else {
          Opal.ret(result)
        };}, $$57.$$s = self, $$57.$$arity = 1, $$57));
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_analyzeDiceCommandResultMethod$55.$$arity = 1);
    
    Opal.def(self, '$get_table_by_nDx_extratable', $DiceBot_get_table_by_nDx_extratable$58 = function $$get_table_by_nDx_extratable(table, count, diceType) {
      var $a, $b, self = this, number = nil, diceText = nil, text = nil;

      
      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(number, count)));
      return [text, number, diceText];
    }, $DiceBot_get_table_by_nDx_extratable$58.$$arity = 3);
    
    Opal.def(self, '$getTableCommandResult', $DiceBot_getTableCommandResult$59 = function $$getTableCommandResult(command, tables, isPrintDiceText) {
      var $a, $b, $c, $d, self = this, info = nil, name = nil, type = nil, table = nil, $case = nil, count = nil, diceType = nil, limit = nil, item = nil, value = nil, output = nil, diceText = nil, text = nil, number = nil;

      
      
      if (isPrintDiceText == null) {
        isPrintDiceText = true;
      };
      info = tables['$[]'](command);
      if ($truthy(info['$nil?']())) {
        return nil};
      name = info['$[]']("name");
      type = info['$[]']("type").$upcase();
      table = info['$[]']("table");
      if ($truthy(($truthy($a = type['$==']("D66")) ? self.d66Type['$=='](2) : $a))) {
        type = "D66S"};
      $b = (function() {$case = type;
      if (/(\d+)D(\d+)/['$===']($case)) {
      count = $$($nesting, 'Regexp').$last_match(1).$to_i();
      diceType = $$($nesting, 'Regexp').$last_match(2).$to_i();
      limit = $rb_minus($rb_times(diceType, count), $rb_minus(count, 1));
      table = self.$getTableInfoFromExtraTableText(table, limit);
      return self.$get_table_by_nDx_extratable(table, count, diceType);}
      else if ("D66"['$===']($case) || "D66N"['$===']($case)) {
      table = self.$getTableInfoFromExtraTableText(table, 36);
      $d = self.$get_table_by_d66(table), $c = Opal.to_ary($d), (item = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
      value = value.$to_i();
      output = item['$[]'](1);
      diceText = $rb_plus($rb_plus(value.$div(10).$to_s(), ","), value['$%'](10).$to_s());
      return [output, value, diceText];}
      else if ("D66S"['$===']($case)) {
      table = self.$getTableInfoFromExtraTableText(table, 21);
      $d = self.$get_table_by_d66_swap(table), $c = Opal.to_ary($d), (output = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
      value = value.$to_i();
      diceText = $rb_plus($rb_plus(value.$div(10).$to_s(), ","), value['$%'](10).$to_s());
      return [output, value, diceText];}
      else {return self.$raise("" + "invalid dice Type " + (command))}})(), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), (diceText = ($a[2] == null ? nil : $a[2])), $b;
      text = text.$gsub("\\n", "\n");
      text = (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$rollTableMessageDiceText(text);
      if ($truthy(text['$nil?']())) {
        return nil};
      if ($truthy(($truthy($a = isPrintDiceText) ? diceText['$nil?']()['$!']() : $a))) {
        return "" + (name) + "(" + (number) + "[" + (diceText) + "]) ＞ " + (text)};
      return "" + (name) + "(" + (number) + ") ＞ " + (text);
    }, $DiceBot_getTableCommandResult$59.$$arity = -3);
    
    Opal.def(self, '$getTableInfoFromExtraTableText', $DiceBot_getTableInfoFromExtraTableText$60 = function $$getTableInfoFromExtraTableText(text, count) {
      var $$61, self = this, newTable = nil;

      
      
      if (count == null) {
        count = nil;
      };
      if ($truthy(text['$is_a?']($$($nesting, 'String')))) {
        text = text.$split(/\n/)};
      newTable = $send(text, 'map', [], ($$61 = function(item){var self = $$61.$$s || this, $a;

      
        
        if (item == null) {
          item = nil;
        };
        if ($truthy(($truthy($a = item['$is_a?']($$($nesting, 'String'))) ? /^(\d+):(.*)/['$==='](item) : $a))) {
          return [$$($nesting, 'Regexp').$last_match(1).$to_i(), $$($nesting, 'Regexp').$last_match(2)]
        } else {
          return item
        };}, $$61.$$s = self, $$61.$$arity = 1, $$61));
      if ($truthy(count['$nil?']())) {
      } else if ($truthy(newTable.$size()['$!='](count))) {
        self.$raise("" + "invalid table size:" + (newTable.$size()) + "\n" + (newTable.$inspect()))};
      return newTable;
    }, $DiceBot_getTableInfoFromExtraTableText$60.$$arity = -2);
    return (Opal.def(self, '$roll_tables', $DiceBot_roll_tables$62 = function $$roll_tables(command, tables) {
      var self = this, table = nil;

      
      table = tables['$[]'](command);
      if ($truthy(table)) {
      } else {
        return nil
      };
      return table.$roll(self.$bcdice()).$to_s();
    }, $DiceBot_roll_tables$62.$$arity = 2), nil) && 'roll_tables';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["diceBot/DiceBotLoader"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$freeze', '$===', '$!', '$include?', '$debug', '$validGameType?', '$expand_path', '$dirname', '$exist?', '$require', '$new', '$const_get', '$to_s', '$glob', '$map', '$basename', '$select', '$-', '$sort_by', '$to_proc', '$downcase', '$[]', '$raise', '$first', '$each']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBotLoader');

    var $nesting = [self].concat($parent_nesting), $DiceBotLoader_validGameType$ques$1, $DiceBotLoader_loadUnknownGame$2, $DiceBotLoader_collectDiceBots$3, $DiceBotLoader_initialize$7, $DiceBotLoader_match$ques$8, $DiceBotLoader_loadDiceBot$9;

    self.$$prototype.filenames = self.$$prototype.gameTitlePattern = self.$$prototype.diceBotClass = nil;
    
    Opal.const_set($nesting[0], 'BOT_NAME_PATTERN', /^[A-Z]\w*$/.$freeze());
    Opal.const_set($nesting[0], 'BOT_NAMES_TO_IGNORE', ["DiceBot", "DiceBotLoader", "DiceBotLoaderList"].$freeze());
    Opal.defs(self, '$validGameType?', $DiceBotLoader_validGameType$ques$1 = function(gameType) {
      var $a, self = this;

      return ($truthy($a = $$($nesting, 'BOT_NAME_PATTERN')['$==='](gameType)) ? $$($nesting, 'BOT_NAMES_TO_IGNORE')['$include?'](gameType)['$!']() : $a)
    }, $DiceBotLoader_validGameType$ques$1.$$arity = 1);
    Opal.defs(self, '$loadUnknownGame', $DiceBotLoader_loadUnknownGame$2 = function $$loadUnknownGame(gameType) {
      var self = this, fileName = nil, e = nil;

      
      self.$debug("DiceBotLoader.loadUnknownGame gameType", gameType);
      if ($truthy(self['$validGameType?'](gameType))) {
      } else {
        
        self.$debug("DiceBotLoader.loadUnknownGame: 無効なゲームタイプ", gameType);
        return nil;
      };
      fileName = $$($nesting, 'File').$expand_path("" + (gameType) + ".rb", $$($nesting, 'File').$dirname("diceBot/DiceBotLoader.rb"));
      if ($truthy($$($nesting, 'File')['$exist?'](fileName))) {
      } else {
        
        self.$debug("DiceBotLoader.loadUnknownGame: ダイスボットファイルが存在しません", gameType);
        return nil;
      };
      
      try {
        
        self.$require(fileName);
        return $$($nesting, 'Object').$const_get(gameType).$new();
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'LoadError'), $$($nesting, 'StandardError')])) {e = $err;
          try {
            
            self.$debug("DiceBotLoader.loadUnknownGame: ダイスボットの読み込みに失敗しました", e.$to_s());
            return nil;
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
    }, $DiceBotLoader_loadUnknownGame$2.$$arity = 1);
    Opal.defs(self, '$collectDiceBots', $DiceBotLoader_collectDiceBots$3 = function $$collectDiceBots() {
      var $$4, $$5, $$6, self = this, diceBotDir = nil, botFiles = nil, botNames = nil, validBotNames = nil, bots = nil;

      
      diceBotDir = $$($nesting, 'File').$expand_path($$($nesting, 'File').$dirname("diceBot/DiceBotLoader.rb"));
      self.$require("" + (diceBotDir) + "/DiceBot");
      botFiles = $$($nesting, 'Dir').$glob("" + (diceBotDir) + "/*.rb");
      botNames = $send(botFiles, 'map', [], ($$4 = function(botFile){var self = $$4.$$s || this;

      
        
        if (botFile == null) {
          botFile = nil;
        };
        return $$($nesting, 'File').$basename(botFile, ".rb");}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      validBotNames = $send($rb_minus(botNames, $$($nesting, 'BOT_NAMES_TO_IGNORE')), 'select', [], ($$5 = function(botName){var self = $$5.$$s || this;

      
        
        if (botName == null) {
          botName = nil;
        };
        return $$($nesting, 'BOT_NAME_PATTERN')['$==='](botName);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      bots = $send(validBotNames, 'map', [], ($$6 = function(botName){var self = $$6.$$s || this;

      
        
        if (botName == null) {
          botName = nil;
        };
        self.$require("" + (diceBotDir) + "/" + (botName));
        return $$($nesting, 'Object').$const_get(botName).$new();}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      return $send(bots, 'sort_by', [], "sort_key".$to_proc());
    }, $DiceBotLoader_collectDiceBots$3.$$arity = 0);
    
    Opal.def(self, '$initialize', $DiceBotLoader_initialize$7 = function $$initialize(gameTitlePattern, options) {
      var $a, self = this, $case = nil, defaultFilenames = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      $case = gameTitlePattern;
      if ($$($nesting, 'String')['$===']($case)) {self.gameTitlePattern = [gameTitlePattern.$downcase()]}
      else if ($$($nesting, 'Array')['$===']($case)) {self.gameTitlePattern = $send(gameTitlePattern, 'map', [], "downcase".$to_proc())}
      else if ($$($nesting, 'Regexp')['$===']($case)) {
      if ($truthy(options['$[]']("filenames"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "options[:filenames] is required when gameTitlePattern is a Regexp")
      };
      self.gameTitlePattern = gameTitlePattern;}
      else {self.$raise($$($nesting, 'TypeError'), "gameTitlePattern must be a String or an Array<String> or a Regexp")};
      defaultFilenames = (function() {$case = gameTitlePattern;
      if ($$($nesting, 'String')['$===']($case)) {return [gameTitlePattern]}
      else if ($$($nesting, 'Array')['$===']($case)) {return [gameTitlePattern.$first()]}
      else if ($$($nesting, 'Regexp')['$===']($case)) {return []}
      else { return nil }})();
      self.filenames = ($truthy($a = options['$[]']("filenames")) ? $a : defaultFilenames);
      return (self.diceBotClass = ($truthy($a = options['$[]']("class")) ? $a : self.filenames.$first()));
    }, $DiceBotLoader_initialize$7.$$arity = -2);
    
    Opal.def(self, '$match?', $DiceBotLoader_match$ques$8 = function(gameTitle) {
      var self = this, $case = nil;

      return (function() {$case = self.gameTitlePattern;
      if ($$($nesting, 'Array')['$===']($case)) {return self.gameTitlePattern['$include?'](gameTitle.$downcase())}
      else if ($$($nesting, 'Regexp')['$===']($case)) {return self.gameTitlePattern['$==='](gameTitle)}
      else { return nil }})()
    }, $DiceBotLoader_match$ques$8.$$arity = 1);
    return (Opal.def(self, '$loadDiceBot', $DiceBotLoader_loadDiceBot$9 = function $$loadDiceBot() {
      var $$10, self = this;

      
      $send(self.filenames, 'each', [], ($$10 = function(filename){var self = $$10.$$s || this, require_path = nil;

      
        
        if (filename == null) {
          filename = nil;
        };
        require_path = $$($nesting, 'File').$expand_path(filename, $$($nesting, 'File').$dirname("diceBot/DiceBotLoader.rb"));
        return self.$require(require_path);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
      return $$($nesting, 'Object').$const_get(self.diceBotClass).$new();
    }, $DiceBotLoader_loadDiceBot$9.$$arity = 0), nil) && 'loadDiceBot';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["diceBot/DiceBotLoaderList"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$strip', '$empty?', '$find', '$match?', '$new']);
  
  self.$require("diceBot/DiceBotLoader");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBotLoaderList');

    var $nesting = [self].concat($parent_nesting), $DiceBotLoaderList_find$1;

    
    Opal.defs(self, '$find', $DiceBotLoaderList_find$1 = function $$find(gameTitle) {
      var $$2, self = this, strippedTitle = nil;
      if (self.loaders == null) self.loaders = nil;

      
      strippedTitle = gameTitle.$strip();
      if ($truthy(strippedTitle['$empty?']())) {
        return nil};
      return $send(self.loaders, 'find', [], ($$2 = function(loader){var self = $$2.$$s || this;

      
        
        if (loader == null) {
          loader = nil;
        };
        return loader['$match?'](strippedTitle);}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $DiceBotLoaderList_find$1.$$arity = 1);
    return (self.loaders = [$$($nesting, 'DiceBotLoader').$new(["Cthulhu", "COC"]), $$($nesting, 'DiceBotLoader').$new(["Hieizan", "COCH"]), $$($nesting, 'DiceBotLoader').$new(["Elric", "EL"], $hash2(["filenames"], {"filenames": ["Elric"]})), $$($nesting, 'DiceBotLoader').$new(["RuneQuest", "RQ"]), $$($nesting, 'DiceBotLoader').$new(["Chill", "CH"]), $$($nesting, 'DiceBotLoader').$new(["RoleMaster", "RM"]), $$($nesting, 'DiceBotLoader').$new(["ShadowRun", "SR"]), $$($nesting, 'DiceBotLoader').$new(["ShadowRun4", "SR4"]), $$($nesting, 'DiceBotLoader').$new(["Pendragon", "PD"]), $$($nesting, 'DiceBotLoader').$new(/^(?:SwordWorld|SW)\s*2\.0$/i, $hash2(["filenames", "class"], {"filenames": ["SwordWorld", "SwordWorld2_0"], "class": "SwordWorld2_0"})), $$($nesting, 'DiceBotLoader').$new(/^(?:SwordWorld|SW)\s*2\.5$/i, $hash2(["filenames", "class"], {"filenames": ["SwordWorld", "SwordWorld2_5"], "class": "SwordWorld2_5"})), $$($nesting, 'DiceBotLoader').$new(["SwordWorld", "SW"]), $$($nesting, 'DiceBotLoader').$new(["Arianrhod", "AR"]), $$($nesting, 'DiceBotLoader').$new(/^(?:Infinite\s*Fantasia|IF)$/i, $hash2(["filenames"], {"filenames": ["InfiniteFantasia"]})), $$($nesting, 'DiceBotLoader').$new("WARPS"), $$($nesting, 'DiceBotLoader').$new(/^(?:Demon\s*Parasite|DP)$/i, $hash2(["filenames"], {"filenames": ["DemonParasite"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Parasite\s*Blood|PB)$/i, $hash2(["filenames", "class"], {"filenames": ["DemonParasite", "ParasiteBlood"], "class": "ParasiteBlood"})), $$($nesting, 'DiceBotLoader').$new(/^(?:Gun\s*Dog|GD)$/i, $hash2(["filenames"], {"filenames": ["Gundog"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Gun\s*Dog\s*Zero|GDZ)$/i, $hash2(["filenames", "class"], {"filenames": ["Gundog", "GundogZero"], "class": "GundogZero"})), $$($nesting, 'DiceBotLoader').$new(/^(?:Tunnels\s*&\s*Trolls|TuT)$/i, $hash2(["filenames"], {"filenames": ["TunnelsAndTrolls"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Nightmare\s*Hunter[=\s]*Deep|NHD)$/i, $hash2(["filenames"], {"filenames": ["NightmareHunterDeep"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:War\s*Hammer(FRP)?|WH)$/i, $hash2(["filenames"], {"filenames": ["Warhammer"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Phantasm\s*Adventure|PA)$/i, $hash2(["filenames"], {"filenames": ["PhantasmAdventure"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Chaos\s*Flare|CF)$/i, $hash2(["filenames"], {"filenames": ["ChaosFlare"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Cthulhu\s*Tech|CT)$/i, $hash2(["filenames"], {"filenames": ["CthulhuTech"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Tokumei\s*Tenkousei|ToT)$/i, $hash2(["filenames"], {"filenames": ["TokumeiTenkousei"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Shinobi\s*Gami|SG)$/i, $hash2(["filenames"], {"filenames": ["ShinobiGami"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Double\s*Cross|DX)$/i, $hash2(["filenames"], {"filenames": ["DoubleCross"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Sata\s*Supe|SS)$/i, $hash2(["filenames"], {"filenames": ["Satasupe"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Ars\s*Magica|AM)$/i, $hash2(["filenames"], {"filenames": ["ArsMagica"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Dark\s*Blaze|DB)$/i, $hash2(["filenames"], {"filenames": ["DarkBlaze"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Night\s*Wizard|NW)$/i, $hash2(["filenames"], {"filenames": ["NightWizard"]})), $$($nesting, 'DiceBotLoader').$new("TORG", $hash2(["filenames"], {"filenames": ["Torg"]})), $$($nesting, 'DiceBotLoader').$new(/^TORG1.5$/i, $hash2(["filenames", "class"], {"filenames": ["Torg", "Torg1_5"], "class": "Torg1_5"})), $$($nesting, 'DiceBotLoader').$new(/^(?:hunters\s*moon|HM)$/i, $hash2(["filenames"], {"filenames": ["HuntersMoon"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Blood\s*Crusade|BC)$/i, $hash2(["filenames"], {"filenames": ["BloodCrusade"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Meikyu\s*Kingdom|MK)$/i, $hash2(["filenames"], {"filenames": ["MeikyuKingdom"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Earth\s*Dawn|ED)$/i, $hash2(["filenames"], {"filenames": ["EarthDawn"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:(?:Earth\s*Dawn|ED)3)$/i, $hash2(["filenames", "class"], {"filenames": ["EarthDawn", "EarthDawn3"], "class": "EarthDawn3"})), $$($nesting, 'DiceBotLoader').$new(/^(?:(?:Earth\s*Dawn|ED)4)$/i, $hash2(["filenames", "class"], {"filenames": ["EarthDawn", "EarthDawn4"], "class": "EarthDawn4"})), $$($nesting, 'DiceBotLoader').$new(/^(?:Embryo\s*Machine|EM)$/i, $hash2(["filenames"], {"filenames": ["EmbryoMachine"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Gehenna\s*An|GA)$/i, $hash2(["filenames"], {"filenames": ["GehennaAn"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Magica\s*Logia|ML)$/i, $hash2(["filenames"], {"filenames": ["MagicaLogia"]})), $$($nesting, 'DiceBotLoader').$new(["Nechronica", "NC"]), $$($nesting, 'DiceBotLoader').$new(/^(?:Meikyu\s*Days|MD)$/i, $hash2(["filenames"], {"filenames": ["MeikyuDays"]})), $$($nesting, 'DiceBotLoader').$new(["Peekaboo", "PK"]), $$($nesting, 'DiceBotLoader').$new(/^(?:Barna\s*Kronika|BK)$/i, $hash2(["filenames"], {"filenames": ["BarnaKronika"]})), $$($nesting, 'DiceBotLoader').$new(["RokumonSekai2", "RS2"]), $$($nesting, 'DiceBotLoader').$new(/^(?:Monotone\s*Museum|MM)$/i, $hash2(["filenames"], {"filenames": ["MonotoneMuseum"]})), $$($nesting, 'DiceBotLoader').$new(/^Zettai\s*Reido$/i, $hash2(["filenames"], {"filenames": ["ZettaiReido"]})), $$($nesting, 'DiceBotLoader').$new(/^Eclipse\s*Phase$/i, $hash2(["filenames"], {"filenames": ["EclipsePhase"]})), $$($nesting, 'DiceBotLoader').$new("NJSLYRBATTLE", $hash2(["filenames"], {"filenames": ["NjslyrBattle"]})), $$($nesting, 'DiceBotLoader').$new(["ShinMegamiTenseiKakuseihen", "SMTKakuseihen"]), $$($nesting, 'DiceBotLoader').$new("Ryutama"), $$($nesting, 'DiceBotLoader').$new("CardRanker"), $$($nesting, 'DiceBotLoader').$new("ShinkuuGakuen"), $$($nesting, 'DiceBotLoader').$new("CrashWorld"), $$($nesting, 'DiceBotLoader').$new("WitchQuest"), $$($nesting, 'DiceBotLoader').$new("BattleTech"), $$($nesting, 'DiceBotLoader').$new("Elysion"), $$($nesting, 'DiceBotLoader').$new("GeishaGirlwithKatana"), $$($nesting, 'DiceBotLoader').$new("GURPS", $hash2(["filenames"], {"filenames": ["Gurps"]})), $$($nesting, 'DiceBotLoader').$new("GurpsFW"), $$($nesting, 'DiceBotLoader').$new("FilledWith"), $$($nesting, 'DiceBotLoader').$new("HarnMaster"), $$($nesting, 'DiceBotLoader').$new("Insane"), $$($nesting, 'DiceBotLoader').$new("KillDeathBusiness"), $$($nesting, 'DiceBotLoader').$new("Kamigakari"), $$($nesting, 'DiceBotLoader').$new("RecordOfSteam"), $$($nesting, 'DiceBotLoader').$new("Oukahoushin3rd"), $$($nesting, 'DiceBotLoader').$new("BeastBindTrinity"), $$($nesting, 'DiceBotLoader').$new("BloodMoon"), $$($nesting, 'DiceBotLoader').$new("Utakaze"), $$($nesting, 'DiceBotLoader').$new("EndBreaker"), $$($nesting, 'DiceBotLoader').$new("KanColle"), $$($nesting, 'DiceBotLoader').$new("GranCrest"), $$($nesting, 'DiceBotLoader').$new("HouraiGakuen"), $$($nesting, 'DiceBotLoader').$new("TwilightGunsmoke"), $$($nesting, 'DiceBotLoader').$new("Garako"), $$($nesting, 'DiceBotLoader').$new("ShoujoTenrankai"), $$($nesting, 'DiceBotLoader').$new("GardenOrder"), $$($nesting, 'DiceBotLoader').$new("DarkSouls"), $$($nesting, 'DiceBotLoader').$new("SterileLife"), $$($nesting, 'DiceBotLoader').$new("Paradiso"), $$($nesting, 'DiceBotLoader').$new("SamsaraBallad"), $$($nesting, 'DiceBotLoader').$new("GoblinSlayer"), $$($nesting, 'DiceBotLoader').$new("RyuTuber"), $$($nesting, 'DiceBotLoader').$new("None", $hash2(["filenames", "class"], {"filenames": [], "class": "DiceBot"}))]);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/normalize"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$module_function', '$===', '$==', '$to_i']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Normalize');

    var $nesting = [self].concat($parent_nesting), $Normalize_comparison_operator$1, $Normalize_target_number$2;

    
    self.$module_function();
    
    Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
      var self = this, $case = nil;

      return (function() {$case = op;
      if (/<=|=</['$===']($case)) {return "<="}
      else if (/>=|=>/['$===']($case)) {return ">="}
      else if (/<>|!=|=!/['$===']($case)) {return "!="}
      else if (/</['$===']($case)) {return "<"}
      else if (/>/['$===']($case)) {return ">"}
      else if (/\=/['$===']($case)) {return "=="}
      else { return nil }})()
    }, $Normalize_comparison_operator$1.$$arity = 1);
    
    Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
      var self = this;

      if (val['$==']("?")) {
        return val
      } else {
        return val.$to_i()
      }
    }, $Normalize_target_number$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return left.$div(right)}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["dice/add_dice/node"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$+', '$to_s', '$cmp_op_text', '$s_exp', '$private', '$===', '$eval', '$calc', '$output', '$op_for_s_exp', '$send', '$rounding_method', '$class', '$zero?', '$divide_and_round', '$raise', '$ceil', '$/', '$to_f', '$round', '$div', '$-@', '$literal', '$roll', '$reduce', '$flatten', '$to_proc', '$join', '$map', '$new', '$freeze', '$lambda', '$take', '$reverse', '$drop', '$sort', '$roll_once', '$[]', '$apply', '$abbr', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AddDice');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Node');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Command');

        var $nesting = [self].concat($parent_nesting), $Command_initialize$1, $Command_to_s$2, $Command_s_exp$3, $Command_cmp_op_text$4;

        self.$$prototype.lhs = self.$$prototype.rhs = self.$$prototype.cmp_op = nil;
        
        self.$attr_reader("lhs");
        self.$attr_reader("cmp_op");
        self.$attr_reader("rhs");
        
        Opal.def(self, '$initialize', $Command_initialize$1 = function $$initialize(lhs, cmp_op, rhs) {
          var self = this;

          
          self.lhs = lhs;
          self.cmp_op = cmp_op;
          return (self.rhs = rhs);
        }, $Command_initialize$1.$$arity = 3);
        
        Opal.def(self, '$to_s', $Command_to_s$2 = function $$to_s() {
          var self = this;

          return $rb_plus($rb_plus(self.lhs.$to_s(), self.$cmp_op_text()), self.rhs.$to_s())
        }, $Command_to_s$2.$$arity = 0);
        
        Opal.def(self, '$s_exp', $Command_s_exp$3 = function $$s_exp() {
          var self = this;

          if ($truthy(self.cmp_op)) {
            return "" + "(Command (" + (self.cmp_op) + " " + (self.lhs.$s_exp()) + " " + (self.rhs) + "))"
          } else {
            return "" + "(Command " + (self.lhs.$s_exp()) + ")"
          }
        }, $Command_s_exp$3.$$arity = 0);
        self.$private();
        return (Opal.def(self, '$cmp_op_text', $Command_cmp_op_text$4 = function $$cmp_op_text() {
          var self = this, $case = nil;

          return (function() {$case = self.cmp_op;
          if ("!="['$===']($case)) {return "<>"}
          else if ("=="['$===']($case)) {return "="}
          else {return self.cmp_op.$to_s()}})()
        }, $Command_cmp_op_text$4.$$arity = 0), nil) && 'cmp_op_text';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BinaryOp');

        var $nesting = [self].concat($parent_nesting), $BinaryOp_initialize$5, $BinaryOp_eval$6, $BinaryOp_to_s$7, $BinaryOp_output$8, $BinaryOp_s_exp$9, $BinaryOp_calc$10, $BinaryOp_op_for_s_exp$11;

        self.$$prototype.lhs = self.$$prototype.rhs = self.$$prototype.op = nil;
        
        
        Opal.def(self, '$initialize', $BinaryOp_initialize$5 = function $$initialize(lhs, op, rhs) {
          var self = this;

          
          self.lhs = lhs;
          self.op = op;
          return (self.rhs = rhs);
        }, $BinaryOp_initialize$5.$$arity = 3);
        
        Opal.def(self, '$eval', $BinaryOp_eval$6 = function(randomizer) {
          var self = this, lhs = nil, rhs = nil;

          
          lhs = self.lhs.$eval(randomizer);
          rhs = self.rhs.$eval(randomizer);
          return self.$calc(lhs, rhs);
        }, $BinaryOp_eval$6.$$arity = 1);
        
        Opal.def(self, '$to_s', $BinaryOp_to_s$7 = function $$to_s() {
          var self = this;

          return "" + (self.lhs) + (self.op) + (self.rhs)
        }, $BinaryOp_to_s$7.$$arity = 0);
        
        Opal.def(self, '$output', $BinaryOp_output$8 = function $$output() {
          var self = this;

          return "" + (self.lhs.$output()) + (self.op) + (self.rhs.$output())
        }, $BinaryOp_output$8.$$arity = 0);
        
        Opal.def(self, '$s_exp', $BinaryOp_s_exp$9 = function $$s_exp() {
          var self = this;

          return "" + "(" + (self.$op_for_s_exp()) + " " + (self.lhs.$s_exp()) + " " + (self.rhs.$s_exp()) + ")"
        }, $BinaryOp_s_exp$9.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$calc', $BinaryOp_calc$10 = function $$calc(lhs, rhs) {
          var self = this;

          return lhs.$send(self.op, rhs)
        }, $BinaryOp_calc$10.$$arity = 2);
        return (Opal.def(self, '$op_for_s_exp', $BinaryOp_op_for_s_exp$11 = function $$op_for_s_exp() {
          var self = this;

          return self.op
        }, $BinaryOp_op_for_s_exp$11.$$arity = 0), nil) && 'op_for_s_exp';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DivideBase');

        var $nesting = [self].concat($parent_nesting), $DivideBase_initialize$12, $DivideBase_to_s$13, $DivideBase_output$14, $DivideBase_rounding_method$15, $DivideBase_op_for_s_exp$16, $DivideBase_calc$17, $DivideBase_divide_and_round$18;

        self.$$prototype.op = nil;
        
        
        Opal.def(self, '$initialize', $DivideBase_initialize$12 = function $$initialize(lhs, rhs) {
          var $iter = $DivideBase_initialize$12.$$p, $yield = $iter || nil, self = this;

          if ($iter) $DivideBase_initialize$12.$$p = null;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $DivideBase_initialize$12, false), [lhs, "/", rhs], null)
        }, $DivideBase_initialize$12.$$arity = 2);
        
        Opal.def(self, '$to_s', $DivideBase_to_s$13 = function $$to_s() {
          var $iter = $DivideBase_to_s$13.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DivideBase_to_s$13.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return "" + ($send(self, Opal.find_super_dispatcher(self, 'to_s', $DivideBase_to_s$13, false), $zuper, $iter)) + (self.$rounding_method())
        }, $DivideBase_to_s$13.$$arity = 0);
        
        Opal.def(self, '$output', $DivideBase_output$14 = function $$output() {
          var $iter = $DivideBase_output$14.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DivideBase_output$14.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return "" + ($send(self, Opal.find_super_dispatcher(self, 'output', $DivideBase_output$14, false), $zuper, $iter)) + (self.$rounding_method())
        }, $DivideBase_output$14.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$rounding_method', $DivideBase_rounding_method$15 = function $$rounding_method() {
          var self = this;

          return $$$(self.$class(), 'ROUNDING_METHOD')
        }, $DivideBase_rounding_method$15.$$arity = 0);
        
        Opal.def(self, '$op_for_s_exp', $DivideBase_op_for_s_exp$16 = function $$op_for_s_exp() {
          var self = this;

          return "" + (self.op) + (self.$rounding_method())
        }, $DivideBase_op_for_s_exp$16.$$arity = 0);
        
        Opal.def(self, '$calc', $DivideBase_calc$17 = function $$calc(lhs, rhs) {
          var self = this;

          
          if ($truthy(rhs['$zero?']())) {
            return 1};
          return self.$divide_and_round(lhs, rhs);
        }, $DivideBase_calc$17.$$arity = 2);
        return (Opal.def(self, '$divide_and_round', $DivideBase_divide_and_round$18 = function $$divide_and_round(_dividend, _divisor) {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $DivideBase_divide_and_round$18.$$arity = 2), nil) && 'divide_and_round';
      })($nesting[0], $$($nesting, 'BinaryOp'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DivideWithRoundingUp');

        var $nesting = [self].concat($parent_nesting), $DivideWithRoundingUp_divide_and_round$19;

        
        Opal.const_set($nesting[0], 'ROUNDING_METHOD', "U");
        self.$private();
        return (Opal.def(self, '$divide_and_round', $DivideWithRoundingUp_divide_and_round$19 = function $$divide_and_round(dividend, divisor) {
          var self = this;

          return $rb_divide(dividend.$to_f(), divisor).$ceil()
        }, $DivideWithRoundingUp_divide_and_round$19.$$arity = 2), nil) && 'divide_and_round';
      })($nesting[0], $$($nesting, 'DivideBase'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DivideWithRoundingOff');

        var $nesting = [self].concat($parent_nesting), $DivideWithRoundingOff_divide_and_round$20;

        
        Opal.const_set($nesting[0], 'ROUNDING_METHOD', "R");
        self.$private();
        return (Opal.def(self, '$divide_and_round', $DivideWithRoundingOff_divide_and_round$20 = function $$divide_and_round(dividend, divisor) {
          var self = this;

          return $rb_divide(dividend.$to_f(), divisor).$round()
        }, $DivideWithRoundingOff_divide_and_round$20.$$arity = 2), nil) && 'divide_and_round';
      })($nesting[0], $$($nesting, 'DivideBase'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DivideWithRoundingDown');

        var $nesting = [self].concat($parent_nesting), $DivideWithRoundingDown_divide_and_round$21;

        
        Opal.const_set($nesting[0], 'ROUNDING_METHOD', "");
        self.$private();
        return (Opal.def(self, '$divide_and_round', $DivideWithRoundingDown_divide_and_round$21 = function $$divide_and_round(dividend, divisor) {
          var self = this;

          return dividend.$div(divisor)
        }, $DivideWithRoundingDown_divide_and_round$21.$$arity = 2), nil) && 'divide_and_round';
      })($nesting[0], $$($nesting, 'DivideBase'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Negate');

        var $nesting = [self].concat($parent_nesting), $Negate_initialize$22, $Negate_eval$23, $Negate_to_s$24, $Negate_output$25, $Negate_s_exp$26;

        self.$$prototype.body = nil;
        
        self.$attr_reader("body");
        
        Opal.def(self, '$initialize', $Negate_initialize$22 = function $$initialize(body) {
          var self = this;

          return (self.body = body)
        }, $Negate_initialize$22.$$arity = 1);
        
        Opal.def(self, '$eval', $Negate_eval$23 = function(randomizer) {
          var self = this;

          return self.body.$eval(randomizer)['$-@']()
        }, $Negate_eval$23.$$arity = 1);
        
        Opal.def(self, '$to_s', $Negate_to_s$24 = function $$to_s() {
          var self = this;

          return "" + "-" + (self.body)
        }, $Negate_to_s$24.$$arity = 0);
        
        Opal.def(self, '$output', $Negate_output$25 = function $$output() {
          var self = this;

          return "" + "-" + (self.body.$output())
        }, $Negate_output$25.$$arity = 0);
        return (Opal.def(self, '$s_exp', $Negate_s_exp$26 = function $$s_exp() {
          var self = this;

          return "" + "(- " + (self.body.$s_exp()) + ")"
        }, $Negate_s_exp$26.$$arity = 0), nil) && 's_exp';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DiceRoll');

        var $nesting = [self].concat($parent_nesting), $DiceRoll_initialize$27, $DiceRoll_eval$28, $DiceRoll_to_s$30, $DiceRoll_output$31, $DiceRoll_s_exp$32;

        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.text = nil;
        
        
        Opal.def(self, '$initialize', $DiceRoll_initialize$27 = function $$initialize(times, sides) {
          var self = this;

          
          self.times = times.$literal();
          self.sides = sides.$literal();
          return (self.text = nil);
        }, $DiceRoll_initialize$27.$$arity = 2);
        
        Opal.def(self, '$eval', $DiceRoll_eval$28 = function(randomizer) {
          var $$29, self = this, dice_groups = nil, total = nil, dice_str = nil;

          
          dice_groups = randomizer.$roll(self.times, self.sides);
          total = $send(dice_groups.$flatten(), 'reduce', [0], "+".$to_proc());
          dice_str = $send(dice_groups, 'map', [], ($$29 = function(dice_list){var self = $$29.$$s || this;

          
            
            if (dice_list == null) {
              dice_list = nil;
            };
            return "" + "[" + (dice_list.$join(",")) + "]";}, $$29.$$s = self, $$29.$$arity = 1, $$29)).$join();
          self.text = "" + (total) + (dice_str);
          return total;
        }, $DiceRoll_eval$28.$$arity = 1);
        
        Opal.def(self, '$to_s', $DiceRoll_to_s$30 = function $$to_s() {
          var self = this;

          return "" + (self.times) + "D" + (self.sides)
        }, $DiceRoll_to_s$30.$$arity = 0);
        
        Opal.def(self, '$output', $DiceRoll_output$31 = function $$output() {
          var self = this;

          return self.text
        }, $DiceRoll_output$31.$$arity = 0);
        return (Opal.def(self, '$s_exp', $DiceRoll_s_exp$32 = function $$s_exp() {
          var self = this;

          return "" + "(DiceRoll " + (self.times) + " " + (self.sides) + ")"
        }, $DiceRoll_s_exp$32.$$arity = 0), nil) && 's_exp';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DiceRollWithFilter');

        var $nesting = [self].concat($parent_nesting), $DiceRollWithFilter_initialize$37, $DiceRollWithFilter_eval$38, $DiceRollWithFilter_to_s$39, $DiceRollWithFilter_output$40, $DiceRollWithFilter_s_exp$41;

        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.filter = self.$$prototype.n_filtering = self.$$prototype.text = nil;
        
        Opal.const_set($nesting[0], 'Filter', $$($nesting, 'Struct').$new("abbr", "apply"));
        Opal.const_set($nesting[0], 'KEEP_HIGHEST', $$($nesting, 'Filter').$new("KH", $send(self, 'lambda', [], ($$33 = function(sorted_values, n){var self = $$33.$$s || this;

        
          
          if (sorted_values == null) {
            sorted_values = nil;
          };
          
          if (n == null) {
            n = nil;
          };
          return sorted_values.$reverse().$take(n);}, $$33.$$s = self, $$33.$$arity = 2, $$33))).$freeze());
        Opal.const_set($nesting[0], 'KEEP_LOWEST', $$($nesting, 'Filter').$new("KL", $send(self, 'lambda', [], ($$34 = function(sorted_values, n){var self = $$34.$$s || this;

        
          
          if (sorted_values == null) {
            sorted_values = nil;
          };
          
          if (n == null) {
            n = nil;
          };
          return sorted_values.$take(n);}, $$34.$$s = self, $$34.$$arity = 2, $$34))).$freeze());
        Opal.const_set($nesting[0], 'DROP_HIGHEST', $$($nesting, 'Filter').$new("DH", $send(self, 'lambda', [], ($$35 = function(sorted_values, n){var self = $$35.$$s || this;

        
          
          if (sorted_values == null) {
            sorted_values = nil;
          };
          
          if (n == null) {
            n = nil;
          };
          return sorted_values.$reverse().$drop(n);}, $$35.$$s = self, $$35.$$arity = 2, $$35))).$freeze());
        Opal.const_set($nesting[0], 'DROP_LOWEST', $$($nesting, 'Filter').$new("DL", $send(self, 'lambda', [], ($$36 = function(sorted_values, n){var self = $$36.$$s || this;

        
          
          if (sorted_values == null) {
            sorted_values = nil;
          };
          
          if (n == null) {
            n = nil;
          };
          return sorted_values.$drop(n);}, $$36.$$s = self, $$36.$$arity = 2, $$36))).$freeze());
        
        Opal.def(self, '$initialize', $DiceRollWithFilter_initialize$37 = function $$initialize(times, sides, n_filtering, filter) {
          var self = this;

          
          self.times = times.$literal();
          self.sides = sides.$literal();
          self.n_filtering = n_filtering.$literal();
          self.filter = filter;
          return (self.text = nil);
        }, $DiceRollWithFilter_initialize$37.$$arity = 4);
        
        Opal.def(self, '$eval', $DiceRollWithFilter_eval$38 = function(randomizer) {
          var self = this, sorted_values = nil, total = nil;

          
          sorted_values = randomizer.$roll_once(self.times, self.sides).$sort();
          total = $send(self.filter.$apply()['$[]'](sorted_values, self.n_filtering), 'reduce', [0], "+".$to_proc());
          self.text = "" + (total) + "[" + (sorted_values.$join(",")) + "]";
          return total;
        }, $DiceRollWithFilter_eval$38.$$arity = 1);
        
        Opal.def(self, '$to_s', $DiceRollWithFilter_to_s$39 = function $$to_s() {
          var self = this;

          return "" + (self.times) + "D" + (self.sides) + (self.filter.$abbr()) + (self.n_filtering)
        }, $DiceRollWithFilter_to_s$39.$$arity = 0);
        
        Opal.def(self, '$output', $DiceRollWithFilter_output$40 = function $$output() {
          var self = this;

          return self.text
        }, $DiceRollWithFilter_output$40.$$arity = 0);
        return (Opal.def(self, '$s_exp', $DiceRollWithFilter_s_exp$41 = function $$s_exp() {
          var self = this;

          return "" + "(DiceRollWithFilter " + (self.times) + " " + (self.sides) + " " + (self.filter.$abbr().$inspect()) + " " + (self.n_filtering) + ")"
        }, $DiceRollWithFilter_s_exp$41.$$arity = 0), nil) && 's_exp';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Number');

        var $nesting = [self].concat($parent_nesting), $Number_initialize$42, $Number_negate$43, $Number_eval$44, $Number_to_s$45;

        self.$$prototype.literal = nil;
        
        self.$attr_reader("literal");
        
        Opal.def(self, '$initialize', $Number_initialize$42 = function $$initialize(literal) {
          var self = this;

          return (self.literal = literal)
        }, $Number_initialize$42.$$arity = 1);
        
        Opal.def(self, '$negate', $Number_negate$43 = function $$negate() {
          var self = this;

          return $$($nesting, 'Number').$new(self.literal['$-@']())
        }, $Number_negate$43.$$arity = 0);
        
        Opal.def(self, '$eval', $Number_eval$44 = function(_randomizer) {
          var self = this;

          return self.literal
        }, $Number_eval$44.$$arity = 1);
        
        Opal.def(self, '$to_s', $Number_to_s$45 = function $$to_s() {
          var self = this;

          return self.literal.$to_s()
        }, $Number_to_s$45.$$arity = 0);
        Opal.alias(self, "output", "to_s");
        return Opal.alias(self, "s_exp", "to_s");
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["dice/add_dice/parser"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$partition', '$comparison_operator', '$!', '$empty?', '$!=', '$eval', '$new', '$tokenize', '$expr', '$size', '$private', '$split', '$gsub', '$consume', '$add', '$mul', '$loop', '$sub_negative_number', '$is_a?', '$<', '$literal', '$==', '$negate', '$unary', '$divide_node_class', '$===', '$body', '$term', '$expect_number', '$dice_roll_filter', '$slice', '$length', '$+', '$[]', '$integer?', '$to_i', '$nil?', '$match']);
  
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/normalize");
  self.$require("dice/add_dice/node");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AddDice');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $Parser_initialize$1, $Parser_parse$2, $Parser_error$ques$3, $Parser_tokenize$4, $Parser_expr$6, $Parser_add$7, $Parser_sub_negative_number$9, $Parser_mul$10, $Parser_divide_node_class$12, $Parser_unary$13, $Parser_term$14, $Parser_dice_roll_filter$15, $Parser_consume$16, $Parser_expect$17, $Parser_expect_number$18, $Parser_integer$ques$19;

      self.$$prototype.expr = self.$$prototype.idx = self.$$prototype.tokens = self.$$prototype.contain_dice_roll = self.$$prototype.error = nil;
      
      
      Opal.def(self, '$initialize', $Parser_initialize$1 = function $$initialize(expr) {
        var self = this;

        
        self.expr = expr;
        self.idx = 0;
        self.error = false;
        return (self.contain_dice_roll = false);
      }, $Parser_initialize$1.$$arity = 1);
      
      Opal.def(self, '$parse', $Parser_parse$2 = function $$parse() {
        var $a, $b, self = this, lhs = nil, cmp_op = nil, rhs = nil;

        
        $b = self.expr.$partition(/[<>=]+/), $a = Opal.to_ary($b), (lhs = ($a[0] == null ? nil : $a[0])), (cmp_op = ($a[1] == null ? nil : $a[1])), (rhs = ($a[2] == null ? nil : $a[2])), $b;
        cmp_op = $$($nesting, 'Normalize').$comparison_operator(cmp_op);
        if ($truthy(($truthy($a = rhs['$empty?']()['$!']()) ? rhs['$!=']("?") : $a))) {
          rhs = $$($nesting, 'ArithmeticEvaluator').$new().$eval(rhs)};
        self.tokens = self.$tokenize(lhs);
        lhs = self.$expr();
        if ($truthy(($truthy($a = self.idx['$!='](self.tokens.$size())) ? $a : self.contain_dice_roll['$!']()))) {
          self.error = true};
        return $$$($$$($$($nesting, 'AddDice'), 'Node'), 'Command').$new(lhs, cmp_op, rhs);
      }, $Parser_parse$2.$$arity = 0);
      
      Opal.def(self, '$error?', $Parser_error$ques$3 = function() {
        var self = this;

        return self.error
      }, $Parser_error$ques$3.$$arity = 0);
      self.$private();
      
      Opal.def(self, '$tokenize', $Parser_tokenize$4 = function $$tokenize(expr) {
        var $$5, self = this;

        return $send(expr, 'gsub', [/[\+\-\*\/DURSKHL@]/], ($$5 = function(e){var self = $$5.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return "" + " " + (e) + " ";}, $$5.$$s = self, $$5.$$arity = 1, $$5)).$split(" ")
      }, $Parser_tokenize$4.$$arity = 1);
      
      Opal.def(self, '$expr', $Parser_expr$6 = function $$expr() {
        var self = this;

        
        self.$consume("S");
        return self.$add();
      }, $Parser_expr$6.$$arity = 0);
      
      Opal.def(self, '$add', $Parser_add$7 = function $$add() {
        var $$8, self = this, node = nil;

        
        node = self.$mul();
        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$8 = function(){var self = $$8.$$s || this, $a, $b, op = nil, rhs = nil;

        if ($truthy(self.$consume("+"))) {
            
            $b = self.$sub_negative_number("+", self.$mul()), $a = Opal.to_ary($b), (op = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $b;
            return (node = $$$($$$($$($nesting, 'AddDice'), 'Node'), 'BinaryOp').$new(node, op, rhs));
          } else if ($truthy(self.$consume("-"))) {
            
            $b = self.$sub_negative_number("-", self.$mul()), $a = Opal.to_ary($b), (op = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $b;
            return (node = $$$($$$($$($nesting, 'AddDice'), 'Node'), 'BinaryOp').$new(node, op, rhs));
          } else {
            
            Opal.brk(nil, $brk)
          }}, $$8.$$s = self, $$8.$$brk = $brk, $$8.$$arity = 0, $$8))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return node;
      }, $Parser_add$7.$$arity = 0);
      
      Opal.def(self, '$sub_negative_number', $Parser_sub_negative_number$9 = function $$sub_negative_number(op, rhs) {
        var $a, self = this;

        
        if ($truthy(($truthy($a = rhs['$is_a?']($$$($$($nesting, 'Node'), 'Number'))) ? $rb_lt(rhs.$literal(), 0) : $a))) {
          if (op['$==']("+")) {
            return ["-", rhs.$negate()]
          } else if (op['$==']("-")) {
            return ["+", rhs.$negate()]}};
        return [op, rhs];
      }, $Parser_sub_negative_number$9.$$arity = 2);
      
      Opal.def(self, '$mul', $Parser_mul$10 = function $$mul() {
        var $$11, self = this, node = nil;

        
        node = self.$unary();
        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$11 = function(){var self = $$11.$$s || this, rhs = nil, klass = nil;

        if ($truthy(self.$consume("*"))) {
            return (node = $$$($$$($$($nesting, 'AddDice'), 'Node'), 'BinaryOp').$new(node, "*", self.$unary()))
          } else if ($truthy(self.$consume("/"))) {
            
            rhs = self.$unary();
            klass = self.$divide_node_class();
            return (node = klass.$new(node, rhs));
          } else {
            
            Opal.brk(nil, $brk)
          }}, $$11.$$s = self, $$11.$$brk = $brk, $$11.$$arity = 0, $$11))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return node;
      }, $Parser_mul$10.$$arity = 0);
      
      Opal.def(self, '$divide_node_class', $Parser_divide_node_class$12 = function $$divide_node_class() {
        var self = this;

        if ($truthy(self.$consume("U"))) {
          return $$$($$($nesting, 'Node'), 'DivideWithRoundingUp')
        } else if ($truthy(self.$consume("R"))) {
          return $$$($$($nesting, 'Node'), 'DivideWithRoundingOff')
        } else {
          return $$$($$($nesting, 'Node'), 'DivideWithRoundingDown')
        }
      }, $Parser_divide_node_class$12.$$arity = 0);
      
      Opal.def(self, '$unary', $Parser_unary$13 = function $$unary() {
        var self = this, node = nil, $case = nil;

        if ($truthy(self.$consume("+"))) {
          return self.$unary()
        } else if ($truthy(self.$consume("-"))) {
          
          node = self.$unary();
          return (function() {$case = node;
          if ($$$($$($nesting, 'Node'), 'Negate')['$===']($case)) {return node.$body()}
          else if ($$$($$($nesting, 'Node'), 'Number')['$===']($case)) {return node.$negate()}
          else {return $$$($$$($$($nesting, 'AddDice'), 'Node'), 'Negate').$new(node)}})();
        } else {
          return self.$term()
        }
      }, $Parser_unary$13.$$arity = 0);
      
      Opal.def(self, '$term', $Parser_term$14 = function $$term() {
        var self = this, num = nil, times = nil, sides = nil, filter = nil, n_filtering = nil;

        
        num = self.$expect_number();
        if ($truthy(self.$consume("D"))) {
          
          times = num;
          sides = self.$expect_number();
          filter = self.$dice_roll_filter();
          if ($truthy(filter)) {
            
            n_filtering = self.$expect_number();
            self.contain_dice_roll = true;
            return $$$($$($nesting, 'Node'), 'DiceRollWithFilter').$new(times, sides, n_filtering, filter);};
          self.contain_dice_roll = true;
          return $$$($$($nesting, 'Node'), 'DiceRoll').$new(times, sides);};
        return num;
      }, $Parser_term$14.$$arity = 0);
      
      Opal.def(self, '$dice_roll_filter', $Parser_dice_roll_filter$15 = function $$dice_roll_filter() {
        var self = this;

        if ($truthy(self.$consume("K", "H"))) {
          return $$$($$$($$($nesting, 'Node'), 'DiceRollWithFilter'), 'KEEP_HIGHEST')
        } else if ($truthy(self.$consume("K", "L"))) {
          return $$$($$$($$($nesting, 'Node'), 'DiceRollWithFilter'), 'KEEP_LOWEST')
        } else if ($truthy(self.$consume("D", "H"))) {
          return $$$($$$($$($nesting, 'Node'), 'DiceRollWithFilter'), 'DROP_HIGHEST')
        } else if ($truthy(self.$consume("D", "L"))) {
          return $$$($$$($$($nesting, 'Node'), 'DiceRollWithFilter'), 'DROP_LOWEST')
        } else {
          return nil
        }
      }, $Parser_dice_roll_filter$15.$$arity = 0);
      
      Opal.def(self, '$consume', $Parser_consume$16 = function $$consume($a) {
        var $post_args, expected, self = this, target = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        expected = $post_args;;
        target = self.tokens.$slice(self.idx, expected.$length());
        if (target['$=='](expected)) {
        } else {
          return false
        };
        self.idx = $rb_plus(self.idx, expected.$length());
        return true;
      }, $Parser_consume$16.$$arity = -1);
      
      Opal.def(self, '$expect', $Parser_expect$17 = function $$expect(str) {
        var self = this;

        
        if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
          self.error = true};
        return (self.idx = $rb_plus(self.idx, 1));
      }, $Parser_expect$17.$$arity = 1);
      
      Opal.def(self, '$expect_number', $Parser_expect_number$18 = function $$expect_number() {
        var self = this, ret = nil;

        
        if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
        } else {
          
          self.error = true;
          self.idx = $rb_plus(self.idx, 1);
          return $$$($$$($$($nesting, 'AddDice'), 'Node'), 'Number').$new(0);
        };
        ret = self.tokens['$[]'](self.idx).$to_i();
        self.idx = $rb_plus(self.idx, 1);
        return $$$($$$($$($nesting, 'AddDice'), 'Node'), 'Number').$new(ret);
      }, $Parser_expect_number$18.$$arity = 0);
      return (Opal.def(self, '$integer?', $Parser_integer$ques$19 = function(str) {
        var self = this;

        return /^\d+$/.$match(str)['$nil?']()['$!']()
      }, $Parser_integer$ques$19.$$arity = 1), nil) && 'integer?';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["dice/add_dice/randomizer"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$!', '$empty?', '$shift', '$roll_once', '$concat', '$push', '$enqueue_reroll', '$<', '$==', '$new', '$getD66Value', '$roll', '$&', '$sortType', '$map', '$split', '$to_proc', '$private', '$!=', '$sameDiceRerollCount', '$<=', '$sameDiceRerollType', '$debug', '$double_check?', '$>=', '$each', '$[]', '$[]=', '$-', '$+']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AddDice');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Randomizer');

      var $nesting = [self].concat($parent_nesting), $Randomizer_initialize$1, $Randomizer_roll$2, $Randomizer_roll_once$3, $Randomizer_double_check$ques$5, $Randomizer_enqueue_reroll$6;

      self.$$prototype.dice_list = self.$$prototype.sides = self.$$prototype.bcdice = self.$$prototype.dicebot = self.$$prototype.cmp_op = nil;
      
      self.$attr_reader("dicebot", "cmp_op", "dice_list", "sides");
      
      Opal.def(self, '$initialize', $Randomizer_initialize$1 = function $$initialize(bcdice, dicebot, cmp_op) {
        var self = this;

        
        self.bcdice = bcdice;
        self.dicebot = dicebot;
        self.cmp_op = cmp_op;
        self.sides = 0;
        return (self.dice_list = []);
      }, $Randomizer_initialize$1.$$arity = 3);
      
      Opal.def(self, '$roll', $Randomizer_roll$2 = function $$roll(times, sides) {
        var $a, self = this, dice_groups = nil, queue = nil, dice_list = nil;

        
        dice_groups = [];
        queue = [times];
        while ($truthy(queue['$empty?']()['$!']())) {
          
          times = queue.$shift();
          dice_list = self.$roll_once(times, sides);
          self.dice_list.$concat(dice_list);
          dice_groups.$push(dice_list);
          self.$enqueue_reroll(dice_list, queue, times);
        };
        return dice_groups;
      }, $Randomizer_roll$2.$$arity = 2);
      
      Opal.def(self, '$roll_once', $Randomizer_roll_once$3 = function $$roll_once(times, sides) {
        var $$4, $a, $b, self = this, _ = nil, dice_str = nil;

        
        if ($truthy($rb_lt(self.sides, sides))) {
          self.sides = sides};
        if (sides['$=='](66)) {
          return $send($$($nesting, 'Array'), 'new', [times], ($$4 = function(){var self = $$4.$$s || this;
            if (self.bcdice == null) self.bcdice = nil;

          return self.bcdice.$getD66Value()}, $$4.$$s = self, $$4.$$arity = 0, $$4))};
        $b = self.bcdice.$roll(times, sides, self.dicebot.$sortType()['$&'](1)), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
        return $send(dice_str.$split(","), 'map', [], "to_i".$to_proc());
      }, $Randomizer_roll_once$3.$$arity = 2);
      self.$private();
      
      Opal.def(self, '$double_check?', $Randomizer_double_check$ques$5 = function() {
        var self = this;

        
        if ($truthy(self.dicebot.$sameDiceRerollCount()['$!='](0))) {
          if ($truthy($rb_le(self.dicebot.$sameDiceRerollType(), 0))) {
            if ($truthy(self.cmp_op)) {
              return true}
          } else if ($truthy($rb_le(self.dicebot.$sameDiceRerollType(), 1))) {
            
            self.$debug("ダメージのみ振り足し");
            if ($truthy(self.cmp_op)) {
            } else {
              return true
            };
          } else {
            return true
          }};
        return false;
      }, $Randomizer_double_check$ques$5.$$arity = 0);
      return (Opal.def(self, '$enqueue_reroll', $Randomizer_enqueue_reroll$6 = function $$enqueue_reroll(dice_list, dice_queue, roll_times) {
        var $a, $$7, $$8, self = this, count_bucket = nil, reroll_threshold = nil;

        
        if ($truthy(($truthy($a = self['$double_check?']()) ? $rb_ge(roll_times, 2) : $a))) {
        } else {
          return nil
        };
        count_bucket = $hash2([], {});
        $send(dice_list, 'each', [], ($$7 = function(val){var self = $$7.$$s || this, $b, $writer = nil;

        
          
          if (val == null) {
            val = nil;
          };
          ($truthy($b = count_bucket['$[]'](val)) ? $b : (($writer = [val, 0]), $send(count_bucket, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          
          $writer = [val, $rb_plus(count_bucket['$[]'](val), 1)];
          $send(count_bucket, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$7.$$s = self, $$7.$$arity = 1, $$7));
        reroll_threshold = (function() {if (self.dicebot.$sameDiceRerollCount()['$=='](1)) {
          return roll_times
        } else {
          return self.dicebot.$sameDiceRerollCount()
        }; return nil; })();
        return $send(count_bucket, 'each', [], ($$8 = function(_, num){var self = $$8.$$s || this;

        
          
          if (_ == null) {
            _ = nil;
          };
          
          if (num == null) {
            num = nil;
          };
          if ($truthy($rb_ge(num, reroll_threshold))) {
            return dice_queue.$push(num)
          } else {
            return nil
          };}, $$8.$$s = self, $$8.$$arity = 2, $$8));
      }, $Randomizer_enqueue_reroll$6.$$arity = 3), nil) && 'enqueue_reroll';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["dice/AddDice"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$nick_e', '$new', '$parse', '$error?', '$cmp_op', '$eval', '$lhs', '$<=', '$size', '$dice_list', '$is_a?', '$output', '$count', '$sides', '$getDiceRevision', '$+', '$inject', '$to_proc', '$check_result', '$rhs', '$getDiceRolledAdditionalText']);
  
  self.$require("utils/normalize");
  self.$require("dice/add_dice/parser");
  self.$require("dice/add_dice/randomizer");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AddDice');

    var $nesting = [self].concat($parent_nesting), $AddDice_initialize$1, $AddDice_rollDice$2;

    self.$$prototype.bcdice = self.$$prototype.diceBot = self.$$prototype.nick_e = nil;
    
    
    Opal.def(self, '$initialize', $AddDice_initialize$1 = function $$initialize(bcdice, diceBot) {
      var self = this;

      
      self.bcdice = bcdice;
      self.diceBot = diceBot;
      self.nick_e = self.bcdice.$nick_e();
      return (self.dice_list = []);
    }, $AddDice_initialize$1.$$arity = 2);
    return (Opal.def(self, '$rollDice', $AddDice_rollDice$2 = function $$rollDice(string) {
      var $a, $b, self = this, parser = nil, command = nil, randomizer = nil, total = nil, output = nil, dice_list = nil, num_one = nil, num_max = nil, suffix = nil, revision = nil, dice_total = nil;

      
      parser = $$($nesting, 'Parser').$new(string);
      command = parser.$parse();
      if ($truthy(parser['$error?']())) {
        return "1"};
      randomizer = $$($nesting, 'Randomizer').$new(self.bcdice, self.diceBot, command.$cmp_op());
      total = command.$lhs().$eval(randomizer);
      output = (function() {if ($truthy(($truthy($a = $rb_le(randomizer.$dice_list().$size(), 1)) ? command.$lhs()['$is_a?']($$$($$($nesting, 'Node'), 'DiceRoll')) : $a))) {
        return "" + (self.nick_e) + ": (" + (command) + ") ＞ " + (total)
      } else {
        return "" + (self.nick_e) + ": (" + (command) + ") ＞ " + (command.$lhs().$output()) + " ＞ " + (total)
      }; return nil; })();
      dice_list = randomizer.$dice_list();
      num_one = dice_list.$count(1);
      num_max = dice_list.$count(randomizer.$sides());
      $b = self.diceBot.$getDiceRevision(num_max, randomizer.$sides(), total), $a = Opal.to_ary($b), (suffix = ($a[0] == null ? nil : $a[0])), (revision = ($a[1] == null ? nil : $a[1])), $b;
      output = $rb_plus(output, suffix);
      total = $rb_plus(total, revision);
      if ($truthy(command.$cmp_op())) {
        
        dice_total = $send(dice_list, 'inject', [], "+".$to_proc());
        output = $rb_plus(output, self.diceBot.$check_result(total, dice_total, dice_list, randomizer.$sides(), command.$cmp_op(), command.$rhs()));};
      output = $rb_plus(output, self.diceBot.$getDiceRolledAdditionalText(num_one, num_max, randomizer.$sides()));
      return output;
    }, $AddDice_rollDice$2.$$arity = 1), nil) && 'rollDice';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/format"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$module_function', '$===', '$to_s', '$==', '$>']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Format');

    var $nesting = [self].concat($parent_nesting), $Format_comparison_operator$1, $Format_modifier$2;

    
    self.$module_function();
    
    Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
      var self = this, $case = nil;

      return (function() {$case = op;
      if ("=="['$===']($case)) {return "="}
      else if ("!="['$===']($case)) {return "<>"}
      else if ($$($nesting, 'Symbol')['$===']($case)) {return op.$to_s()}
      else { return nil }})()
    }, $Format_comparison_operator$1.$$arity = 1);
    
    Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
      var self = this;

      if (number['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(number, 0))) {
        return "" + "+" + (number)
      } else {
        return number.$to_s()
      }
    }, $Format_modifier$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ModifierFormatter');

    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;

    
    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
      } else {
        return modifier.$to_s()
      }
    }, $ModifierFormatter_format_modifier$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["dice/UpperDice"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$nick_e', '$match', '$[]', '$comparison_operator', '$to_i', '$reroll_threshold', '$eval', '$new', '$to_sym', '$fractionType', '$<=', '$expr', '$each', '$split', '$map', '$to_proc', '$concat', '$roll', '$count', '$+', '$==', '$!=', '$send', '$inject', '$max', '$dice_text', '$format_modifier', '$join', '$private', '$upperRollThreshold', '$roll_ones', '$&', '$sortType', '$sort_by', '$loop', '$push', '$<', '$size']);
  
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/normalize");
  self.$require("utils/format");
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'UpperDice');

    var $nesting = [self].concat($parent_nesting), $UpperDice_initialize$1, $UpperDice_rollDice$2, $UpperDice_roll$7, $UpperDice_roll_ones$10, $UpperDice_dice_text$12, $UpperDice_reroll_threshold$14, $UpperDice_expr$15;

    self.$$prototype.bcdice = self.$$prototype.cmp_op = self.$$prototype.diceBot = self.$$prototype.reroll_threshold = self.$$prototype.nick_e = self.$$prototype.command = self.$$prototype.modify_number = self.$$prototype.target_number = nil;
    
    self.$include($$($nesting, 'ModifierFormatter'));
    
    Opal.def(self, '$initialize', $UpperDice_initialize$1 = function $$initialize(bcdice, diceBot) {
      var self = this;

      
      self.bcdice = bcdice;
      self.diceBot = diceBot;
      return (self.nick_e = self.bcdice.$nick_e());
    }, $UpperDice_initialize$1.$$arity = 2);
    
    Opal.def(self, '$rollDice', $UpperDice_rollDice$2 = function $$rollDice(string) {
      var $a, $$3, $$4, $$5, $$6, self = this, m = nil, roll_list = nil, result = nil, success_count = nil, sum_list = nil, total = nil, max = nil, sequence = nil;

      
      if ($truthy((m = /^S?(\d+U\d+(?:\+\d+U\d+)*)(?:\[(\d+)\])?([\+\-\d]*)(?:([<>=]+)(\d+))?(?:@(\d+))?/i.$match(string)))) {
      } else {
        return "1"
      };
      self.command = m['$[]'](1);
      self.cmp_op = $$($nesting, 'Normalize').$comparison_operator(m['$[]'](4));
      self.target_number = (function() {if ($truthy(self.cmp_op)) {
        return m['$[]'](5).$to_i()
      } else {
        return nil
      }; return nil; })();
      self.reroll_threshold = self.$reroll_threshold(($truthy($a = m['$[]'](2)) ? $a : m['$[]'](6)));
      self.modify_number = (function() {if ($truthy(m['$[]'](3))) {
        return $$($nesting, 'ArithmeticEvaluator').$new().$eval(m['$[]'](3), self.diceBot.$fractionType().$to_sym())
      } else {
        return 0
      }; return nil; })();
      if ($truthy($rb_le(self.reroll_threshold, 1))) {
        return "" + (self.nick_e) + ": (" + (self.$expr()) + ") ＞ 無限ロールの条件がまちがっています"};
      roll_list = [];
      $send(self.command.$split("+"), 'each', [], ($$3 = function(u){var self = $$3.$$s || this, $b, $c, times = nil, sides = nil;

      
        
        if (u == null) {
          u = nil;
        };
        $c = $send(u.$split("U", 2), 'map', [], "to_i".$to_proc()), $b = Opal.to_ary($c), (times = ($b[0] == null ? nil : $b[0])), (sides = ($b[1] == null ? nil : $b[1])), $c;
        return roll_list.$concat(self.$roll(times, sides));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
      result = (function() {if ($truthy(self.cmp_op)) {
        
        success_count = $send(roll_list, 'count', [], ($$4 = function(e){var self = $$4.$$s || this, x = nil;
          if (self.modify_number == null) self.modify_number = nil;
          if (self.cmp_op == null) self.cmp_op = nil;
          if (self.target_number == null) self.target_number = nil;

        
          
          if (e == null) {
            e = nil;
          };
          x = $rb_plus(e['$[]']("sum"), self.modify_number);
          if (self.cmp_op['$==']("!=")) {
            return x['$!='](self.target_number)
          } else {
            return x.$send(self.cmp_op, self.target_number)
          };}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        return "" + "成功数" + (success_count);
      } else {
        
        sum_list = $send(roll_list, 'map', [], ($$5 = function(e){var self = $$5.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return e['$[]']("sum");}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        total = $rb_plus(sum_list.$inject(0, "+"), self.modify_number);
        max = $send(sum_list, 'map', [], ($$6 = function(i){var self = $$6.$$s || this;
          if (self.modify_number == null) self.modify_number = nil;

        
          
          if (i == null) {
            i = nil;
          };
          return $rb_plus(i, self.modify_number);}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$max();
        return "" + (max) + "/" + (total) + "(最大/合計)";
      }; return nil; })();
      sequence = ["" + (self.nick_e) + ": (" + (self.$expr()) + ")", $rb_plus(self.$dice_text(roll_list), self.$format_modifier(self.modify_number)), result];
      return sequence.$join(" ＞ ");
    }, $UpperDice_rollDice$2.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$roll', $UpperDice_roll$7 = function $$roll(times, sides) {
      var $$8, $$9, self = this, ret = nil;

      
      if (self.diceBot.$upperRollThreshold()['$==']("Max")) {
        self.reroll_threshold = sides};
      ret = $send($$($nesting, 'Array'), 'new', [times], ($$8 = function(){var self = $$8.$$s || this, list = nil;

      
        list = self.$roll_ones(sides);
        return $hash2(["sum", "list"], {"sum": list.$inject(0, "+"), "list": list});}, $$8.$$s = self, $$8.$$arity = 0, $$8));
      if ($truthy(self.diceBot.$sortType()['$&'](2)['$!='](0))) {
        ret = $send(ret, 'sort_by', [], ($$9 = function(e){var self = $$9.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return e['$[]']("sum");}, $$9.$$s = self, $$9.$$arity = 1, $$9))};
      return ret;
    }, $UpperDice_roll$7.$$arity = 2);
    
    Opal.def(self, '$roll_ones', $UpperDice_roll_ones$10 = function $$roll_ones(sides) {
      var $$11, self = this, dice_list = nil;

      
      dice_list = [];
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$11 = function(){var self = $$11.$$s || this, $a, $b, value = nil;
        if (self.bcdice == null) self.bcdice = nil;
        if (self.reroll_threshold == null) self.reroll_threshold = nil;

      
        $b = self.bcdice.$roll(1, sides), $a = Opal.to_ary($b), (value = ($a[0] == null ? nil : $a[0])), $b;
        dice_list.$push(value);
        if ($truthy($rb_lt(value, self.reroll_threshold))) {
          
          Opal.brk(nil, $brk)
        } else {
          return nil
        };}, $$11.$$s = self, $$11.$$brk = $brk, $$11.$$arity = 0, $$11))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return dice_list;
    }, $UpperDice_roll_ones$10.$$arity = 1);
    
    Opal.def(self, '$dice_text', $UpperDice_dice_text$12 = function $$dice_text(roll_list) {
      var $$13, self = this;

      return $send(roll_list, 'map', [], ($$13 = function(e){var self = $$13.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        if (e['$[]']("list").$size()['$=='](1)) {
          return e['$[]']("sum")
        } else {
          return "" + (e['$[]']("sum")) + "[" + (e['$[]']("list").$join(",")) + "]"
        };}, $$13.$$s = self, $$13.$$arity = 1, $$13)).$join(",")
    }, $UpperDice_dice_text$12.$$arity = 1);
    
    Opal.def(self, '$reroll_threshold', $UpperDice_reroll_threshold$14 = function $$reroll_threshold(target) {
      var self = this;

      if ($truthy(target)) {
        return target.$to_i()
      } else if (self.diceBot.$upperRollThreshold()['$==']("Max")) {
        return 2
      } else {
        return self.diceBot.$upperRollThreshold()
      }
    }, $UpperDice_reroll_threshold$14.$$arity = 1);
    return (Opal.def(self, '$expr', $UpperDice_expr$15 = function $$expr() {
      var self = this;

      return "" + (self.command) + "[" + (self.reroll_threshold) + "]" + (self.$format_modifier(self.modify_number)) + ($$($nesting, 'Format').$comparison_operator(self.cmp_op)) + (self.target_number)
    }, $UpperDice_expr$15.$$arity = 0), nil) && 'expr';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["dice/RerollDice"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$nick_e', '$parse', '$msg_invalid_reroll_number', '$map', '$split', '$to_proc', '$all?', '$valid_reroll_rule?', '$[]', '$!', '$empty?', '$should_reroll?', '$shift', '$+', '$roll_', '$count', '$compare', '$push', '$join', '$zero?', '$>', '$getGrichText', '$compact', '$expr', '$trim_prefix', '$private', '$match', '$comparison_operator', '$to_i', '$target_from_default', '$decide_reroll_cmp_op', '$decide_reroll_threshold', '$defaultSuccessTarget', '$!=', '$rerollNumber', '$===', '$<', '$<=', '$>=', '$include?', '$roll', '$&', '$sortType', '$start_with?', '$size', '$==', '$send']);
  
  self.$require("utils/normalize");
  self.$require("utils/format");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RerollDice');

    var $nesting = [self].concat($parent_nesting), $RerollDice_initialize$1, $RerollDice_rollDice$2, $RerollDice_parse$7, $RerollDice_target_from_default$8, $RerollDice_decide_reroll_cmp_op$9, $RerollDice_decide_reroll_threshold$10, $RerollDice_expr$11, $RerollDice_msg_invalid_reroll_number$12, $RerollDice_valid_reroll_rule$ques$13, $RerollDice_roll_$14, $RerollDice_trim_prefix$15, $RerollDice_compare$16;

    self.$$prototype.bcdice = self.$$prototype.reroll_threshold = self.$$prototype.notation = self.$$prototype.diceBot = self.$$prototype.cmp_op = self.$$prototype.nick_e = self.$$prototype.target_number = self.$$prototype.reroll_cmp_op = nil;
    
    
    Opal.def(self, '$initialize', $RerollDice_initialize$1 = function $$initialize(bcdice, diceBot) {
      var self = this;

      
      self.bcdice = bcdice;
      self.diceBot = diceBot;
      return (self.nick_e = self.bcdice.$nick_e());
    }, $RerollDice_initialize$1.$$arity = 2);
    
    Opal.def(self, '$rollDice', $RerollDice_rollDice$2 = function $$rollDice(string) {
      var $$3, $$4, $a, $b, $c, $$5, $$6, self = this, dice_queue = nil, success_count = nil, dice_str_list = nil, dice_cnt_total = nil, one_count = nil, loop_count = nil, dice_total_count = nil, x = nil, n = nil, depth = nil, dice_list = nil, reroll_count = nil, grich_text = nil, sequence = nil;

      
      if ($truthy(self.$parse(string))) {
      } else {
        return nil
      };
      if ($truthy(self.reroll_threshold)) {
      } else {
        return self.$msg_invalid_reroll_number(string)
      };
      dice_queue = $send(self.notation.$split("+"), 'map', [], ($$3 = function(xRn){var self = $$3.$$s || this, $a, $b, x = nil, n = nil;

      
        
        if (xRn == null) {
          xRn = nil;
        };
        $b = $send(xRn.$split("R"), 'map', [], "to_i".$to_proc()), $a = Opal.to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;
        return [x, n, 0];}, $$3.$$s = self, $$3.$$arity = 1, $$3));
      if ($truthy($send(dice_queue, 'all?', [], ($$4 = function(d){var self = $$4.$$s || this;
        if (self.reroll_cmp_op == null) self.reroll_cmp_op = nil;
        if (self.reroll_threshold == null) self.reroll_threshold = nil;

      
        
        if (d == null) {
          d = nil;
        };
        return self['$valid_reroll_rule?'](d['$[]'](1), self.reroll_cmp_op, self.reroll_threshold);}, $$4.$$s = self, $$4.$$arity = 1, $$4)))) {
      } else {
        return self.$msg_invalid_reroll_number(string)
      };
      success_count = 0;
      dice_str_list = [];
      dice_cnt_total = 0;
      one_count = 0;
      loop_count = 0;
      dice_total_count = 0;
      while ($truthy(($truthy($b = dice_queue['$empty?']()['$!']()) ? self.diceBot['$should_reroll?'](loop_count) : $b))) {
        
        $c = dice_queue.$shift(), $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (n = ($b[1] == null ? nil : $b[1])), (depth = ($b[2] == null ? nil : $b[2])), $c;
        loop_count = $rb_plus(loop_count, 1);
        dice_total_count = $rb_plus(dice_total_count, x);
        dice_list = self.$roll_(x, n);
        if ($truthy(self.cmp_op)) {
          success_count = $rb_plus(success_count, $send(dice_list, 'count', [], ($$5 = function(val){var self = $$5.$$s || this;
            if (self.cmp_op == null) self.cmp_op = nil;
            if (self.target_number == null) self.target_number = nil;

          
            
            if (val == null) {
              val = nil;
            };
            return self.$compare(val, self.cmp_op, self.target_number);}, $$5.$$s = self, $$5.$$arity = 1, $$5)))};
        reroll_count = $send(dice_list, 'count', [], ($$6 = function(val){var self = $$6.$$s || this;
          if (self.reroll_cmp_op == null) self.reroll_cmp_op = nil;
          if (self.reroll_threshold == null) self.reroll_threshold = nil;

        
          
          if (val == null) {
            val = nil;
          };
          return self.$compare(val, self.reroll_cmp_op, self.reroll_threshold);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
        dice_str_list.$push(dice_list.$join(","));
        if ($truthy(depth['$zero?']())) {
          one_count = $rb_plus(one_count, dice_list.$count(1))};
        if ($truthy($rb_gt(reroll_count, 0))) {
          dice_queue.$push([reroll_count, n, $rb_plus(depth, 1)])};
      };
      grich_text = self.diceBot.$getGrichText(one_count, dice_total_count, success_count);
      sequence = [self.$expr(), dice_str_list.$join(" + "), "" + "成功数" + (success_count), self.$trim_prefix(" ＞ ", grich_text)].$compact();
      return "" + (self.nick_e) + ": " + (sequence.$join(" ＞ "));
    }, $RerollDice_rollDice$2.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$parse', $RerollDice_parse$7 = function $$parse(command) {
      var $a, $b, self = this, m = nil;

      
      m = /^S?(\d+R\d+(?:\+\d+R\d+)*)(?:\[([<>=]+)?(\d+)\])?(?:([<>=]+)(\d+))?(?:@([<>=]+)?(\d+))?$/.$match(command);
      if ($truthy(m)) {
      } else {
        return false
      };
      self.notation = m['$[]'](1);
      self.cmp_op = $$($nesting, 'Normalize').$comparison_operator(m['$[]'](4));
      self.target_number = (function() {if ($truthy(self.cmp_op)) {
        return m['$[]'](5).$to_i()
      } else {
        return nil
      }; return nil; })();
      if ($truthy(self.cmp_op)) {
      } else {
        $b = self.$target_from_default(), $a = Opal.to_ary($b), (self.cmp_op = ($a[0] == null ? nil : $a[0])), (self.target_number = ($a[1] == null ? nil : $a[1])), $b
      };
      self.reroll_cmp_op = self.$decide_reroll_cmp_op(m);
      self.reroll_threshold = self.$decide_reroll_threshold(($truthy($a = m['$[]'](3)) ? $a : m['$[]'](7)), self.target_number);
      return true;
    }, $RerollDice_parse$7.$$arity = 1);
    
    Opal.def(self, '$target_from_default', $RerollDice_target_from_default$8 = function $$target_from_default() {
      var self = this, m = nil, cmp_op = nil, target_number = nil;

      
      m = /^([<>=]+)(\d+)$/.$match(self.diceBot.$defaultSuccessTarget());
      if ($truthy(m)) {
      } else {
        return [nil, nil]
      };
      cmp_op = $$($nesting, 'Normalize').$comparison_operator(m['$[]'](1));
      target_number = (function() {if ($truthy(cmp_op)) {
        return m['$[]'](2).$to_i()
      } else {
        return nil
      }; return nil; })();
      return [cmp_op, target_number];
    }, $RerollDice_target_from_default$8.$$arity = 0);
    
    Opal.def(self, '$decide_reroll_cmp_op', $RerollDice_decide_reroll_cmp_op$9 = function $$decide_reroll_cmp_op(m) {
      var $a, self = this, bracket_op = nil, bracket_number = nil, at_op = nil, at_number = nil, cmp_op = nil, op = nil;

      
      bracket_op = m['$[]'](2);
      bracket_number = m['$[]'](3);
      at_op = m['$[]'](6);
      at_number = m['$[]'](7);
      cmp_op = m['$[]'](4);
      op = (function() {if ($truthy(($truthy($a = bracket_op) ? bracket_number : $a))) {
        return bracket_op
      } else if ($truthy(($truthy($a = at_op) ? at_number : $a))) {
        return at_op
      } else {
        return cmp_op
      }; return nil; })();
      return ($truthy($a = $$($nesting, 'Normalize').$comparison_operator(op)) ? $a : ">=");
    }, $RerollDice_decide_reroll_cmp_op$9.$$arity = 1);
    
    Opal.def(self, '$decide_reroll_threshold', $RerollDice_decide_reroll_threshold$10 = function $$decide_reroll_threshold(captured_threshold, target_number) {
      var self = this;

      if ($truthy(captured_threshold)) {
        return captured_threshold.$to_i()
      } else if ($truthy(self.diceBot.$rerollNumber()['$!='](0))) {
        return self.diceBot.$rerollNumber()
      } else {
        return target_number
      }
    }, $RerollDice_decide_reroll_threshold$10.$$arity = 2);
    
    Opal.def(self, '$expr', $RerollDice_expr$11 = function $$expr() {
      var self = this, reroll_cmp_op_text = nil, cmp_op_text = nil;

      
      reroll_cmp_op_text = (function() {if ($truthy(self.cmp_op['$!='](self.reroll_cmp_op))) {
        return $$($nesting, 'Format').$comparison_operator(self.reroll_cmp_op)
      } else {
        return nil
      }; return nil; })();
      cmp_op_text = $$($nesting, 'Format').$comparison_operator(self.cmp_op);
      return "" + "(" + (self.notation) + "[" + (reroll_cmp_op_text) + (self.reroll_threshold) + "]" + (cmp_op_text) + (self.target_number) + ")";
    }, $RerollDice_expr$11.$$arity = 0);
    
    Opal.def(self, '$msg_invalid_reroll_number', $RerollDice_msg_invalid_reroll_number$12 = function $$msg_invalid_reroll_number(command) {
      var self = this;

      return "" + (self.nick_e) + ": " + (command) + " ＞ 条件が間違っています。2R6>=5 あるいは 2R6[5] のように振り足し目標値を指定してください。"
    }, $RerollDice_msg_invalid_reroll_number$12.$$arity = 1);
    
    Opal.def(self, '$valid_reroll_rule?', $RerollDice_valid_reroll_rule$ques$13 = function(sides, cmp_op, reroll_threshold) {
      var self = this, $case = nil;

      return (function() {$case = cmp_op;
      if ("<="['$===']($case)) {return $rb_lt(reroll_threshold, sides)}
      else if ("<"['$===']($case)) {return $rb_le(reroll_threshold, sides)}
      else if (">="['$===']($case)) {return $rb_gt(reroll_threshold, 1)}
      else if (">"['$===']($case)) {return $rb_ge(reroll_threshold, 1)}
      else if ("!="['$===']($case)) {return Opal.Range.$new(1, sides, false)['$include?'](reroll_threshold)}
      else {return true}})()
    }, $RerollDice_valid_reroll_rule$ques$13.$$arity = 3);
    
    Opal.def(self, '$roll_', $RerollDice_roll_$14 = function $$roll_(times, sides) {
      var $a, $b, self = this, _ = nil, dice_list = nil;

      
      $b = self.bcdice.$roll(times, sides, self.diceBot.$sortType()['$&'](2)), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (dice_list = ($a[1] == null ? nil : $a[1])), $b;
      return $send(dice_list.$split(","), 'map', [], "to_i".$to_proc());
    }, $RerollDice_roll_$14.$$arity = 2);
    
    Opal.def(self, '$trim_prefix', $RerollDice_trim_prefix$15 = function $$trim_prefix(prefix, string) {
      var self = this;

      
      if ($truthy(string['$start_with?'](prefix))) {
        string = string['$[]'](Opal.Range.$new(prefix.$size(), -1, false))};
      if ($truthy(string['$empty?']())) {
        return nil
      } else {
        return string
      };
    }, $RerollDice_trim_prefix$15.$$arity = 2);
    return (Opal.def(self, '$compare', $RerollDice_compare$16 = function $$compare(lhs, op, rhs) {
      var self = this;

      if (op['$==']("!=")) {
        return lhs['$!='](rhs)
      } else {
        return lhs.$send(op, rhs)
      }
    }, $RerollDice_compare$16.$$arity = 3), nil) && 'compare';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["bcdiceCore"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2, $klass = Opal.klass, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$<', '$===', '$new', '$initValues', '$attr_accessor', '$freeze', '$attr_reader', '$setDiceBot', '$setBcDice', '$setDir', '$id', '$nil?', '$bcdice=', '$-', '$readExtraCard', '$first', '$split', '$debug', '$parren_killer', '$upcase', '$recieveMessageCatched', '$printErrorMessage', '$sendMessageToOnlySender', '$+', '$to_s', '$join', '$backtrace', '$setTnick', '$executePointCounter', '$addPlot', '$clone', '$=~', '$getPrintPlotChannel', '$==', '$empty?', '$executeCommand', '$countHolder', '$sendMessage', '$last_match', '$addToSecretDiceResult', '$getNick', '$[]', '$recievePublicMessageCatched', '$setChannelForPlotOrSecretDice', '$printPlot', '$printSecretRoll', '$executePointCounterPublic', '$executeDiceRoll', '$!=', '$changeMessageOriginal', '$executeCard', '$openSecretRoll', '$each', '$setPrintPlotChannel', '$isTalkChannel', '$!', '$dice_command', '$broadmsg', '$setNick', '$rollD66', '$checkAddRoll', '$checkBDice', '$checkRnDice', '$checkUpperRoll', '$checkChoiceCommand', '$getTableDataResult', '$start_with?', '$rollDice', '$bdice', '$dice_command_xRn', '$choice_random', '$getTableData', '$getTableIndexDiceValueAndDiceText', '$find', '$rollTableMessageDiceText', '$nick_e', '$roll', '$getD66Infos', '$getD66ValueByMarker', '$div', '$%', '$gsub', '$to_i', '$d66Type', '$isD9', '$<=', '$times', '$loop', '$roll_d9', '$rand', '$sendMode', '$>=', '$>', '$check_hit', '$push', '$sort_by', '$dice_num', '$randNomal', '$randFromRands', '$<<', '$rand_inner', '$push_to_detail', '$*', '$shift', '$raise', '$inspect', '$sub', '$marshalSignOfInequality', '$defaultSuccessTarget', '$&', '$sortType', '$getGrichText', '$d66dice', '$getD66', '$getD66Value', '$getSecretRollMembersHolderKey', '$getSecretDiceResultHolderKey', '$delete', '$addToSecretRollMembersHolder', '$saveSecretDiceResult', '$[]=', '$include?', '$length', '$is_a?', '$sendMessageToChannels', '$map', '$to_proc', '$changeRangeTextToNumberText', '$to_sym', '$fractionType', '$eval', '$changeText', '$loadDiceBot', '$loadUnknownGame', '$postSet', '$name']);
  
  self.$require("log");
  self.$require("configBcDice.rb");
  self.$require("CountHolder.rb");
  self.$require("utils/ArithmeticEvaluator.rb");
  $gvars.RUBY18_WIN = ($truthy($a = $rb_lt($$($nesting, 'RUBY_VERSION'), "1.9")) ? /mswin(?!ce)|mingw|cygwin|bccwin/i['$===']($$($nesting, 'RUBY_PLATFORM')) : $a);
  $gvars.secretRollMembersHolder = $hash2([], {});
  $gvars.secretDiceResultHolder = $hash2([], {});
  $gvars.plotPrintChannels = $hash2([], {});
  $gvars.point_counter = $hash2([], {});
  self.$require("CardTrader");
  self.$require("TableFileData");
  self.$require("diceBot/DiceBot");
  self.$require("diceBot/DiceBotLoader");
  self.$require("diceBot/DiceBotLoaderList");
  self.$require("dice/AddDice");
  self.$require("dice/UpperDice");
  self.$require("dice/RerollDice");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BCDiceMaker');

    var $nesting = [self].concat($parent_nesting), $BCDiceMaker_initialize$1, $BCDiceMaker_newBcDice$2;

    self.$$prototype.cardTrader = self.$$prototype.diceBot = self.$$prototype.counterInfos = self.$$prototype.tableFileData = nil;
    
    
    Opal.def(self, '$initialize', $BCDiceMaker_initialize$1 = function $$initialize() {
      var self = this;

      
      self.diceBot = $$($nesting, 'DiceBot').$new();
      self.cardTrader = $$($nesting, 'CardTrader').$new();
      self.cardTrader.$initValues();
      self.counterInfos = $hash2([], {});
      return (self.tableFileData = $$($nesting, 'TableFileData').$new());
    }, $BCDiceMaker_initialize$1.$$arity = 0);
    self.$attr_accessor("diceBotPath");
    return (Opal.def(self, '$newBcDice', $BCDiceMaker_newBcDice$2 = function $$newBcDice() {
      var self = this, bcdice = nil;

      
      bcdice = $$($nesting, 'BCDice').$new(self, self.cardTrader, self.diceBot, self.counterInfos, self.tableFileData);
      return bcdice;
    }, $BCDiceMaker_newBcDice$2.$$arity = 0), nil) && 'newBcDice';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BCDice');

    var $nesting = [self].concat($parent_nesting), $BCDice_initialize$3, $BCDice_setDir$4, $BCDice_isKeepSecretDice$5, $BCDice_getGameType$6, $BCDice_setDiceBot$7, $BCDice_readExtraCard$8, $BCDice_setIrcClient$9, $BCDice_setMessage$10, $BCDice_getOriginalMessage$11, $BCDice_changeMessageOriginal$12, $BCDice_recieveMessage$13, $BCDice_printErrorMessage$14, $BCDice_recieveMessageCatched$15, $BCDice_executePointCounter$16, $BCDice_addPlot$17, $BCDice_getPrintPlotChannel$18, $BCDice_setChannel$19, $BCDice_recievePublicMessage$20, $BCDice_recievePublicMessageCatched$21, $BCDice_printPlot$22, $BCDice_setChannelForPlotOrSecretDice$24, $BCDice_isTalkChannel$25, $BCDice_printSecretRoll$26, $BCDice_executePointCounterPublic$28, $BCDice_executeDiceRoll$29, $BCDice_setTest$30, $BCDice_executeCard$31, $BCDice_dice_command$32, $BCDice_checkAddRoll$33, $BCDice_checkBDice$34, $BCDice_checkRnDice$35, $BCDice_checkUpperRoll$36, $BCDice_checkChoiceCommand$37, $BCDice_getTableDataResult$38, $BCDice_getTableIndexDiceValueAndDiceText$40, $BCDice_rollTableMessageDiceText$41, $BCDice_roll$43, $BCDice_setRandomValues$47, $BCDice_rand_inner$48, $BCDice_rand$49, $BCDice_roll_tens_d10$50, $BCDice_roll_d9$51, $BCDice_setCollectRandResult$52, $BCDice_push_to_detail$53, $BCDice_randNomal$54, $BCDice_randFromRands$55, $BCDice_dice_num$56, $BCDice_bdice$57, $BCDice_rollD66$59, $BCDice_d66dice$60, $BCDice_getD66Infos$62, $BCDice_getD66ValueByMarker$63, $BCDice_getD66Value$64, $BCDice_getD66$65, $BCDice_openSecretRoll$66, $BCDice_getNick$68, $BCDice_addToSecretDiceResult$69, $BCDice_addToSecretRollMembersHolder$70, $BCDice_getSecretRollMembersHolderKey$71, $BCDice_saveSecretDiceResult$72, $BCDice_getSecretDiceResultHolderKey$73, $BCDice_setPrintPlotChannel$74, $BCDice_choice_random$75, $BCDice_getMarshaledSignOfInequality$76, $BCDice_marshalSignOfInequality$77, $BCDice_check_hit$78, $BCDice_broadmsg$79, $BCDice_sendMessage$80, $BCDice_sendMessageToOnlySender$81, $BCDice_sendMessageToChannels$82, $BCDice_parren_killer$83, $BCDice_changeRangeTextToNumberText$87, $BCDice_setGameByTitle$88;

    self.$$prototype.cardTrader = self.$$prototype.tableFileData = self.$$prototype.diceBot = self.$$prototype.messageOriginal = self.$$prototype.message = self.$$prototype.nick_e = self.$$prototype.tnick = self.$$prototype.messages = self.$$prototype.channel = self.$$prototype.counterInfos = self.$$prototype.isTest = self.$$prototype.isKeepSecretDice = self.$$prototype.rands = self.$$prototype.collect_rand_results = self.$$prototype.rand_results = self.$$prototype.detailed_rand_results = self.$$prototype.ircClient = nil;
    
    Opal.const_set($nesting[0], 'VERSION', "2.08.00".$freeze());
    self.$attr_reader("diceBot");
    self.$attr_reader("cardTrader");
    self.$attr_reader("rand_results");
    Opal.alias(self, "getRandResults", "rand_results");
    self.$attr_reader("detailed_rand_results");
    self.$attr_reader("nick_e");
    
    Opal.def(self, '$initialize', $BCDice_initialize$3 = function $$initialize(parent, cardTrader, diceBot, counterInfos, tableFileData) {
      var self = this;

      
      self.parent = parent;
      self.$setDiceBot(diceBot);
      self.cardTrader = cardTrader;
      self.cardTrader.$setBcDice(self);
      self.counterInfos = counterInfos;
      self.tableFileData = tableFileData;
      self.nick_e = "";
      self.tnick = "";
      self.rands = nil;
      self.isKeepSecretDice = true;
      self.collect_rand_results = false;
      self.rand_results = [];
      return (self.detailed_rand_results = []);
    }, $BCDice_initialize$3.$$arity = 5);
    
    Opal.def(self, '$setDir', $BCDice_setDir$4 = function $$setDir(dir, prefix) {
      var self = this;

      return self.tableFileData.$setDir(dir, prefix)
    }, $BCDice_setDir$4.$$arity = 2);
    
    Opal.def(self, '$isKeepSecretDice', $BCDice_isKeepSecretDice$5 = function $$isKeepSecretDice(b) {
      var self = this;

      return (self.isKeepSecretDice = b)
    }, $BCDice_isKeepSecretDice$5.$$arity = 1);
    
    Opal.def(self, '$getGameType', $BCDice_getGameType$6 = function $$getGameType() {
      var self = this;

      return self.diceBot.$id()
    }, $BCDice_getGameType$6.$$arity = 0);
    
    Opal.def(self, '$setDiceBot', $BCDice_setDiceBot$7 = function $$setDiceBot(diceBot) {
      var self = this, $writer = nil;

      
      if ($truthy(diceBot['$nil?']())) {
        return nil};
      self.diceBot = diceBot;
      
      $writer = [self];
      $send(self.diceBot, 'bcdice=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $BCDice_setDiceBot$7.$$arity = 1);
    
    Opal.def(self, '$readExtraCard', $BCDice_readExtraCard$8 = function $$readExtraCard(cardFileName) {
      var self = this;

      return self.cardTrader.$readExtraCard(cardFileName)
    }, $BCDice_readExtraCard$8.$$arity = 1);
    
    Opal.def(self, '$setIrcClient', $BCDice_setIrcClient$9 = function $$setIrcClient(client) {
      var self = this;

      return (self.ircClient = client)
    }, $BCDice_setIrcClient$9.$$arity = 1);
    
    Opal.def(self, '$setMessage', $BCDice_setMessage$10 = function $$setMessage(message) {
      var self = this, openPattern = nil, messageToSet = nil, $case = nil;
      if ($gvars.OPEN_DICE == null) $gvars.OPEN_DICE = nil;
      if ($gvars.OPEN_PLOT == null) $gvars.OPEN_PLOT = nil;

      
      openPattern = new RegExp("" + "^\\s*(?:" + ($gvars.OPEN_DICE) + "|" + ($gvars.OPEN_PLOT) + ")\\s*$", 'i');
      messageToSet = (function() {$case = message;
      if (openPattern['$===']($case)) {return message}
      else {return message.$split(/\s/, 2).$first()}})();
      self.$debug("setMessage messageToSet", messageToSet);
      self.messageOriginal = self.$parren_killer(messageToSet);
      self.message = self.messageOriginal.$upcase();
      return self.$debug("@message", self.message);
    }, $BCDice_setMessage$10.$$arity = 1);
    
    Opal.def(self, '$getOriginalMessage', $BCDice_getOriginalMessage$11 = function $$getOriginalMessage() {
      var self = this;

      return self.messageOriginal
    }, $BCDice_getOriginalMessage$11.$$arity = 0);
    
    Opal.def(self, '$changeMessageOriginal', $BCDice_changeMessageOriginal$12 = function $$changeMessageOriginal() {
      var self = this;

      return (self.message = self.messageOriginal)
    }, $BCDice_changeMessageOriginal$12.$$arity = 0);
    
    Opal.def(self, '$recieveMessage', $BCDice_recieveMessage$13 = function $$recieveMessage(nick_e, tnick) {
      var self = this, e = nil;

      try {
        return self.$recieveMessageCatched(nick_e, tnick)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            return self.$printErrorMessage(e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $BCDice_recieveMessage$13.$$arity = 2);
    
    Opal.def(self, '$printErrorMessage', $BCDice_printErrorMessage$14 = function $$printErrorMessage(e) {
      var self = this;

      return self.$sendMessageToOnlySender($rb_plus($rb_plus("error ", e.$to_s()), e.$backtrace().$join("\n")))
    }, $BCDice_printErrorMessage$14.$$arity = 1);
    
    Opal.def(self, '$recieveMessageCatched', $BCDice_recieveMessageCatched$15 = function $$recieveMessageCatched(nick_e, tnick) {
      var self = this;

      
      self.$debug("recieveMessage nick_e, tnick", nick_e, tnick);
      self.nick_e = nick_e;
      self.cardTrader.$setTnick(self.nick_e);
      self.tnick = tnick;
      self.cardTrader.$setTnick(self.tnick);
      self.$debug("@nick_e, @tnick", self.nick_e, self.tnick);
      self.$executePointCounter();
      return self.$addPlot(self.messageOriginal.$clone());
    }, $BCDice_recieveMessageCatched$15.$$arity = 2);
    
    Opal.def(self, '$executePointCounter', $BCDice_executePointCounter$16 = function $$executePointCounter() {
      var $a, $b, self = this, arg = nil, channel = nil, pointerMode = nil, output = nil, $case = nil;

      
      arg = self.messages;
      self.$debug("executePointCounter arg", arg);
      if ($truthy(arg['$=~'](/^#/))) {
      } else {
        
        self.$debug("executePointCounter is NOT matched");
        return nil;
      };
      channel = self.$getPrintPlotChannel(self.nick_e);
      self.$debug("getPrintPlotChannel get channel", channel);
      if (channel['$==']("1")) {
        
        self.$sendMessageToOnlySender("表示チャンネルが登録されていません");
        return nil;};
      if ($truthy(self.tnick['$empty?']())) {
      } else {
        arg = $rb_plus(arg, "" + "->" + (self.tnick))
      };
      pointerMode = "sameNick";
      $b = self.$countHolder().$executeCommand(arg, self.nick_e, channel, pointerMode), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (pointerMode = ($a[1] == null ? nil : $a[1])), $b;
      self.$debug("point_counter_command called, line", 195);
      self.$debug("output", output);
      self.$debug("pointerMode", pointerMode);
      if (output['$==']("1")) {
        
        self.$debug("executePointCounter point_counter_command output is \"1\"");
        return nil;};
      $case = pointerMode;
      if ("sameNick"['$===']($case)) {
      self.$debug("executePointCounter:Talkで返事");
      self.$sendMessageToOnlySender(output);}
      else if ("sameChannel"['$===']($case)) {
      self.$debug("executePointCounter:publicで返事");
      self.$sendMessage(channel, output);};
      return self.$debug("executePointCounter end");
    }, $BCDice_executePointCounter$16.$$arity = 0);
    
    Opal.def(self, '$addPlot', $BCDice_addPlot$17 = function $$addPlot(arg) {
      var self = this, plot = nil, channel = nil;
      if ($gvars.ADD_PLOT == null) $gvars.ADD_PLOT = nil;

      
      self.$debug("addPlot begin arg", arg);
      if ($truthy(new RegExp("" + ($gvars.ADD_PLOT) + "[:：](.+)", 'i')['$=~'](arg))) {
      } else {
        
        self.$debug("addPlot exit");
        return nil;
      };
      plot = $$($nesting, 'Regexp').$last_match(1);
      channel = self.$getPrintPlotChannel(self.nick_e);
      self.$debug("addPlot channel", channel);
      if ($truthy(channel['$nil?']())) {
        
        self.$debug("channel.nil?");
        return self.$sendMessageToOnlySender("プロット出力先が登録されていません");
      } else {
        
        self.$debug("addToSecretDiceResult calling...");
        self.$addToSecretDiceResult(plot, channel, 1);
        return self.$sendMessage(channel, "" + (self.nick_e) + " さんがプロットしました");
      };
    }, $BCDice_addPlot$17.$$arity = 1);
    
    Opal.def(self, '$getPrintPlotChannel', $BCDice_getPrintPlotChannel$18 = function $$getPrintPlotChannel(nick) {
      var self = this;
      if ($gvars.plotPrintChannels == null) $gvars.plotPrintChannels = nil;

      
      nick = self.$getNick(nick);
      return $gvars.plotPrintChannels['$[]'](nick);
    }, $BCDice_getPrintPlotChannel$18.$$arity = 1);
    
    Opal.def(self, '$setChannel', $BCDice_setChannel$19 = function $$setChannel(channel) {
      var self = this;

      
      self.$debug("setChannel called channel", channel);
      return (self.channel = channel);
    }, $BCDice_setChannel$19.$$arity = 1);
    
    Opal.def(self, '$recievePublicMessage', $BCDice_recievePublicMessage$20 = function $$recievePublicMessage(nick_e) {
      var self = this, e = nil;

      try {
        return self.$recievePublicMessageCatched(nick_e)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            return self.$printErrorMessage(e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $BCDice_recievePublicMessage$20.$$arity = 1);
    
    Opal.def(self, '$recievePublicMessageCatched', $BCDice_recievePublicMessageCatched$21 = function $$recievePublicMessageCatched(nick_e) {
      var self = this, output = nil;
      if ($gvars.OPEN_PLOT == null) $gvars.OPEN_PLOT = nil;
      if ($gvars.OPEN_DICE == null) $gvars.OPEN_DICE = nil;

      
      self.$debug("recievePublicMessageCatched begin nick_e", nick_e);
      self.$debug("recievePublicMessageCatched @channel", self.channel);
      self.$debug("recievePublicMessageCatched @message", self.message);
      self.nick_e = nick_e;
      self.$setChannelForPlotOrSecretDice();
      if ($truthy(new RegExp("" + "(^|\\s+)" + ($gvars.OPEN_PLOT) + "(\\s+|$)", 'i')['$=~'](self.message))) {
        
        self.$debug("print plot", self.message);
        self.$printPlot();};
      if ($truthy(new RegExp("" + "(^|\\s+)" + ($gvars.OPEN_DICE) + "(\\s+|$)", 'i')['$=~'](self.message))) {
        
        self.$debug("print secret roll", self.message);
        self.$printSecretRoll();};
      self.$executePointCounterPublic();
      self.$executeDiceRoll();
      if ($truthy(/(^|\s)C([-\d]+)\s*$/i['$=~'](self.message))) {
        
        output = $$($nesting, 'Regexp').$last_match(2);
        if ($truthy(output['$!='](""))) {
          self.$sendMessage(self.channel, "" + (self.nick_e) + ": 計算結果 ＞ " + (output))};};
      self.$changeMessageOriginal();
      self.$executeCard();
      return self.$debug("\non_public end");
    }, $BCDice_recievePublicMessageCatched$21.$$arity = 1);
    
    Opal.def(self, '$printPlot', $BCDice_printPlot$22 = function $$printPlot() {
      var $$23, self = this, messageList = nil;

      
      self.$debug("printPlot begin");
      messageList = self.$openSecretRoll(self.channel, 1);
      self.$debug("messageList", messageList);
      return $send(messageList, 'each', [], ($$23 = function(message){var self = $$23.$$s || this;
        if (self.channel == null) self.channel = nil;

      
        
        if (message == null) {
          message = nil;
        };
        if ($truthy(message['$empty?']())) {
          
          self.$debug("message is empty");
          return self.$setPrintPlotChannel();
        } else {
          
          self.$debug("message", message);
          return self.$sendMessage(self.channel, message);
        };}, $$23.$$s = self, $$23.$$arity = 1, $$23));
    }, $BCDice_printPlot$22.$$arity = 0);
    
    Opal.def(self, '$setChannelForPlotOrSecretDice', $BCDice_setChannelForPlotOrSecretDice$24 = function $$setChannelForPlotOrSecretDice() {
      var self = this, channel = nil;

      
      self.$debug("setChannelForPlotOrSecretDice Begin");
      if ($truthy(self.$isTalkChannel())) {
        return nil};
      channel = self.$getPrintPlotChannel(self.nick_e);
      if ($truthy(channel['$nil?']())) {
        return self.$setPrintPlotChannel()
      } else {
        return nil
      };
    }, $BCDice_setChannelForPlotOrSecretDice$24.$$arity = 0);
    
    Opal.def(self, '$isTalkChannel', $BCDice_isTalkChannel$25 = function $$isTalkChannel() {
      var self = this;

      return /^#/['$==='](self.channel)['$!']()
    }, $BCDice_isTalkChannel$25.$$arity = 0);
    
    Opal.def(self, '$printSecretRoll', $BCDice_printSecretRoll$26 = function $$printSecretRoll() {
      var $$27, self = this, outputs = nil;

      
      outputs = self.$openSecretRoll(self.channel, 0);
      return $send(outputs, 'each', [], ($$27 = function(diceResult){var self = $$27.$$s || this;
        if (self.channel == null) self.channel = nil;

      
        
        if (diceResult == null) {
          diceResult = nil;
        };
        if ($truthy(diceResult['$empty?']())) {
          return nil;};
        return self.$sendMessage(self.channel, diceResult);}, $$27.$$s = self, $$27.$$arity = 1, $$27));
    }, $BCDice_printSecretRoll$26.$$arity = 0);
    
    Opal.def(self, '$executePointCounterPublic', $BCDice_executePointCounterPublic$28 = function $$executePointCounterPublic() {
      var $a, $b, self = this, pointerMode = nil, countHolder = nil, output = nil, secret = nil;
      if ($gvars.READY_CMD == null) $gvars.READY_CMD = nil;

      
      self.$debug("executePointCounterPublic begin");
      if ($truthy(new RegExp("" + "^" + ($gvars.READY_CMD) + "(\\s+|$)", 'i')['$=~'](self.message))) {
        
        self.$setPrintPlotChannel();
        self.$sendMessageToOnlySender("表示チャンネルを設定しました");
        return nil;};
      if ($truthy(/^#/['$=~'](self.message))) {
      } else {
        
        self.$debug("executePointCounterPublic NOT match");
        return nil;
      };
      pointerMode = "sameChannel";
      countHolder = $$($nesting, 'CountHolder').$new(self, self.counterInfos);
      $b = countHolder.$executeCommand(self.message, self.nick_e, self.channel, pointerMode), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      self.$debug("executePointCounterPublic output, secret", output, secret);
      if ($truthy(secret)) {
        
        self.$debug("is secret");
        if ($truthy(output['$!=']("1"))) {
          return self.$sendMessageToOnlySender(output)
        } else {
          return nil
        };
      } else {
        
        self.$debug("is NOT secret");
        if ($truthy(output['$!=']("1"))) {
          return self.$sendMessage(self.channel, output)
        } else {
          return nil
        };
      };
    }, $BCDice_executePointCounterPublic$28.$$arity = 0);
    
    Opal.def(self, '$executeDiceRoll', $BCDice_executeDiceRoll$29 = function $$executeDiceRoll() {
      var $a, $b, self = this, output = nil, secret = nil;

      
      self.$debug("executeDiceRoll begin");
      self.$debug("channel", self.channel);
      $b = self.$dice_command(), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(secret)) {
      } else {
        
        self.$debug("executeDiceRoll @channel", self.channel);
        if ($truthy(output['$!=']("1"))) {
          self.$sendMessage(self.channel, output)};
        return nil;
      };
      if (output['$==']("1")) {
        return nil};
      if ($truthy(self.isTest)) {
        output = $rb_plus(output, "###secret dice###")};
      self.$broadmsg(output, self.nick_e);
      if ($truthy(self.isKeepSecretDice)) {
        return self.$addToSecretDiceResult(output, self.channel, 0)
      } else {
        return nil
      };
    }, $BCDice_executeDiceRoll$29.$$arity = 0);
    
    Opal.def(self, '$setTest', $BCDice_setTest$30 = function $$setTest(isTest) {
      var self = this;

      return (self.isTest = isTest)
    }, $BCDice_setTest$30.$$arity = 1);
    
    Opal.def(self, '$executeCard', $BCDice_executeCard$31 = function $$executeCard() {
      var self = this;

      
      self.$debug("executeCard begin");
      self.cardTrader.$setNick(self.nick_e);
      self.cardTrader.$setTnick(self.tnick);
      self.cardTrader.$executeCard(self.message, self.channel);
      return self.$debug("executeCard end");
    }, $BCDice_executeCard$31.$$arity = 0);
    
    Opal.def(self, '$dice_command', $BCDice_dice_command$32 = function $$dice_command() {
      var $a, $b, self = this, arg = nil, output = nil, secret = nil;

      
      arg = self.message.$upcase();
      self.$debug("dice_command arg", arg);
      $b = self.diceBot.$dice_command(self.message, self.nick_e), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(output['$!=']("1"))) {
        return [output, secret]};
      $b = self.$rollD66(arg), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(output['$nil?']())) {
      } else {
        return [output, secret]
      };
      $b = self.$checkAddRoll(arg), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(output['$nil?']())) {
      } else {
        return [output, secret]
      };
      $b = self.$checkBDice(arg), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(output['$nil?']())) {
      } else {
        return [output, secret]
      };
      $b = self.$checkRnDice(arg), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(output['$nil?']())) {
      } else {
        return [output, secret]
      };
      $b = self.$checkUpperRoll(arg), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(output['$nil?']())) {
      } else {
        return [output, secret]
      };
      $b = self.$checkChoiceCommand(arg), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(output['$nil?']())) {
      } else {
        return [output, secret]
      };
      $b = self.$getTableDataResult(arg), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(output['$nil?']())) {
      } else {
        return [output, secret]
      };
      output = "1";
      secret = false;
      return [output, secret];
    }, $BCDice_dice_command$32.$$arity = 0);
    
    Opal.def(self, '$checkAddRoll', $BCDice_checkAddRoll$33 = function $$checkAddRoll(arg) {
      var self = this, secret = nil, command = nil, dice = nil, output = nil;

      
      self.$debug("check add roll");
      secret = arg['$start_with?']("S");
      command = (function() {if ($truthy(secret)) {
        return arg['$[]']($range(1, -1, false))
      } else {
        return arg
      }; return nil; })();
      dice = $$($nesting, 'AddDice').$new(self, self.diceBot);
      output = dice.$rollDice(command);
      if (output['$==']("1")) {
        return nil};
      return [output, secret];
    }, $BCDice_checkAddRoll$33.$$arity = 1);
    
    Opal.def(self, '$checkBDice', $BCDice_checkBDice$34 = function $$checkBDice(arg) {
      var self = this, output = nil, secret = nil;

      
      self.$debug("check barabara roll");
      output = self.$bdice(arg);
      if (output['$==']("1")) {
        return nil};
      secret = /S[\d]+B[\d]+/i['$==='](arg);
      return [output, secret];
    }, $BCDice_checkBDice$34.$$arity = 1);
    
    Opal.def(self, '$checkRnDice', $BCDice_checkRnDice$35 = function $$checkRnDice(arg) {
      var $a, self = this, secret = nil, output = nil, dice = nil;

      
      self.$debug("check xRn roll arg", arg);
      if ($truthy(/(S)?[\d]+R[\d]+/i['$==='](arg))) {
      } else {
        return nil
      };
      secret = $$($nesting, 'Regexp').$last_match(1)['$nil?']()['$!']();
      output = self.diceBot.$dice_command_xRn(arg, self.nick_e);
      if ($truthy(($truthy($a = output['$nil?']()) ? $a : output['$==']("1")))) {
        return nil};
      if ($truthy(output['$empty?']())) {
        
        dice = $$($nesting, 'RerollDice').$new(self, self.diceBot);
        output = dice.$rollDice(arg);};
      if ($truthy(($truthy($a = output['$nil?']()) ? $a : output['$==']("1")))) {
        return nil};
      self.$debug("xRn output", output);
      return [output, secret];
    }, $BCDice_checkRnDice$35.$$arity = 1);
    
    Opal.def(self, '$checkUpperRoll', $BCDice_checkUpperRoll$36 = function $$checkUpperRoll(arg) {
      var self = this, secret = nil, dice = nil, output = nil;

      
      self.$debug("check upper roll");
      if ($truthy(/(S)?[\d]+U[\d]+/i['$==='](arg))) {
      } else {
        return nil
      };
      secret = $$($nesting, 'Regexp').$last_match(1)['$nil?']()['$!']();
      dice = $$($nesting, 'UpperDice').$new(self, self.diceBot);
      output = dice.$rollDice(arg);
      if (output['$==']("1")) {
        return nil};
      return [output, secret];
    }, $BCDice_checkUpperRoll$36.$$arity = 1);
    
    Opal.def(self, '$checkChoiceCommand', $BCDice_checkChoiceCommand$37 = function $$checkChoiceCommand(arg) {
      var self = this, secret = nil, output = nil;

      
      self.$debug("check choice command");
      if ($truthy(/((^|\s)(S)?choice\[[^,]+(,[^,]+)+\]($|\s))/i['$==='](arg))) {
      } else {
        return nil
      };
      secret = $$($nesting, 'Regexp').$last_match(3)['$nil?']()['$!']();
      output = self.$choice_random($$($nesting, 'Regexp').$last_match(1));
      return [output, secret];
    }, $BCDice_checkChoiceCommand$37.$$arity = 1);
    
    Opal.def(self, '$getTableDataResult', $BCDice_getTableDataResult$38 = function $$getTableDataResult(arg) {
      var $a, $b, $$39, self = this, dice = nil, title = nil, table = nil, secret = nil, value = nil, diceText = nil, key = nil, message = nil, output = nil;

      
      self.$debug("getTableDataResult Begin");
      $b = self.tableFileData.$getTableData(arg, self.diceBot.$id()), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (title = ($a[1] == null ? nil : $a[1])), (table = ($a[2] == null ? nil : $a[2])), (secret = ($a[3] == null ? nil : $a[3])), $b;
      self.$debug("dice", dice);
      if ($truthy(table['$nil?']())) {
        
        self.$debug("table is null");
        return nil;};
      $b = self.$getTableIndexDiceValueAndDiceText(dice), $a = Opal.to_ary($b), (value = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(value['$nil?']())) {
        return nil};
      self.$debug("value", value);
      $b = $send(table, 'find', [], ($$39 = function(i){var self = $$39.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$first()['$==='](value);}, $$39.$$s = self, $$39.$$arity = 1, $$39)), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (message = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(message['$nil?']())) {
        return nil};
      message = self.$rollTableMessageDiceText(message);
      output = "" + (self.$nick_e()) + ":" + (title) + "(" + (value) + "[" + (diceText) + "]) ＞ " + (message);
      return [output, secret];
    }, $BCDice_getTableDataResult$38.$$arity = 1);
    
    Opal.def(self, '$getTableIndexDiceValueAndDiceText', $BCDice_getTableIndexDiceValueAndDiceText$40 = function $$getTableIndexDiceValueAndDiceText(dice) {
      var $a, $b, self = this, diceCount = nil, diceType = nil, value = nil, diceText = nil, string = nil, _secret = nil, _count = nil, swapMarker = nil;

      
      if ($truthy(/(\d+)D(\d+)/i['$==='](dice))) {
        
        diceCount = $$($nesting, 'Regexp').$last_match(1);
        diceType = $$($nesting, 'Regexp').$last_match(2);
        $b = self.$roll(diceCount, diceType), $a = Opal.to_ary($b), (value = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
        return [value, diceText];};
      $b = self.$getD66Infos(dice), $a = Opal.to_ary($b), (string = ($a[0] == null ? nil : $a[0])), (_secret = ($a[1] == null ? nil : $a[1])), (_count = ($a[2] == null ? nil : $a[2])), (swapMarker = ($a[3] == null ? nil : $a[3])), $b;
      if ($truthy(string['$nil?']())) {
      } else {
        
        value = self.$getD66ValueByMarker(swapMarker);
        diceText = $rb_plus($rb_plus(value.$div(10).$to_s(), ","), value['$%'](10).$to_s());
        return [value, diceText];
      };
      return nil;
    }, $BCDice_getTableIndexDiceValueAndDiceText$40.$$arity = 1);
    
    Opal.def(self, '$rollTableMessageDiceText', $BCDice_rollTableMessageDiceText$41 = function $$rollTableMessageDiceText(text) {
      var $$42, self = this, message = nil;

      
      message = $send(text, 'gsub', [/(\d+)D(\d+)/], ($$42 = function(){var self = $$42.$$s || this, $a, $b, m = nil, diceCount = nil, diceMax = nil, value = nil;
        if ($gvars["~"] == null) $gvars["~"] = nil;

      
        m = $gvars["~"];
        diceCount = m['$[]'](1);
        diceMax = m['$[]'](2);
        $b = self.$roll(diceCount, diceMax), $a = Opal.to_ary($b), (value = ($a[0] == null ? nil : $a[0])), $b;
        return "" + (diceCount) + "D" + (diceMax) + "(=>" + (value) + ")";}, $$42.$$s = self, $$42.$$arity = 0, $$42));
      return message;
    }, $BCDice_rollTableMessageDiceText$41.$$arity = 1);
    
    Opal.def(self, '$roll', $BCDice_roll$43 = function $$roll(dice_cnt, dice_max, dice_sort, dice_add, dice_ul, dice_diff, dice_re) {
      var $a, $$44, $$46, self = this, total = nil, dice_str = nil, numberSpot1 = nil, cnt_max = nil, n_max = nil, cnt_suc = nil, d9_on = nil, rerollCount = nil, dice_result = nil;
      if ($gvars.DICE_MAXCNT == null) $gvars.DICE_MAXCNT = nil;
      if ($gvars.DICE_MAXNUM == null) $gvars.DICE_MAXNUM = nil;

      
      
      if (dice_sort == null) {
        dice_sort = 0;
      };
      
      if (dice_add == null) {
        dice_add = 0;
      };
      
      if (dice_ul == null) {
        dice_ul = "";
      };
      
      if (dice_diff == null) {
        dice_diff = 0;
      };
      
      if (dice_re == null) {
        dice_re = nil;
      };
      dice_cnt = dice_cnt.$to_i();
      dice_max = dice_max.$to_i();
      dice_re = dice_re.$to_i();
      total = 0;
      dice_str = "";
      numberSpot1 = 0;
      cnt_max = 0;
      n_max = 0;
      cnt_suc = 0;
      d9_on = false;
      rerollCount = 0;
      dice_result = [];
      if ($truthy(($truthy($a = self.diceBot.$d66Type()['$!='](0)) ? dice_max['$=='](66) : $a))) {
        
        dice_sort = 0;
        dice_cnt = 2;
        dice_max = 6;};
      if ($truthy(($truthy($a = self.diceBot.$isD9()) ? dice_max['$=='](9) : $a))) {
        
        d9_on = true;
        dice_max = $rb_plus(dice_max, 1);};
      if ($truthy(($truthy($a = $rb_le(dice_cnt, $gvars.DICE_MAXCNT)) ? $rb_le(dice_max, $gvars.DICE_MAXNUM) : $a))) {
      } else {
        return [total, dice_str, numberSpot1, cnt_max, n_max, cnt_suc, rerollCount]
      };
      (function(){var $brk = Opal.new_brk(); try {return $send(dice_cnt, 'times', [], ($$44 = function(i){var self = $$44.$$s || this, $$45, $b, dice_now = nil, dice_n = nil, dice_st_n = nil, round = nil, suc = nil;
        if (self.diceBot == null) self.diceBot = nil;

      
        
        if (i == null) {
          i = nil;
        };
        i = $rb_plus(i, 1);
        dice_now = 0;
        dice_n = 0;
        dice_st_n = "";
        round = 0;
        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$45 = function(){var self = $$45.$$s || this, $b;
          if (self.diceBot == null) self.diceBot = nil;

        
          if ($truthy(d9_on)) {
            dice_n = self.$roll_d9()
          } else {
            dice_n = $rb_plus(self.$rand(dice_max).$to_i(), 1)
          };
          dice_now = $rb_plus(dice_now, dice_n);
          self.$debug("@diceBot.sendMode", self.diceBot.$sendMode());
          if ($truthy($rb_ge(self.diceBot.$sendMode(), 2))) {
            
            if ($truthy(dice_st_n['$empty?']())) {
            } else {
              dice_st_n = $rb_plus(dice_st_n, ",")
            };
            dice_st_n = $rb_plus(dice_st_n, dice_n.$to_s());};
          round = $rb_plus(round, 1);
          if ($truthy(($truthy($b = $rb_gt(dice_add, 1)) ? $rb_ge(dice_n, dice_add) : $b))) {
            return nil
          } else {
            
            Opal.brk(nil, $brk)
          };}, $$45.$$s = self, $$45.$$brk = $brk, $$45.$$arity = 0, $$45))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        total = $rb_plus(total, dice_now);
        if ($truthy(dice_ul['$!='](""))) {
          
          suc = self.$check_hit(dice_now, dice_ul, dice_diff);
          cnt_suc = $rb_plus(cnt_suc, suc);};
        if ($truthy(dice_re)) {
          if ($truthy($rb_ge(dice_now, dice_re))) {
            rerollCount = $rb_plus(rerollCount, 1)}};
        if ($truthy(($truthy($b = $rb_ge(self.diceBot.$sendMode(), 2)) ? $rb_ge(round, 2) : $b))) {
          dice_result.$push("" + (dice_now) + "[" + (dice_st_n) + "]")
        } else {
          dice_result.$push(dice_now)
        };
        if (dice_now['$=='](1)) {
          numberSpot1 = $rb_plus(numberSpot1, 1)};
        if (dice_now['$=='](dice_max)) {
          cnt_max = $rb_plus(cnt_max, 1)};
        if ($truthy($rb_gt(dice_now, n_max))) {
          return (n_max = dice_now)
        } else {
          return nil
        };}, $$44.$$s = self, $$44.$$brk = $brk, $$44.$$arity = 1, $$44))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      if ($truthy(dice_sort['$!='](0))) {
        dice_str = $send(dice_result, 'sort_by', [], ($$46 = function(a){var self = $$46.$$s || this;

        
          
          if (a == null) {
            a = nil;
          };
          return self.$dice_num(a);}, $$46.$$s = self, $$46.$$arity = 1, $$46)).$join(",")
      } else {
        dice_str = dice_result.$join(",")
      };
      return [total, dice_str, numberSpot1, cnt_max, n_max, cnt_suc, rerollCount];
    }, $BCDice_roll$43.$$arity = -3);
    
    Opal.def(self, '$setRandomValues', $BCDice_setRandomValues$47 = function $$setRandomValues(rands) {
      var self = this;

      return (self.rands = rands)
    }, $BCDice_setRandomValues$47.$$arity = 1);
    
    Opal.def(self, '$rand_inner', $BCDice_rand_inner$48 = function $$rand_inner(max) {
      var self = this, value = nil;

      
      self.$debug("rand called @rands", self.rands);
      value = 0;
      if ($truthy(self.rands['$nil?']())) {
        value = self.$randNomal(max)
      } else {
        value = self.$randFromRands(max)
      };
      if ($truthy(self.collect_rand_results)) {
        self.rand_results['$<<']([$rb_plus(value, 1), max])};
      return value;
    }, $BCDice_rand_inner$48.$$arity = 1);
    Opal.const_set($nesting[0], 'DetailedRandResult', $$($nesting, 'Struct').$new("kind", "sides", "value"));
    
    Opal.def(self, '$rand', $BCDice_rand$49 = function $$rand(max) {
      var self = this, ret = nil;

      
      ret = self.$rand_inner(max);
      self.$push_to_detail("normal", max, $rb_plus(ret, 1));
      return ret;
    }, $BCDice_rand$49.$$arity = 1);
    
    Opal.def(self, '$roll_tens_d10', $BCDice_roll_tens_d10$50 = function $$roll_tens_d10() {
      var self = this, r = nil, ret = nil;

      
      r = $rb_plus(self.$rand_inner(10), 1);
      if (r['$=='](10)) {
        r = 0};
      ret = $rb_times(r, 10);
      self.$push_to_detail("tens_d10", 10, ret);
      return ret;
    }, $BCDice_roll_tens_d10$50.$$arity = 0);
    
    Opal.def(self, '$roll_d9', $BCDice_roll_d9$51 = function $$roll_d9() {
      var self = this, ret = nil;

      
      ret = self.$rand_inner(10);
      self.$push_to_detail("d9", 10, ret);
      return ret;
    }, $BCDice_roll_d9$51.$$arity = 0);
    
    Opal.def(self, '$setCollectRandResult', $BCDice_setCollectRandResult$52 = function $$setCollectRandResult(b) {
      var self = this;

      
      self.collect_rand_results = b;
      self.rand_results = [];
      return (self.detailed_rand_results = []);
    }, $BCDice_setCollectRandResult$52.$$arity = 1);
    
    Opal.def(self, '$push_to_detail', $BCDice_push_to_detail$53 = function $$push_to_detail(kind, sides, value) {
      var self = this, detail = nil;

      if ($truthy(self.collect_rand_results)) {
        
        detail = $$($nesting, 'DetailedRandResult').$new(kind, sides, value);
        return self.detailed_rand_results.$push(detail);
      } else {
        return nil
      }
    }, $BCDice_push_to_detail$53.$$arity = 3);
    
    Opal.def(self, '$randNomal', $BCDice_randNomal$54 = function $$randNomal(max) {
      var self = this;

      return $$($nesting, 'Kernel').$rand(max)
    }, $BCDice_randNomal$54.$$arity = 1);
    
    Opal.def(self, '$randFromRands', $BCDice_randFromRands$55 = function $$randFromRands(targetMax) {
      var $a, $b, self = this, nextRand = nil, value = nil, max = nil;

      
      nextRand = self.rands.$shift();
      if ($truthy(nextRand['$nil?']())) {
        self.$raise("" + "nextRand is nil, so @rands is empty!! @rands:" + (self.rands.$inspect()))};
      $b = nextRand, $a = Opal.to_ary($b), (value = ($a[0] == null ? nil : $a[0])), (max = ($a[1] == null ? nil : $a[1])), $b;
      value = value.$to_i();
      max = max.$to_i();
      if ($truthy(max['$!='](targetMax))) {
        self.$raise("" + "invalid max value! [ " + (value) + " / " + (max) + " ] but NEED [ " + (targetMax) + " ] dice")};
      return $rb_minus(value, 1);
    }, $BCDice_randFromRands$55.$$arity = 1);
    
    Opal.def(self, '$dice_num', $BCDice_dice_num$56 = function $$dice_num(dice_str) {
      var self = this;

      
      dice_str = dice_str.$to_s();
      return dice_str.$sub(/\[[\d,]+\]/, "").$to_i();
    }, $BCDice_dice_num$56.$$arity = 1);
    
    Opal.def(self, '$bdice', $BCDice_bdice$57 = function $$bdice(string) {
      var $$58, self = this, suc = nil, signOfInequality = nil, diff = nil, output = nil, dice_a = nil, dice_cnt_total = nil, numberSpot1 = nil;

      
      suc = 0;
      signOfInequality = "";
      diff = 0;
      output = "";
      string = string.$gsub(/-[\d]+B[\d]+/, "");
      if ($truthy(/(^|\s)S?(([\d]+B[\d]+(\+[\d]+B[\d]+)*)(([<>=]+)([\d]+))?)($|\s)/['$=~'](string))) {
      } else {
        
        output = "1";
        return output;
      };
      string = $$($nesting, 'Regexp').$last_match(2);
      if ($truthy($$($nesting, 'Regexp').$last_match(5))) {
        
        diff = $$($nesting, 'Regexp').$last_match(7).$to_i();
        string = $$($nesting, 'Regexp').$last_match(3);
        signOfInequality = self.$marshalSignOfInequality($$($nesting, 'Regexp').$last_match(6));
      } else if ($truthy(/([<>=]+)(\d+)/['$=~'](self.diceBot.$defaultSuccessTarget()))) {
        
        diff = $$($nesting, 'Regexp').$last_match(2).$to_i();
        signOfInequality = self.$marshalSignOfInequality($$($nesting, 'Regexp').$last_match(1));};
      dice_a = string.$split(/\+/);
      dice_cnt_total = 0;
      numberSpot1 = 0;
      $send(dice_a, 'each', [], ($$58 = function(dice_o){var self = $$58.$$s || this, $a, $b, dice_cnt = nil, dice_max = nil, dice_dat = nil;
        if (self.diceBot == null) self.diceBot = nil;

      
        
        if (dice_o == null) {
          dice_o = nil;
        };
        $b = dice_o.$split(/[bB]/), $a = Opal.to_ary($b), (dice_cnt = ($a[0] == null ? nil : $a[0])), (dice_max = ($a[1] == null ? nil : $a[1])), $b;
        dice_cnt = dice_cnt.$to_i();
        dice_max = dice_max.$to_i();
        dice_dat = self.$roll(dice_cnt, dice_max, self.diceBot.$sortType()['$&'](2), 0, signOfInequality, diff);
        suc = $rb_plus(suc, dice_dat['$[]'](5));
        if ($truthy(output['$!='](""))) {
          output = $rb_plus(output, ",")};
        output = $rb_plus(output, dice_dat['$[]'](1));
        numberSpot1 = $rb_plus(numberSpot1, dice_dat['$[]'](2));
        return (dice_cnt_total = $rb_plus(dice_cnt_total, dice_cnt));}, $$58.$$s = self, $$58.$$arity = 1, $$58));
      if ($truthy(signOfInequality['$!='](""))) {
        
        string = $rb_plus(string, "" + (signOfInequality) + (diff));
        output = "" + (output) + " ＞ 成功数" + (suc);
        output = $rb_plus(output, self.diceBot.$getGrichText(numberSpot1, dice_cnt_total, suc));};
      output = "" + (self.nick_e) + ": (" + (string) + ") ＞ " + (output);
      return output;
    }, $BCDice_bdice$57.$$arity = 1);
    
    Opal.def(self, '$rollD66', $BCDice_rollD66$59 = function $$rollD66(string) {
      var $a, $b, self = this, output = nil, secret = nil;

      
      if ($truthy(/^S?D66/i['$==='](string))) {
      } else {
        return nil
      };
      if (self.diceBot.$d66Type()['$=='](0)) {
        return nil};
      self.$debug("match D66 roll");
      $b = self.$d66dice(string), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), $b;
      return [output, secret];
    }, $BCDice_rollD66$59.$$arity = 1);
    
    Opal.def(self, '$d66dice', $BCDice_d66dice$60 = function $$d66dice(string) {
      var $a, $b, $$61, self = this, secret = nil, output = nil, count = nil, swapMarker = nil, d66List = nil, d66Text = nil;

      
      string = string.$upcase();
      secret = false;
      output = "1";
      $b = self.$getD66Infos(string), $a = Opal.to_ary($b), (string = ($a[0] == null ? nil : $a[0])), (secret = ($a[1] == null ? nil : $a[1])), (count = ($a[2] == null ? nil : $a[2])), (swapMarker = ($a[3] == null ? nil : $a[3])), $b;
      if ($truthy(string['$nil?']())) {
        return [output, secret]};
      self.$debug("d66dice count", count);
      d66List = [];
      $send(count, 'times', [], ($$61 = function(_i){var self = $$61.$$s || this;

      
        
        if (_i == null) {
          _i = nil;
        };
        return d66List['$<<'](self.$getD66ValueByMarker(swapMarker));}, $$61.$$s = self, $$61.$$arity = 1, $$61));
      d66Text = d66List.$join(",");
      self.$debug("d66Text", d66Text);
      output = "" + (self.nick_e) + ": (" + (string) + ") ＞ " + (d66Text);
      return [output, secret];
    }, $BCDice_d66dice$60.$$arity = 1);
    
    Opal.def(self, '$getD66Infos', $BCDice_getD66Infos$62 = function $$getD66Infos(string) {
      var $a, self = this, secret = nil, count = nil, swapMarker = nil;

      
      self.$debug("getD66Infos, string", string);
      if ($truthy(/(^|\s)(S)?((\d+)?D66(N|S)?)(\s|$)/i['$==='](string))) {
      } else {
        return nil
      };
      secret = $$($nesting, 'Regexp').$last_match(2)['$nil?']()['$!']();
      string = $$($nesting, 'Regexp').$last_match(3);
      count = ($truthy($a = $$($nesting, 'Regexp').$last_match(4)) ? $a : 1).$to_i();
      swapMarker = ($truthy($a = $$($nesting, 'Regexp').$last_match(5)) ? $a : "").$upcase();
      return [string, secret, count, swapMarker];
    }, $BCDice_getD66Infos$62.$$arity = 1);
    
    Opal.def(self, '$getD66ValueByMarker', $BCDice_getD66ValueByMarker$63 = function $$getD66ValueByMarker(swapMarker) {
      var self = this, $case = nil, isSwap = nil;

      return (function() {$case = swapMarker;
      if ("S"['$===']($case)) {
      isSwap = true;
      return self.$getD66(isSwap);}
      else if ("N"['$===']($case)) {
      isSwap = false;
      return self.$getD66(isSwap);}
      else {return self.$getD66Value()}})()
    }, $BCDice_getD66ValueByMarker$63.$$arity = 1);
    
    Opal.def(self, '$getD66Value', $BCDice_getD66Value$64 = function $$getD66Value(mode) {
      var $a, self = this, isSwap = nil;

      
      
      if (mode == null) {
        mode = nil;
      };
      mode = ($truthy($a = mode) ? $a : self.diceBot.$d66Type());
      isSwap = $rb_gt(mode, 1);
      return self.$getD66(isSwap);
    }, $BCDice_getD66Value$64.$$arity = -1);
    
    Opal.def(self, '$getD66', $BCDice_getD66$65 = function $$getD66(isSwap) {
      var $a, self = this, output = nil, dice_a = nil, dice_b = nil;

      
      output = 0;
      dice_a = $rb_plus(self.$rand(6), 1);
      dice_b = $rb_plus(self.$rand(6), 1);
      self.$debug("dice_a", dice_a);
      self.$debug("dice_b", dice_b);
      if ($truthy(($truthy($a = isSwap) ? $rb_gt(dice_a, dice_b) : $a))) {
        output = $rb_plus(dice_a, $rb_times(dice_b, 10))
      } else {
        output = $rb_plus($rb_times(dice_a, 10), dice_b)
      };
      self.$debug("output", output);
      return output;
    }, $BCDice_getD66$65.$$arity = 1);
    
    Opal.def(self, '$openSecretRoll', $BCDice_openSecretRoll$66 = function $$openSecretRoll(channel, mode) {
      var $$67, self = this, messages = nil, memberKey = nil, members = nil;
      if ($gvars.secretRollMembersHolder == null) $gvars.secretRollMembersHolder = nil;

      
      self.$debug("openSecretRoll begin");
      channel = channel.$upcase();
      messages = [];
      memberKey = self.$getSecretRollMembersHolderKey(channel, mode);
      members = $gvars.secretRollMembersHolder['$[]'](memberKey);
      if ($truthy(members['$nil?']())) {
        
        self.$debug("openSecretRoll members is nil. messages", messages);
        return messages;};
      $send(members, 'each', [], ($$67 = function(member){var self = $$67.$$s || this, diceResultKey = nil, diceResult = nil;
        if ($gvars.secretDiceResultHolder == null) $gvars.secretDiceResultHolder = nil;

      
        
        if (member == null) {
          member = nil;
        };
        diceResultKey = self.$getSecretDiceResultHolderKey(channel, mode, member);
        self.$debug("openSecretRoll diceResulyKey", diceResultKey);
        diceResult = $gvars.secretDiceResultHolder['$[]'](diceResultKey);
        self.$debug("openSecretRoll diceResult", diceResult);
        if ($truthy(diceResult)) {
          
          messages.$push(diceResult);
          return $gvars.secretDiceResultHolder.$delete(diceResultKey);
        } else {
          return nil
        };}, $$67.$$s = self, $$67.$$arity = 1, $$67));
      if ($truthy($rb_le(mode, 0))) {
        
        self.$debug("delete recorde data");
        $gvars.secretRollMembersHolder.$delete(channel);};
      self.$debug("openSecretRoll result messages", messages);
      return messages;
    }, $BCDice_openSecretRoll$66.$$arity = 2);
    
    Opal.def(self, '$getNick', $BCDice_getNick$68 = function $$getNick(nick) {
      var $a, self = this;

      
      
      if (nick == null) {
        nick = nil;
      };
      nick = ($truthy($a = nick) ? $a : self.nick_e);
      nick = nick.$upcase();
      if ($truthy(/[_\d]*(.+)[_\d]*/['$=~'](nick))) {
        nick = $$($nesting, 'Regexp').$last_match(1)};
      return nick;
    }, $BCDice_getNick$68.$$arity = -1);
    
    Opal.def(self, '$addToSecretDiceResult', $BCDice_addToSecretDiceResult$69 = function $$addToSecretDiceResult(diceResult, channel, mode) {
      var self = this;

      
      channel = channel.$upcase();
      self.$addToSecretRollMembersHolder(channel, mode);
      return self.$saveSecretDiceResult(diceResult, channel, mode);
    }, $BCDice_addToSecretDiceResult$69.$$arity = 3);
    
    Opal.def(self, '$addToSecretRollMembersHolder', $BCDice_addToSecretRollMembersHolder$70 = function $$addToSecretRollMembersHolder(channel, mode) {
      var $a, self = this, key = nil, $writer = nil, members = nil, nick = nil;
      if ($gvars.secretRollMembersHolder == null) $gvars.secretRollMembersHolder = nil;

      
      key = self.$getSecretRollMembersHolderKey(channel, mode);
      ($truthy($a = $gvars.secretRollMembersHolder['$[]'](key)) ? $a : (($writer = [key, []]), $send($gvars.secretRollMembersHolder, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      members = $gvars.secretRollMembersHolder['$[]'](key);
      nick = self.$getNick();
      if ($truthy(members['$include?'](nick))) {
        return nil
      } else {
        return members.$push(nick)
      };
    }, $BCDice_addToSecretRollMembersHolder$70.$$arity = 2);
    
    Opal.def(self, '$getSecretRollMembersHolderKey', $BCDice_getSecretRollMembersHolderKey$71 = function $$getSecretRollMembersHolderKey(channel, mode) {
      var self = this;

      return "" + (mode) + "," + (channel)
    }, $BCDice_getSecretRollMembersHolderKey$71.$$arity = 2);
    
    Opal.def(self, '$saveSecretDiceResult', $BCDice_saveSecretDiceResult$72 = function $$saveSecretDiceResult(diceResult, channel, mode) {
      var self = this, nick = nil, key = nil, $writer = nil;
      if ($gvars.secretDiceResultHolder == null) $gvars.secretDiceResultHolder = nil;

      
      nick = self.$getNick();
      if ($truthy(mode['$!='](0))) {
        diceResult = "" + (nick) + ": " + (diceResult)};
      key = self.$getSecretDiceResultHolderKey(channel, mode, nick);
      
      $writer = [key, diceResult];
      $send($gvars.secretDiceResultHolder, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      self.$debug("key", key);
      return self.$debug("secretDiceResultHolder", $gvars.secretDiceResultHolder);
    }, $BCDice_saveSecretDiceResult$72.$$arity = 3);
    
    Opal.def(self, '$getSecretDiceResultHolderKey', $BCDice_getSecretDiceResultHolderKey$73 = function $$getSecretDiceResultHolderKey(channel, mode, nick) {
      var self = this, key = nil;

      
      key = "" + (mode) + "," + (channel) + "," + (nick);
      return key;
    }, $BCDice_getSecretDiceResultHolderKey$73.$$arity = 3);
    
    Opal.def(self, '$setPrintPlotChannel', $BCDice_setPrintPlotChannel$74 = function $$setPrintPlotChannel() {
      var self = this, nick = nil, $writer = nil;
      if ($gvars.plotPrintChannels == null) $gvars.plotPrintChannels = nil;

      
      nick = self.$getNick();
      
      $writer = [nick, self.channel];
      $send($gvars.plotPrintChannels, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $BCDice_setPrintPlotChannel$74.$$arity = 0);
    
    Opal.def(self, '$choice_random', $BCDice_choice_random$75 = function $$choice_random(string) {
      var self = this, output = nil, targetList = nil, targets = nil, index = nil, target = nil;

      
      output = "1";
      if ($truthy(/(^|\s)((S)?choice\[([^,]+(,[^,]+)+)\])($|\s)/i['$=~'](string))) {
      } else {
        return output
      };
      string = $$($nesting, 'Regexp').$last_match(2);
      targetList = $$($nesting, 'Regexp').$last_match(4);
      if ($truthy(targetList)) {
      } else {
        return output
      };
      targets = targetList.$split(/,/);
      index = self.$rand(targets.$length());
      target = targets['$[]'](index);
      output = "" + (self.nick_e) + ": (" + (string) + ") ＞ " + (target);
      return output;
    }, $BCDice_choice_random$75.$$arity = 1);
    
    Opal.def(self, '$getMarshaledSignOfInequality', $BCDice_getMarshaledSignOfInequality$76 = function $$getMarshaledSignOfInequality(text) {
      var self = this;

      
      if ($truthy(text['$nil?']())) {
        return ""};
      return self.$marshalSignOfInequality(text);
    }, $BCDice_getMarshaledSignOfInequality$76.$$arity = 1);
    
    Opal.def(self, '$marshalSignOfInequality', $BCDice_marshalSignOfInequality$77 = function $$marshalSignOfInequality(signOfInequality) {
      var self = this, $case = nil;

      
      $case = signOfInequality;
      if (/(<=|=<)/['$===']($case)) {return "<="}
      else if (/(>=|=>)/['$===']($case)) {return ">="}
      else if (/(<>)/['$===']($case)) {return "<>"}
      else if (/[<]+/['$===']($case)) {return "<"}
      else if (/[>]+/['$===']($case)) {return ">"}
      else if (/[=]+/['$===']($case)) {return "="};
      return signOfInequality;
    }, $BCDice_marshalSignOfInequality$77.$$arity = 1);
    
    Opal.def(self, '$check_hit', $BCDice_check_hit$78 = function $$check_hit(dice_now, signOfInequality, diff) {
      var self = this, suc = nil, $case = nil;

      
      suc = 0;
      if ($truthy(diff['$is_a?']($$($nesting, 'String')))) {
        
        if ($truthy(/\d/['$=~'](diff))) {
        } else {
          return suc
        };
        diff = diff.$to_i();};
      $case = signOfInequality;
      if (/(<=|=<)/['$===']($case)) {if ($truthy($rb_le(dice_now, diff))) {
        suc = $rb_plus(suc, 1)}}
      else if (/(>=|=>)/['$===']($case)) {if ($truthy($rb_ge(dice_now, diff))) {
        suc = $rb_plus(suc, 1)}}
      else if (/(<>)/['$===']($case)) {if ($truthy(dice_now['$!='](diff))) {
        suc = $rb_plus(suc, 1)}}
      else if (/[<]+/['$===']($case)) {if ($truthy($rb_lt(dice_now, diff))) {
        suc = $rb_plus(suc, 1)}}
      else if (/[>]+/['$===']($case)) {if ($truthy($rb_gt(dice_now, diff))) {
        suc = $rb_plus(suc, 1)}}
      else if (/[=]+/['$===']($case)) {if (dice_now['$=='](diff)) {
        suc = $rb_plus(suc, 1)}};
      return suc;
    }, $BCDice_check_hit$78.$$arity = 3);
    
    Opal.def(self, '$broadmsg', $BCDice_broadmsg$79 = function $$broadmsg(output, nick) {
      var self = this;

      
      self.$debug("broadmsg output, nick", output, nick);
      self.$debug("@nick_e", self.nick_e);
      if (output['$==']("1")) {
        return nil};
      if (nick['$=='](self.nick_e)) {
        return self.$sendMessageToOnlySender(output)
      } else {
        return self.$sendMessage(nick, output)
      };
    }, $BCDice_broadmsg$79.$$arity = 2);
    
    Opal.def(self, '$sendMessage', $BCDice_sendMessage$80 = function $$sendMessage(to, message) {
      var self = this;

      
      self.$debug("sendMessage to, message", to, message);
      return self.ircClient.$sendMessage(to, message);
    }, $BCDice_sendMessage$80.$$arity = 2);
    
    Opal.def(self, '$sendMessageToOnlySender', $BCDice_sendMessageToOnlySender$81 = function $$sendMessageToOnlySender(message) {
      var self = this;

      
      self.$debug("sendMessageToOnlySender message", message);
      self.$debug("@nick_e", self.nick_e);
      return self.ircClient.$sendMessageToOnlySender(self.nick_e, message);
    }, $BCDice_sendMessageToOnlySender$81.$$arity = 1);
    
    Opal.def(self, '$sendMessageToChannels', $BCDice_sendMessageToChannels$82 = function $$sendMessageToChannels(message) {
      var self = this;

      return self.ircClient.$sendMessageToChannels(message)
    }, $BCDice_sendMessageToChannels$82.$$arity = 1);
    
    Opal.def(self, '$parren_killer', $BCDice_parren_killer$83 = function $$parren_killer(string) {
      var $$84, $$85, $$86, self = this, round_type = nil;

      
      self.$debug("parren_killer input", string);
      string = $send(string, 'gsub', [/\[\d+D\d+\]/i], ($$84 = function(matched){var self = $$84.$$s || this, $a, $b, command = nil, times = nil, sides = nil, rolled = nil;

      
        
        if (matched == null) {
          matched = nil;
        };
        command = matched['$[]']($range(1, -2, false)).$upcase();
        $b = $send(command.$split("D"), 'map', [], "to_i".$to_proc()), $a = Opal.to_ary($b), (times = ($a[0] == null ? nil : $a[0])), (sides = ($a[1] == null ? nil : $a[1])), $b;
        $b = self.$roll(times, sides), $a = Opal.to_ary($b), (rolled = ($a[0] == null ? nil : $a[0])), $b;
        return rolled;}, $$84.$$s = self, $$84.$$arity = 1, $$84));
      string = self.$changeRangeTextToNumberText(string);
      round_type = self.diceBot.$fractionType().$to_sym();
      string = $send(string, 'gsub', [/\([\d\/\+\*\-\(\)]+\)/], ($$85 = function(expr){var self = $$85.$$s || this;

      
        
        if (expr == null) {
          expr = nil;
        };
        return $$($nesting, 'ArithmeticEvaluator').$new().$eval(expr, round_type);}, $$85.$$s = self, $$85.$$arity = 1, $$85));
      self.$debug("diceBot.changeText(string) begin", string);
      string = self.diceBot.$changeText(string);
      self.$debug("diceBot.changeText(string) end", string);
      string = $send(string, 'gsub', [/([\d]+[dD])([^\w]|$)/], ($$86 = function(){var self = $$86.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "6" + ($$($nesting, 'Regexp').$last_match(2))}, $$86.$$s = self, $$86.$$arity = 0, $$86));
      self.$debug("parren_killer output", string);
      return string;
    }, $BCDice_parren_killer$83.$$arity = 1);
    
    Opal.def(self, '$changeRangeTextToNumberText', $BCDice_changeRangeTextToNumberText$87 = function $$changeRangeTextToNumberText(string) {
      var $a, $b, $c, self = this, beforeText = nil, rangeBegin = nil, rangeEnd = nil, afterText = nil, range = nil, rolledNumber = nil, resultNumber = nil;

      
      self.$debug("[st...ed] before string", string);
      while ($truthy(/^(.*?)\[(\d+)[.]{3}(\d+)\](.*)/['$=~'](string))) {
        
        beforeText = $$($nesting, 'Regexp').$last_match(1);
        beforeText = ($truthy($b = beforeText) ? $b : "");
        rangeBegin = $$($nesting, 'Regexp').$last_match(2).$to_i();
        rangeEnd = $$($nesting, 'Regexp').$last_match(3).$to_i();
        afterText = $$($nesting, 'Regexp').$last_match(4);
        afterText = ($truthy($b = afterText) ? $b : "");
        if ($truthy($rb_lt(rangeBegin, rangeEnd))) {
        } else {
          continue;
        };
        range = $rb_plus($rb_minus(rangeEnd, rangeBegin), 1);
        self.$debug("range", range);
        $c = self.$roll(1, range), $b = Opal.to_ary($c), (rolledNumber = ($b[0] == null ? nil : $b[0])), $c;
        resultNumber = $rb_plus($rb_minus(rangeBegin, 1), rolledNumber);
        string = "" + (beforeText) + (resultNumber) + (afterText);
      };
      self.$debug("[st...ed] after string", string);
      return string;
    }, $BCDice_changeRangeTextToNumberText$87.$$arity = 1);
    return (Opal.def(self, '$setGameByTitle', $BCDice_setGameByTitle$88 = function $$setGameByTitle(gameTitle) {
      var $a, self = this, loader = nil, diceBot = nil, message = nil;

      
      self.$debug("setGameByTitle gameTitle", gameTitle);
      self.cardTrader.$initValues();
      loader = $$($nesting, 'DiceBotLoaderList').$find(gameTitle);
      diceBot = (function() {if ($truthy(loader)) {
        return loader.$loadDiceBot()
      } else {
        return ($truthy($a = $$($nesting, 'DiceBotLoader').$loadUnknownGame(gameTitle)) ? $a : $$($nesting, 'DiceBot').$new())
      }; return nil; })();
      self.$setDiceBot(diceBot);
      diceBot.$postSet();
      message = "" + "Game設定を" + (diceBot.$name()) + "に設定しました";
      self.$debug("setGameByTitle message", message);
      return message;
    }, $BCDice_setGameByTitle$88.$$arity = 1), nil) && 'setGameByTitle';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $gvars = Opal.gvars, $klass = Opal.klass, $hash2 = Opal.hash2, bcDiceRoot = nil, bot = nil, result = nil, randResults = nil;
  if ($gvars[":"] == null) $gvars[":"] = nil;
  if ($gvars["0"] == null) $gvars["0"] = nil;

  Opal.add_stubs(['$expand_path', '$dirname', '$include?', '$unshift', '$require', '$attr_reader', '$new', '$params', '$rollFromCgiParams', '$cgiParams', '$[]', '$+', '$getDiceBotParamText', '$roll', '$executeDiceBot', '$gsub', '$empty?', '$newBcDice', '$setIrcClient', '$setRandomValues', '$isKeepSecretDice', '$setTest', '$setCollectRandResult', '$setDir', '$!=', '$getGameType', '$setGameByTitle', '$setMessage', '$setChannel', '$recievePublicMessage', '$getRandResults', '$nil?', '$getGameCommandInfos', '$rand_results', '$detailed_rand_results', '$===', '$!', '$rollFromCgiParamsDummy', '$print']);
  
  bcDiceRoot = $$($nesting, 'File').$expand_path($$($nesting, 'File').$dirname("./patched/cgiDiceBot.rb"));
  if ($truthy($gvars[":"]['$include?'](bcDiceRoot))) {
  } else {
    $gvars[":"].$unshift(bcDiceRoot)
  };
  self.$require("bcdiceCore.rb");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CgiDiceBot');

    var $nesting = [self].concat($parent_nesting), $CgiDiceBot_initialize$1, $CgiDiceBot_rollFromCgi$2, $CgiDiceBot_rollFromCgiParamsDummy$3, $CgiDiceBot_rollFromCgiParams$4, $CgiDiceBot_getDiceBotParamText$5, $CgiDiceBot_roll$6, $CgiDiceBot_setTest$7, $CgiDiceBot_setRandomValues$8, $CgiDiceBot_executeDiceBot$9, $CgiDiceBot_newBcDice$10, $CgiDiceBot_getGameCommandInfos$11, $CgiDiceBot_sendMessage$12, $CgiDiceBot_sendMessageToOnlySender$13, $CgiDiceBot_sendMessageToChannels$14, $CgiDiceBot_rand_results$15, $CgiDiceBot_detailed_rand_results$16;

    self.$$prototype.cgi = self.$$prototype.cgiParams = self.$$prototype.isTest = self.$$prototype.rands = self.$$prototype.rollResult = self.$$prototype.bcdice = nil;
    
    
    Opal.def(self, '$initialize', $CgiDiceBot_initialize$1 = function $$initialize() {
      var self = this;

      
      self.rollResult = "";
      self.isSecret = false;
      self.rands = nil;
      self.isTest = false;
      return (self.bcdice = nil);
    }, $CgiDiceBot_initialize$1.$$arity = 0);
    self.$attr_reader("isSecret");
    
    Opal.def(self, '$rollFromCgi', $CgiDiceBot_rollFromCgi$2 = function $$rollFromCgi() {
      var self = this, cgi = nil;

      
      cgi = $$($nesting, 'CGI').$new();
      self.cgiParams = self.cgi.$params();
      return self.$rollFromCgiParams(self.$cgiParams());
    }, $CgiDiceBot_rollFromCgi$2.$$arity = 0);
    
    Opal.def(self, '$rollFromCgiParamsDummy', $CgiDiceBot_rollFromCgiParamsDummy$3 = function $$rollFromCgiParamsDummy() {
      var self = this;

      
      self.cgiParams = $hash2(["message", "gameType", "channel", "state", "sendto", "color"], {"message": "STG20", "gameType": "TORG", "channel": "1", "state": "state", "sendto": "sendto", "color": "999999"});
      return self.$rollFromCgiParams();
    }, $CgiDiceBot_rollFromCgiParamsDummy$3.$$arity = 0);
    
    Opal.def(self, '$rollFromCgiParams', $CgiDiceBot_rollFromCgiParams$4 = function $$rollFromCgiParams() {
      var $a, $b, self = this, message = nil, gameType = nil, result = nil, rollResult = nil, randResults = nil;

      
      message = self.cgiParams['$[]']("message");
      gameType = self.cgiParams['$[]']("gameType");
      gameType = ($truthy($a = gameType) ? $a : "diceBot");
      result = "";
      result = $rb_plus(result, "##>customBot BEGIN<##");
      result = $rb_plus(result, self.$getDiceBotParamText("channel"));
      result = $rb_plus(result, self.$getDiceBotParamText("name"));
      result = $rb_plus(result, self.$getDiceBotParamText("state"));
      result = $rb_plus(result, self.$getDiceBotParamText("sendto"));
      result = $rb_plus(result, self.$getDiceBotParamText("color"));
      result = $rb_plus(result, message);
      $b = self.$roll(message, gameType), $a = Opal.to_ary($b), (rollResult = ($a[0] == null ? nil : $a[0])), (randResults = ($a[1] == null ? nil : $a[1])), $b;
      result = $rb_plus(result, rollResult);
      result = $rb_plus(result, "##>customBot END<##");
      return result;
    }, $CgiDiceBot_rollFromCgiParams$4.$$arity = 0);
    
    Opal.def(self, '$getDiceBotParamText', $CgiDiceBot_getDiceBotParamText$5 = function $$getDiceBotParamText(paramName) {
      var $a, self = this, param = nil;

      
      param = self.cgiParams['$[]'](paramName);
      param = ($truthy($a = param) ? $a : "");
      return "" + (param) + "\t";
    }, $CgiDiceBot_getDiceBotParamText$5.$$arity = 1);
    
    Opal.def(self, '$roll', $CgiDiceBot_roll$6 = function $$roll(message, gameType, dir, prefix, isNeedResult) {
      var $a, $b, self = this, rollResult = nil, randResults = nil, result = nil;

      
      
      if (dir == null) {
        dir = nil;
      };
      
      if (prefix == null) {
        prefix = "";
      };
      
      if (isNeedResult == null) {
        isNeedResult = false;
      };
      $b = self.$executeDiceBot(message, gameType, dir, prefix, isNeedResult), $a = Opal.to_ary($b), (rollResult = ($a[0] == null ? nil : $a[0])), (randResults = ($a[1] == null ? nil : $a[1])), (gameType = ($a[2] == null ? nil : $a[2])), $b;
      result = "";
      if ($truthy(self.isTest)) {};
      gameType = gameType.$gsub(/:.+$/, "");
      if ($truthy(rollResult['$empty?']())) {
      } else {
        result = $rb_plus(result, "" + "\n" + (gameType) + " " + (rollResult))
      };
      return [result, randResults];
    }, $CgiDiceBot_roll$6.$$arity = -3);
    
    Opal.def(self, '$setTest', $CgiDiceBot_setTest$7 = function $$setTest() {
      var self = this;

      return (self.isTest = true)
    }, $CgiDiceBot_setTest$7.$$arity = 0);
    
    Opal.def(self, '$setRandomValues', $CgiDiceBot_setRandomValues$8 = function $$setRandomValues(rands) {
      var self = this;

      return (self.rands = rands)
    }, $CgiDiceBot_setRandomValues$8.$$arity = 1);
    
    Opal.def(self, '$executeDiceBot', $CgiDiceBot_executeDiceBot$9 = function $$executeDiceBot(message, gameType, dir, prefix, isNeedResult) {
      var self = this, bcdice = nil, channel = nil, nick_e = nil, rollResult = nil, randResults = nil;

      
      
      if (dir == null) {
        dir = nil;
      };
      
      if (prefix == null) {
        prefix = "";
      };
      
      if (isNeedResult == null) {
        isNeedResult = false;
      };
      bcdice = self.$newBcDice();
      bcdice.$setIrcClient(self);
      bcdice.$setRandomValues(self.rands);
      bcdice.$isKeepSecretDice(self.isTest);
      bcdice.$setTest(self.isTest);
      bcdice.$setCollectRandResult(isNeedResult);
      bcdice.$setDir(dir, prefix);
      if ($truthy(bcdice.$getGameType()['$!='](gameType))) {
        
        bcdice.$setGameByTitle(gameType);
        gameType = bcdice.$getGameType();};
      bcdice.$setMessage(message);
      channel = "";
      nick_e = "";
      bcdice.$setChannel(channel);
      bcdice.$recievePublicMessage(nick_e);
      rollResult = self.rollResult;
      self.rollResult = "";
      randResults = bcdice.$getRandResults();
      return [rollResult, randResults, gameType];
    }, $CgiDiceBot_executeDiceBot$9.$$arity = -3);
    
    Opal.def(self, '$newBcDice', $CgiDiceBot_newBcDice$10 = function $$newBcDice() {
      var self = this, bcdiceMaker = nil;

      
      if ($truthy(self.bcdice['$nil?']())) {
        
        bcdiceMaker = $$($nesting, 'BCDiceMaker').$new();
        self.bcdice = bcdiceMaker.$newBcDice();};
      return self.bcdice;
    }, $CgiDiceBot_newBcDice$10.$$arity = 0);
    
    Opal.def(self, '$getGameCommandInfos', $CgiDiceBot_getGameCommandInfos$11 = function $$getGameCommandInfos(dir, prefix) {
      var self = this, tableFileData = nil, infos = nil;

      
      self.$require("TableFileData");
      tableFileData = $$($nesting, 'TableFileData').$new();
      tableFileData.$setDir(dir, prefix);
      infos = tableFileData.$getGameCommandInfos();
      return infos;
    }, $CgiDiceBot_getGameCommandInfos$11.$$arity = 2);
    
    Opal.def(self, '$sendMessage', $CgiDiceBot_sendMessage$12 = function $$sendMessage(_to, message) {
      var self = this;

      return (self.rollResult = $rb_plus(self.rollResult, message))
    }, $CgiDiceBot_sendMessage$12.$$arity = 2);
    
    Opal.def(self, '$sendMessageToOnlySender', $CgiDiceBot_sendMessageToOnlySender$13 = function $$sendMessageToOnlySender(_nick_e, message) {
      var self = this;

      
      self.isSecret = true;
      return (self.rollResult = $rb_plus(self.rollResult, message));
    }, $CgiDiceBot_sendMessageToOnlySender$13.$$arity = 2);
    
    Opal.def(self, '$sendMessageToChannels', $CgiDiceBot_sendMessageToChannels$14 = function $$sendMessageToChannels(message) {
      var self = this;

      return (self.rollResult = $rb_plus(self.rollResult, message))
    }, $CgiDiceBot_sendMessageToChannels$14.$$arity = 1);
    
    Opal.def(self, '$rand_results', $CgiDiceBot_rand_results$15 = function $$rand_results() {
      var self = this;

      return self.bcdice.$rand_results()
    }, $CgiDiceBot_rand_results$15.$$arity = 0);
    return (Opal.def(self, '$detailed_rand_results', $CgiDiceBot_detailed_rand_results$16 = function $$detailed_rand_results() {
      var self = this;

      return self.bcdice.$detailed_rand_results()
    }, $CgiDiceBot_detailed_rand_results$16.$$arity = 0), nil) && 'detailed_rand_results';
  })($nesting[0], null, $nesting);
  if ($truthy($gvars["0"]['$===']("./patched/cgiDiceBot.rb"))) {
    
    bot = $$($nesting, 'CgiDiceBot').$new();
    result = "";
    if ($truthy($$($nesting, 'ARGV')['$empty?']()['$!']())) {
      $b = bot.$roll($$($nesting, 'ARGV')['$[]'](0), $$($nesting, 'ARGV')['$[]'](1)), $a = Opal.to_ary($b), (result = ($a[0] == null ? nil : $a[0])), (randResults = ($a[1] == null ? nil : $a[1])), $b
    } else {
      result = bot.$rollFromCgiParamsDummy()
    };
    return self.$print($rb_plus(result, "\n"));
  } else {
    return nil
  };
})(Opal);

/* Generated by Opal 1.0.3 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$debug', '$gsub', '$include?', '$new', '$const_get', '$to_s', '$===', '$downcase', '$map', '$to_proc', '$[]', '$raise', '$first', '$==']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBotLoader');

    var $nesting = [self].concat($parent_nesting), $DiceBotLoader_loadUnknownGame$1, $DiceBotLoader_initialize$2, $DiceBotLoader_match$ques$3, $DiceBotLoader_loadDiceBot$4;

    self.$$prototype.filenames = self.$$prototype.gameTitlePattern = self.$$prototype.diceBotClass = nil;
    
    Opal.defs(self, '$loadUnknownGame', $DiceBotLoader_loadUnknownGame$1 = function $$loadUnknownGame(gameTitle) {
      var self = this, escapedGameTitle = nil, e = nil;

      
      self.$debug("loadUnknownGame gameTitle", gameTitle);
      escapedGameTitle = gameTitle.$gsub(/(\.\.|\/|:|-)/, "_");
      if ($truthy(["UpperDice"]['$include?'](escapedGameTitle))) {
        escapedGameTitle = "DiceBot"};
      
      try {
        return $$($nesting, 'Object').$const_get(escapedGameTitle).$new()
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'LoadError'), $$($nesting, 'StandardError')])) {e = $err;
          try {
            
            self.$debug("DiceBot load ERROR!!!", e.$to_s());
            return nil;
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
    }, $DiceBotLoader_loadUnknownGame$1.$$arity = 1);
    
    Opal.def(self, '$initialize', $DiceBotLoader_initialize$2 = function $$initialize(gameTitlePattern, options) {
      var $a, self = this, $case = nil, defaultFilenames = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      $case = gameTitlePattern;
      if ($$($nesting, 'String')['$===']($case)) {self.gameTitlePattern = [gameTitlePattern.$downcase()]}
      else if ($$($nesting, 'Array')['$===']($case)) {self.gameTitlePattern = $send(gameTitlePattern, 'map', [], "downcase".$to_proc())}
      else if ($$($nesting, 'Regexp')['$===']($case)) {
      if ($truthy(options['$[]']("filenames"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "options[:filenames] is required when gameTitlePattern is a Regexp")
      };
      self.gameTitlePattern = gameTitlePattern;}
      else {self.$raise($$($nesting, 'TypeError'), "gameTitlePattern must be a String or an Array<String> or a Regexp")};
      defaultFilenames = (function() {$case = gameTitlePattern;
      if ($$($nesting, 'String')['$===']($case)) {return [gameTitlePattern]}
      else if ($$($nesting, 'Array')['$===']($case)) {return [gameTitlePattern.$first()]}
      else if ($$($nesting, 'Regexp')['$===']($case)) {return []}
      else { return nil }})();
      self.filenames = ($truthy($a = options['$[]']("filenames")) ? $a : defaultFilenames);
      return (self.diceBotClass = ($truthy($a = options['$[]']("class")) ? $a : self.filenames.$first()));
    }, $DiceBotLoader_initialize$2.$$arity = -2);
    
    Opal.def(self, '$match?', $DiceBotLoader_match$ques$3 = function(gameTitle) {
      var self = this, $case = nil;

      return (function() {$case = self.gameTitlePattern;
      if ($$($nesting, 'Array')['$===']($case)) {return self.gameTitlePattern['$include?'](gameTitle.$downcase())}
      else if ($$($nesting, 'Regexp')['$===']($case)) {return self.gameTitlePattern['$=='](gameTitle)}
      else { return nil }})()
    }, $DiceBotLoader_match$ques$3.$$arity = 1);
    return (Opal.def(self, '$loadDiceBot', $DiceBotLoader_loadDiceBot$4 = function $$loadDiceBot() {
      var self = this;

      return $$($nesting, 'Object').$const_get(self.diceBotClass).$new()
    }, $DiceBotLoader_loadDiceBot$4.$$arity = 0), nil) && 'loadDiceBot';
  })($nesting[0], null, $nesting)
})(Opal);

/* Generated by Opal 1.0.3 */
(function(Opal) {
  var $debug$5, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$clear', '$<<', '$add_log']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Logger');

    var $nesting = [self].concat($parent_nesting), $Logger_initialize$1, $Logger_clear$2, $Logger_add_log$3, $Logger_setDebug$4;

    
    self.$attr_reader("logs");
    Opal.defs(self, '$initialize', $Logger_initialize$1 = function $$initialize() {
      var self = this;

      return self.$clear()
    }, $Logger_initialize$1.$$arity = 0);
    Opal.defs(self, '$clear', $Logger_clear$2 = function $$clear() {
      var self = this;

      return (self.logs = [])
    }, $Logger_clear$2.$$arity = 0);
    Opal.defs(self, '$add_log', $Logger_add_log$3 = function $$add_log($a) {
      var $post_args, args, self = this;
      if (self.logs == null) self.logs = nil;
      if ($gvars.isDebug == null) $gvars.isDebug = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy($gvars.isDebug)) {
        return (self.logs = self.logs['$<<'](args))
      } else {
        return nil
      };
    }, $Logger_add_log$3.$$arity = -1);
    Opal.defs(self, '$setDebug', $Logger_setDebug$4 = function $$setDebug(b) {
      var self = this;

      return ($gvars.isDebug = b)
    }, $Logger_setDebug$4.$$arity = 1);
  })($nesting[0], $nesting);
  return (Opal.def(self, '$debug', $debug$5 = function $$debug($a) {
    var $post_args, args, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    args = $post_args;;
    return $$($nesting, 'Logger').$add_log(args);
  }, $debug$5.$$arity = -1), nil) && 'debug';
})(Opal);
